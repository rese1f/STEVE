{"mineWoodLog": {"code": "async function mineWoodLog(bot) {\n  const woodLogNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n\n  // Find a wood log block\n  const woodLogBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    return bot.findBlock({\n      matching: block => woodLogNames.includes(block.name),\n      maxDistance: 32\n    });\n  });\n  if (!woodLogBlock) {\n    bot.chat(\"Could not find a wood log.\");\n    return;\n  }\n\n  // Mine the wood log block\n  await mineBlock(bot, woodLogBlock.name, 1);\n  bot.chat(\"Wood log mined.\");\n}", "description": "async function mineWoodLog(bot) {\n    // The function is about mining a single wood log block. It searches for a wood log block by exploring the environment until it finds one of the seven types of wood logs. If a wood log block is found, it is mined and a success message is sent. If no wood log block is found, a failure message is sent.\n}"}, "mineThreeMoreOakLogs": {"code": "async function mineThreeMoreOakLogs(bot) {\n  // Check the initial inventory for oak logs\n  const initialOakLogs = bot.inventory.count(mcData.itemsByName.oak_log.id);\n\n  // Find 3 oak_log blocks\n  const oakLogs = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const oakLogs = bot.findBlocks({\n      matching: block => block.name === \"oak_log\",\n      maxDistance: 32,\n      count: 3\n    });\n    return oakLogs.length >= 3 ? oakLogs : null;\n  });\n  if (!oakLogs) {\n    bot.chat(\"Could not find enough oak logs.\");\n    return;\n  }\n\n  // Mine the oak_log blocks\n  await mineBlock(bot, \"oak_log\", 3);\n  bot.chat(\"3 oak logs mined.\");\n\n  // Compare the final inventory with the initial inventory\n  const finalOakLogs = bot.inventory.count(mcData.itemsByName.oak_log.id);\n  if (finalOakLogs - initialOakLogs === 3) {\n    bot.chat(\"Successfully mined 3 more oak logs.\");\n  } else {\n    bot.chat(\"Failed to mine 3 more oak logs.\");\n  }\n}", "description": "async function mineThreeMoreOakLogs(bot) {\n    // The function is about mining 3 oak logs. It first checks the initial inventory for oak logs. Then, it explores the environment until it finds 3 oak log blocks. If it cannot find enough oak logs, it returns. Otherwise, it mines the oak log blocks and compares the final inventory with the initial inventory to determine if it successfully mined 3 more oak logs.\n}"}, "craftCraftingTable": {"code": "async function craftCraftingTable(bot) {\n  // Check if there are enough oak planks in the inventory\n  const oakPlanksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n\n  // If not, craft oak planks from oak logs\n  if (oakPlanksCount < 4) {\n    const oakLogsCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n    const planksToCraft = Math.ceil((4 - oakPlanksCount) / 4);\n    if (oakLogsCount >= planksToCraft) {\n      await craftItem(bot, \"oak_planks\", planksToCraft);\n      bot.chat(\"Crafted oak planks.\");\n    } else {\n      bot.chat(\"Not enough oak logs to craft oak planks.\");\n      return;\n    }\n  }\n\n  // Craft a crafting table using oak planks\n  await craftItem(bot, \"crafting_table\", 1);\n  bot.chat(\"Crafted a crafting table.\");\n}", "description": "async function craftCraftingTable(bot) {\n    // The function crafts a crafting table using oak planks. It first checks if there are enough oak planks in the inventory, and if not, crafts oak planks from oak logs. Then, it crafts a crafting table using the oak planks.\n}"}, "craftWoodenPickaxe": {"code": "async function craftWoodenPickaxe(bot) {\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(\n    mcData.itemsByName.crafting_table.id\n  );\n\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n\n  // Check if there are enough oak planks in the inventory\n  const oakPlanksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n\n  // If not, craft oak planks from oak logs\n  if (oakPlanksCount < 6) {\n    const oakLogsCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n    const planksToCraft = Math.ceil((6 - oakPlanksCount) / 4);\n    if (oakLogsCount < planksToCraft) {\n      await mineBlock(bot, \"oak_log\", planksToCraft - oakLogsCount);\n    }\n    await craftItem(bot, \"oak_planks\", planksToCraft);\n    bot.chat(\"Crafted oak planks.\");\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not, craft sticks from oak planks\n  if (sticksCount < 2) {\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Crafted sticks.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a wooden pickaxe using the crafting table\n  await craftItem(bot, \"wooden_pickaxe\", 1);\n  bot.chat(\"Crafted a wooden pickaxe.\");\n}\n", "description": "async function craftWoodenPickaxe(bot) {\n    // The function crafts a wooden pickaxe using oak planks, sticks, and a crafting table. It checks if there are enough oak planks and sticks in the inventory, and crafts them if necessary. Then, it places a crafting table near the bot and uses it to craft a wooden pickaxe.\n}"}, "craftWoodenSword": {"code": "async function craftWoodenSword(bot) {\n  // Check if there are enough oak planks in the inventory\n  const oakPlanksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n\n  // If not, craft oak planks from oak logs\n  if (oakPlanksCount < 2) {\n    const oakLogsCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n    const planksToCraft = Math.ceil((2 - oakPlanksCount) / 4);\n    if (oakLogsCount >= planksToCraft) {\n      await craftItem(bot, \"oak_planks\", planksToCraft);\n      bot.chat(\"Crafted oak planks.\");\n    } else {\n      bot.chat(\"Not enough oak logs to craft oak planks.\");\n      return;\n    }\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not, craft sticks from oak planks\n  if (sticksCount < 1) {\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Crafted sticks.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a wooden sword using the crafting table\n  await craftItem(bot, \"wooden_sword\", 1);\n  bot.chat(\"Crafted a wooden sword.\");\n}", "description": "async function craftWoodenSword(bot) {\n    // The function crafts a wooden sword using oak planks, sticks, and a crafting table. It checks if there are enough oak planks and sticks in the inventory, and crafts them if necessary. Then, it places a crafting table near the bot and uses it to craft a wooden sword.\n}"}, "killOnePig": {"code": "async function killOnePig(bot) {\n  // Equip the wooden sword\n  const woodenSword = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_sword.id);\n  await bot.equip(woodenSword, \"hand\");\n\n  // Find the nearest pig\n  const pig = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const pig = bot.nearestEntity(entity => {\n      return entity.name === \"pig\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return pig;\n  });\n  if (!pig) {\n    bot.chat(\"Could not find a pig.\");\n    return;\n  }\n\n  // Kill the pig using the wooden sword\n  await killMob(bot, \"pig\", 300);\n  bot.chat(\"Killed a pig.\");\n\n  // Collect the dropped items\n  await bot.pathfinder.goto(new GoalBlock(pig.position.x, pig.position.y, pig.position.z));\n  bot.chat(\"Collected dropped items.\");\n}", "description": "async function killOnePig(bot) {\n    // The function is about killing a pig using a wooden sword and collecting the dropped items. First, equip the wooden sword in the hand. Next, explore the environment until finding the nearest pig within 32 blocks. Once a pig is found, kill it using the wooden sword and collect the dropped items by moving to the pig's position.\n}"}, "killFourSheep": {"code": "async function killFourSheep(bot) {\n  // Equip the wooden sword\n  const woodenSword = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_sword.id);\n  await bot.equip(woodenSword, \"hand\");\n\n  // Find and kill the first three sheep\n  for (let i = 1; i <= 3; i++) {\n    await killMob(bot, \"sheep\", 300);\n    bot.chat(`Killed sheep ${i}.`);\n  }\n\n  // Find and kill the fourth sheep\n  await killMob(bot, \"sheep\", 300);\n  bot.chat(\"Killed the fourth sheep.\");\n\n  // Collect the dropped items from the killed sheep\n  const sheepDrops = [\"wool\", \"raw_mutton\"];\n  for (const drop of sheepDrops) {\n    const droppedItem = bot.findBlock({\n      matching: block => block.name === drop,\n      maxDistance: 32\n    });\n    if (droppedItem) {\n      await bot.pathfinder.goto(new GoalBlock(droppedItem.position.x, droppedItem.position.y, droppedItem.position.z));\n    }\n  }\n  bot.chat(\"Collected dropped items from the killed sheep.\");\n}", "description": "async function killFourSheep(bot) {\n    // The function is about killing four sheep and collecting their drops. It equips a wooden sword and kills the first three sheep, then kills the fourth sheep. After that, it collects the dropped items from the killed sheep, which include wool and raw mutton.\n}"}, "craftOakPlanksAndSticks": {"code": "async function craftOakPlanksAndSticks(bot) {\n  // Check if there are enough oak planks in the inventory\n  const oakPlanksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n\n  // If not, craft oak planks from oak logs\n  if (oakPlanksCount < 8) {\n    const oakLogsCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n    const planksToCraft = Math.ceil((8 - oakPlanksCount) / 4);\n    if (oakLogsCount >= planksToCraft) {\n      await craftItem(bot, \"oak_planks\", planksToCraft);\n      bot.chat(\"Crafted oak planks.\");\n    } else {\n      bot.chat(\"Not enough oak logs to craft oak planks.\");\n      return;\n    }\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not, craft sticks from oak planks\n  if (sticksCount < 4) {\n    await craftItem(bot, \"stick\", 2);\n    bot.chat(\"Crafted sticks.\");\n  }\n}", "description": "async function craftOakPlanksAndSticks(bot) {\n    // The function checks if there are enough oak planks and sticks in the inventory, and crafts them if necessary. If there are not enough oak planks, it crafts them from oak logs. If there are not enough sticks, it crafts them from oak planks.\n}"}, "mineFiveCoalOres": {"code": "async function mineFiveCoalOres(bot) {\n  // Equip the stone pickaxe\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  await bot.equip(stonePickaxe, \"hand\");\n\n  // Find 5 coal_ore blocks\n  const coalOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const coalOres = bot.findBlocks({\n      matching: block => block.name === \"coal_ore\",\n      maxDistance: 32,\n      count: 5\n    });\n    return coalOres.length >= 5 ? coalOres : null;\n  });\n  if (!coalOres) {\n    bot.chat(\"Could not find enough coal ores.\");\n    return;\n  }\n\n  // Mine the 5 coal_ore blocks\n  await mineBlock(bot, \"coal_ore\", 5);\n  bot.chat(\"5 coal ores mined.\");\n}", "description": "async function mineFiveCoalOres(bot) {\n    // The function is about mining 5 coal ores using a stone pickaxe. First, equip the stone pickaxe in the hand. Next, explore the environment until finding 5 coal_ore blocks. Once 5 coal_ore blocks are found, mine them using the stone pickaxe.\n}"}, "mineTenCobblestone": {"code": "async function mineTenCobblestone(bot) {\n  // Check if the bot has a pickaxe in the inventory\n  const pickaxe = bot.inventory.items().find(item => item.name.endsWith(\"_pickaxe\"));\n\n  // If not, craft a wooden pickaxe using the available resources in the inventory\n  if (!pickaxe) {\n    await craftWoodenPickaxe(bot);\n  } else {\n    // Equip the pickaxe\n    await bot.equip(pickaxe, \"hand\");\n  }\n\n  // Use the exploreUntil function to find cobblestone blocks\n  const cobblestoneBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const cobblestoneBlocks = bot.findBlocks({\n      matching: block => block.name === \"stone\",\n      maxDistance: 32,\n      count: 10\n    });\n    return cobblestoneBlocks.length >= 10 ? cobblestoneBlocks : null;\n  });\n  if (!cobblestoneBlocks) {\n    bot.chat(\"Could not find enough cobblestone.\");\n    return;\n  }\n\n  // Mine 10 cobblestone blocks using the mineBlock function\n  await mineBlock(bot, \"stone\", 10);\n  bot.chat(\"10 cobblestone mined.\");\n}", "description": "async function mineTenCobblestone(bot) {\n    // The function is about mining 10 cobblestones using a pickaxe. First, check if the bot has a pickaxe in the inventory. If not, craft a wooden pickaxe using the available resources in the inventory. If the pickaxe is available, equip the pickaxe in the hand. Next, use the exploreUntil function to find cobblestone blocks. Once 10 cobblestone blocks are found, mine them using the mineBlock function.\n}"}, "craftStonePickaxe": {"code": "async function craftStonePickaxe(bot) {\n  // Check if there are enough cobblestone and sticks in the inventory\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not enough cobblestone or sticks, collect the required items\n  if (cobblestoneCount < 3) {\n    await mineBlock(bot, \"stone\", 3 - cobblestoneCount);\n    bot.chat(\"Collected cobblestone.\");\n  }\n  if (sticksCount < 2) {\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Crafted sticks.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a stone pickaxe using the crafting table\n  await craftItem(bot, \"stone_pickaxe\", 1);\n  bot.chat(\"Crafted a stone pickaxe.\");\n}", "description": "async function craftStonePickaxe(bot) {\n    // The function crafts a stone pickaxe using cobblestone and sticks. It checks if there are enough cobblestone and sticks in the inventory, and if not, it collects the required items. Then, it places a crafting table near the bot and crafts a stone pickaxe using the crafting table.\n}"}, "mineFiveIronOres": {"code": "async function mineFiveIronOres(bot) {\n  // Equip the stone pickaxe\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  await bot.equip(stonePickaxe, \"hand\");\n\n  // Find 5 iron_ore blocks\n  const ironOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const ironOres = bot.findBlocks({\n      matching: block => block.name === \"iron_ore\",\n      maxDistance: 32,\n      count: 5\n    });\n    return ironOres.length >= 5 ? ironOres : null;\n  });\n  if (!ironOres) {\n    bot.chat(\"Could not find enough iron ores.\");\n    return;\n  }\n\n  // Mine the 5 iron_ore blocks\n  await mineBlock(bot, \"iron_ore\", 5);\n  bot.chat(\"5 iron ores mined.\");\n}", "description": "async function mineFiveIronOres(bot) {\n    // The function is about mining 5 iron ores using a stone pickaxe. First, equip the stone pickaxe in the hand. Next, explore the environment until finding 5 iron_ore blocks. Once 5 iron_ore blocks are found, mine them using the stone pickaxe.\n}"}, "craftFurnace": {"code": "async function craftFurnace(bot) {\n  // Check if there are enough cobblestones in the inventory\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n\n  // If not, mine the required cobblestones\n  if (cobblestoneCount < 8) {\n    await mineBlock(bot, \"stone\", 8 - cobblestoneCount);\n    bot.chat(\"Collected cobblestone.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a furnace using the crafting table\n  await craftItem(bot, \"furnace\", 1);\n  bot.chat(\"Crafted a furnace.\");\n}", "description": "async function craftFurnace(bot) {\n    // The function crafts a furnace using a crafting table and cobblestones. If there are not enough cobblestones in the inventory, it mines the required amount. Then, it places a crafting table near the bot and crafts a furnace using the crafting table. Finally, it sends a chat message indicating that a furnace has been crafted.\n}"}, "smeltFiveRawIron": {"code": "async function findSuitablePosition(bot) {\n  const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n  for (const offset of offsets) {\n    const position = bot.entity.position.offset(offset.x, offset.y, offset.z);\n    const block = bot.blockAt(position);\n    if (block.name === \"air\") {\n      return position;\n    }\n  }\n  return null;\n}\nasync function smeltFiveRawIron(bot) {\n  // Check if there is coal in the inventory\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n\n  // If not enough coal, mine coal_ore to obtain coal\n  if (coalCount < 3) {\n    await mineBlock(bot, \"coal_ore\", 3 - coalCount);\n    bot.chat(\"Collected coal.\");\n  }\n  // Check if there is a furnace in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  // If not, craft a furnace using the available cobblestone\n  if (!furnaceItem) {\n    await craftFurnace(bot);\n  }\n  // Find a suitable position to place the furnace\n  const furnacePosition = await findSuitablePosition(bot);\n  if (!furnacePosition) {\n    bot.chat(\"Could not find a suitable position to place the furnace.\");\n    return;\n  }\n  // Place the furnace at the suitable position\n  await placeItem(bot, \"furnace\", furnacePosition);\n  // Smelt 5 raw iron using the available coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 5);\n  bot.chat(\"5 raw iron smelted.\");\n}", "description": "async function smeltFiveRawIron(bot) {\n    // The function is about smelting 5 raw iron using a furnace and coal as fuel. If there is no furnace in the inventory, craft one using cobblestone. Find a suitable position to place the furnace and place it there. Then, smelt 5 raw iron using the available coal as fuel.\n}"}, "craftIronPickaxe": {"code": "async function craftIronPickaxe(bot) {\n  // Check if there are enough iron ingots and sticks in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not enough iron ingots or sticks, collect the required items\n  if (ironIngotsCount < 3) {\n    await mineBlock(bot, \"iron_ore\", 3 - ironIngotsCount);\n    bot.chat(\"Collected iron ores.\");\n    await smeltItem(bot, \"iron_ore\", \"coal\", 3 - ironIngotsCount);\n    bot.chat(\"Smelted iron ores into iron ingots.\");\n  }\n  if (sticksCount < 2) {\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Crafted sticks.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft an iron pickaxe using the crafting table\n  await craftItem(bot, \"iron_pickaxe\", 1);\n  bot.chat(\"Crafted an iron pickaxe.\");\n}", "description": "async function craftIronPickaxe(bot) {\n    // The function crafts an iron pickaxe using a crafting table. It checks if there are enough iron ingots and sticks in the inventory, and if not, collects the required items. It then places a crafting table near the bot and crafts an iron pickaxe using the crafting table.\n}"}, "craftIronSword": {"code": "async function craftIronSword(bot) {\n  // Check if there are enough iron ingots and sticks in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not enough iron ingots or sticks, collect the required items\n  if (ironIngotsCount < 2) {\n    await mineBlock(bot, \"iron_ore\", 2 - ironIngotsCount);\n    bot.chat(\"Collected iron ores.\");\n    await smeltItem(bot, \"iron_ore\", \"coal\", 2 - ironIngotsCount);\n    bot.chat(\"Smelted iron ores into iron ingots.\");\n  }\n  if (sticksCount < 1) {\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Crafted sticks.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft an iron sword using the crafting table\n  await craftItem(bot, \"iron_sword\", 1);\n  bot.chat(\"Crafted an iron sword.\");\n}", "description": "async function craftIronSword(bot) {\n    // The function crafts an iron sword using a crafting table. It checks if there are enough iron ingots and sticks in the inventory, and if not, it collects the required items. It then places a crafting table near the bot and crafts an iron sword using the crafting table.\n}"}, "cookPorkchops": {"code": "async function cookPorkchops(bot) {\n  // Check if there is a furnace in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n\n  // If not, craft a furnace using the available cobblestone\n  if (!furnaceItem) {\n    await craftFurnace(bot);\n  }\n\n  // Place the furnace near the bot\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt 2 porkchops using the available coal as fuel\n  await smeltItem(bot, \"porkchop\", \"coal\", 2);\n  bot.chat(\"2 porkchops cooked.\");\n}", "description": "async function cookPorkchops(bot) {\n    // The function is about cooking 2 porkchops using a furnace and coal as fuel. First, it checks if there is a furnace in the inventory. If not, it crafts a furnace using cobblestone. Then, it places the furnace near the bot. Finally, it smelts 2 porkchops using coal as fuel and saves the event of cooking porkchops.\n}"}, "mineFiveLapisLazuliOres": {"code": "async function mineFiveLapisLazuliOres(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find 5 lapis_lazuli_ore blocks\n  const lapisOres = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n    const lapisOres = bot.findBlocks({\n      matching: block => block.name === \"lapis_ore\",\n      maxDistance: 32,\n      count: 5\n    });\n    return lapisOres.length >= 5 ? lapisOres : null;\n  });\n  if (!lapisOres) {\n    bot.chat(\"Could not find enough lapis lazuli ores.\");\n    return;\n  }\n\n  // Mine the 5 lapis_lazuli_ore blocks\n  await mineBlock(bot, \"lapis_ore\", 5);\n  bot.chat(\"5 lapis lazuli ores mined.\");\n}", "description": "async function mineFiveLapisLazuliOres(bot) {\n    // The function is about mining 5 lapis lazuli ores using an iron pickaxe. First, equip the iron pickaxe in the hand. Next, explore the environment until finding 5 lapis lazuli ore blocks. Once 5 lapis lazuli ore blocks are found, mine them using the iron pickaxe.\n}"}, "craftIronAxe": {"code": "async function craftIronAxe(bot) {\n  // Check if there are enough iron ingots and sticks in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not enough iron ingots or sticks, collect the required items\n  if (ironIngotsCount < 3) {\n    await mineBlock(bot, \"iron_ore\", 3 - ironIngotsCount);\n    bot.chat(\"Collected iron ores.\");\n    await smeltItem(bot, \"iron_ore\", \"coal\", 3 - ironIngotsCount);\n    bot.chat(\"Smelted iron ores into iron ingots.\");\n  }\n  if (sticksCount < 2) {\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Crafted sticks.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft an iron axe using the crafting table\n  await craftItem(bot, \"iron_axe\", 1);\n  bot.chat(\"Crafted an iron axe.\");\n}", "description": "async function craftIronAxe(bot) {\n    // The function crafts an iron axe using a crafting table. It checks if there are enough iron ingots and sticks in the inventory, and if not, collects the required items. It then places a crafting table near the bot and crafts an iron axe using the crafting table.\n}"}, "craftStoneShovel": {"code": "async function craftStoneShovel(bot) {\n  // Check if there are enough cobblestone and sticks in the inventory\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not enough cobblestone, mine cobblestone\n  if (cobblestoneCount < 1) {\n    await mineBlock(bot, \"stone\", 1);\n    bot.chat(\"Collected cobblestone.\");\n  }\n\n  // If not enough sticks, craft sticks\n  if (sticksCount < 2) {\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Crafted sticks.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a stone shovel using the crafting table\n  await craftItem(bot, \"stone_shovel\", 1);\n  bot.chat(\"Crafted a stone shovel.\");\n}", "description": "async function craftStoneShovel(bot) {\n    // The function crafts a stone shovel using cobblestone and sticks. It checks if there are enough cobblestone and sticks in the inventory, and if not, it mines cobblestone or crafts sticks. Then, it places a crafting table near the bot and crafts a stone shovel using the crafting table. Finally, it sends a chat message indicating that a stone shovel has been crafted.\n}"}, "cookSevenMutton": {"code": "async function cookSevenMutton(bot) {\n  // Check if there is a furnace in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n\n  // If not, craft a furnace using the available cobblestone\n  if (!furnaceItem) {\n    await craftFurnace(bot);\n  }\n\n  // Find a suitable position to place the furnace\n  const furnacePosition = await findSuitablePosition(bot);\n  if (!furnacePosition) {\n    bot.chat(\"Could not find a suitable position to place the furnace.\");\n    return;\n  }\n\n  // Place the furnace at the suitable position\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt 7 raw mutton using the available coal as fuel\n  await smeltItem(bot, \"mutton\", \"coal\", 7);\n  bot.chat(\"7 mutton cooked.\");\n}", "description": "async function cookSevenMutton(bot) {\n    // The function is about cooking 7 raw mutton using a furnace and coal as fuel. It checks if there is a furnace in the inventory, and if not, it crafts one. Then it finds a suitable position to place the furnace and places it there. After that, it smelts 7 raw mutton using the available coal as fuel and saves the event of cooking 7 mutton.\n}"}, "killTwoPigs": {"code": "async function killTwoPigs(bot) {\n  // Equip the wooden sword\n  const woodenSword = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_sword.id);\n  await bot.equip(woodenSword, \"hand\");\n\n  // Find and kill the first pig\n  await killMob(bot, \"pig\", 300);\n  bot.chat(\"Killed the first pig.\");\n\n  // Find and kill the second pig\n  await killMob(bot, \"pig\", 300);\n  bot.chat(\"Killed the second pig.\");\n\n  // Collect the dropped items from the killed pigs\n  const pigDrops = [\"raw_porkchop\"];\n  for (const drop of pigDrops) {\n    const droppedItem = bot.findBlock({\n      matching: block => block.name === drop,\n      maxDistance: 32\n    });\n    if (droppedItem) {\n      await bot.pathfinder.goto(new GoalBlock(droppedItem.position.x, droppedItem.position.y, droppedItem.position.z));\n    }\n  }\n  bot.chat(\"Collected dropped items from the killed pigs.\");\n}", "description": "async function killTwoPigs(bot) {\n    // The function is about killing two pigs and collecting their dropped items. The function equips a wooden sword and kills two pigs using the `killMob` function. After killing each pig, the function logs a message. Then, the function searches for dropped items from the killed pigs and collects them using the `pathfinder` module. Finally, the function logs a message indicating that the items have been collected.\n}"}, "eatCookedPorkchop": {"code": "async function eatCookedPorkchop(bot) {\n  // Equip the cooked porkchop in the bot's hand\n  const cookedPorkchop = bot.inventory.findInventoryItem(mcData.itemsByName.cooked_porkchop.id);\n  await bot.equip(cookedPorkchop, \"hand\");\n\n  // Consume the cooked porkchop\n  await bot.consume();\n\n  // Send a chat message to indicate the task is completed\n  bot.chat(\"Ate 1 cooked porkchop.\");\n}", "description": "async function eatCookedPorkchop(bot) {\n    // The function is about eating a cooked porkchop. It equips the cooked porkchop in the bot's hand, consumes it, and sends a chat message to indicate the task is completed.\n}"}, "craftWoodenHoe": {"code": "async function craftWoodenHoe(bot) {\n  // Check if there are enough oak planks in the inventory\n  const oakPlanksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n\n  // If not, craft oak planks from oak logs\n  if (oakPlanksCount < 2) {\n    const oakLogsCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n    const planksToCraft = Math.ceil((2 - oakPlanksCount) / 4);\n    if (oakLogsCount >= planksToCraft) {\n      await craftItem(bot, \"oak_planks\", planksToCraft);\n      bot.chat(\"Crafted oak planks.\");\n    } else {\n      bot.chat(\"Not enough oak logs to craft oak planks.\");\n      return;\n    }\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not, craft sticks from oak planks\n  if (sticksCount < 2) {\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Crafted sticks.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a wooden hoe using the crafting table\n  await craftItem(bot, \"wooden_hoe\", 1);\n  bot.chat(\"Crafted a wooden hoe.\");\n}", "description": "async function craftWoodenHoe(bot) {\n    // The function crafts a wooden hoe using oak planks and sticks. If there are not enough oak planks, it crafts them from oak logs. If there are not enough sticks, it crafts them from oak planks. Then, it places a crafting table near the bot and uses it to craft a wooden hoe.\n}"}, "craftWhiteBed": {"code": "async function craftWhiteBed(bot) {\n  // Check if there are enough oak planks in the inventory\n  const oakPlanksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n\n  // If not, craft oak planks from oak logs\n  if (oakPlanksCount < 3) {\n    const oakLogsCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n    const planksToCraft = Math.ceil((3 - oakPlanksCount) / 4);\n    if (oakLogsCount >= planksToCraft) {\n      await craftItem(bot, \"oak_planks\", planksToCraft);\n      bot.chat(\"Crafted oak planks.\");\n    } else {\n      bot.chat(\"Not enough oak logs to craft oak planks.\");\n      return;\n    }\n  }\n\n  // Check if there are enough white wool in the inventory\n  const whiteWoolCount = bot.inventory.count(mcData.itemsByName.white_wool.id);\n  if (whiteWoolCount < 3) {\n    bot.chat(\"Not enough white wool to craft a bed.\");\n    return;\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a white bed using the crafting table\n  await craftItem(bot, \"white_bed\", 1);\n  bot.chat(\"Crafted a white bed.\");\n}", "description": "async function craftWhiteBed(bot) {\n    // The function crafts a white bed using oak planks and white wool. If there are not enough oak planks in the inventory, it crafts oak planks from oak logs. If there are not enough white wool in the inventory, it stops the function. Then, it places a crafting table near the bot and crafts a white bed using the crafting table.\n}"}, "killOneEnderman": {"code": "async function killOneEnderman(bot) {\n  // Equip the iron sword\n  const ironSword = bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id);\n  await bot.equip(ironSword, \"hand\");\n\n  // Find the nearest enderman\n  const enderman = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const enderman = bot.nearestEntity(entity => {\n      return entity.name === \"enderman\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return enderman;\n  });\n  if (!enderman) {\n    bot.chat(\"Could not find an enderman.\");\n    return;\n  }\n\n  // Kill the enderman using the iron sword\n  await killMob(bot, \"enderman\", 300);\n  bot.chat(\"Killed an enderman.\");\n\n  // Collect the dropped items\n  await bot.pathfinder.goto(new GoalBlock(enderman.position.x, enderman.position.y, enderman.position.z));\n  bot.chat(\"Collected dropped items.\");\n}", "description": "async function killOneEnderman(bot) {\n    // The function is about killing one enderman using an iron sword. First, equip the iron sword in the hand. Next, explore the environment until finding the nearest enderman within 32 blocks. Once an enderman is found, kill it using the iron sword. After killing the enderman, collect the dropped items by moving to the enderman's position.\n}"}, "craftIronChestplate": {"code": "async function craftIronChestplate(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  if (ironIngotsCount < 8) {\n    await mineBlock(bot, \"iron_ore\", 8 - ironIngotsCount);\n    bot.chat(\"Collected iron ores.\");\n    await smeltItem(bot, \"iron_ore\", \"coal\", 8 - ironIngotsCount);\n    bot.chat(\"Smelted iron ores into iron ingots.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft an iron chestplate using the crafting table\n  await craftItem(bot, \"iron_chestplate\", 1);\n  bot.chat(\"Crafted an iron chestplate.\");\n}", "description": "async function craftIronChestplate(bot) {\n    // The function crafts an iron chestplate using a crafting table. It first checks if there are enough iron ingots in the inventory, and if not, it mines iron ores and smelts them into iron ingots. Then it places a crafting table near the bot and crafts an iron chestplate using the crafting table.\n}"}, "mineFiveCopperOres": {"code": "async function mineFiveCopperOres(bot) {\n  // Check if the bot already has 5 or more copper ores in the inventory\n  const copperOres = bot.inventory.items().filter(item => item.name === \"copper_ore\");\n  const totalCopperOres = copperOres.reduce((total, item) => total + item.count, 0);\n  if (totalCopperOres >= 5) {\n    bot.chat(\"Task already completed. There are already \" + totalCopperOres + \" copper ores in the inventory.\");\n  } else {\n    bot.chat(\"Need to mine \" + (5 - totalCopperOres) + \" more copper ores.\");\n    // You can call the mineFiveCopperOres function from the previous response here\n  }\n}", "description": "async function mineFiveCopperOres(bot) {\n    // The function checks if the bot already has 5 or more copper ores in the inventory. If not, it outputs how many more copper ores are needed to complete the task.\n}"}, "equipIronChestplate": {"code": "async function equipIronChestplate(bot) {\n  // Find the iron chestplate in the inventory\n  const ironChestplate = bot.inventory.findInventoryItem(mcData.itemsByName.iron_chestplate.id);\n\n  // Equip the iron chestplate\n  if (ironChestplate) {\n    await bot.equip(ironChestplate, \"torso\");\n    bot.chat(\"Equipped iron chestplate.\");\n  } else {\n    bot.chat(\"Iron chestplate not found in inventory.\");\n  }\n}", "description": "async function equipIronChestplate(bot) {\n    // The function is about equipping an iron chestplate on the bot's torso. It first finds the iron chestplate in the inventory and then equips it. If the iron chestplate is not found in the inventory, it sends a message saying that it was not found.\n}"}, "smeltRawCopper": {"code": "async function smeltRawCopper(bot) {\n  // Check if there is a furnace in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n\n  // If not, craft a furnace using the available cobblestone\n  if (!furnaceItem) {\n    await craftFurnace(bot);\n  }\n\n  // Find a suitable position to place the furnace\n  const furnacePosition = await findSuitablePosition(bot);\n  if (!furnacePosition) {\n    bot.chat(\"Could not find a suitable position to place the furnace.\");\n    return;\n  }\n\n  // Place the furnace at the suitable position\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt 19 raw copper using the available coal as fuel\n  await smeltItem(bot, \"raw_copper\", \"coal\", 19);\n  bot.chat(\"19 raw copper smelted.\");\n}", "description": "async function smeltRawCopper(bot) {\n    // The function is about smelting 19 raw copper using a furnace and coal as fuel. It checks if there is a furnace in the inventory, and if not, it crafts one. Then it finds a suitable position to place the furnace and places it there. Finally, it smelts the raw copper using the furnace and coal as fuel.\n}"}, "craftIronHelmet": {"code": "async function craftIronHelmet(bot) {\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft an iron helmet using the crafting table\n  await craftItem(bot, \"iron_helmet\", 1);\n  bot.chat(\"Crafted an iron helmet.\");\n}", "description": "async function craftIronHelmet(bot) {\n    // The function is about crafting an iron helmet using a crafting table. First, place the crafting table near the bot. Then, craft an iron helmet using the crafting table and save it to the inventory.\n}"}, "craftChest": {"code": "async function craftChest(bot) {\n  // Check if there are enough oak planks in the inventory\n  const oakPlanksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n\n  // If not, craft oak planks from oak logs\n  if (oakPlanksCount < 8) {\n    const oakLogsCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n    const planksToCraft = Math.ceil((8 - oakPlanksCount) / 4);\n    if (oakLogsCount >= planksToCraft) {\n      await craftItem(bot, \"oak_planks\", planksToCraft);\n      bot.chat(\"Crafted oak planks.\");\n    } else {\n      bot.chat(\"Not enough oak logs to craft oak planks.\");\n      return;\n    }\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a chest using the crafting table\n  await craftItem(bot, \"chest\", 1);\n  bot.chat(\"Crafted a chest.\");\n}", "description": "async function craftChest(bot) {\n    // The function crafts a chest using a crafting table and oak planks. If there are not enough oak planks in the inventory, it crafts oak planks from oak logs. Once there are enough oak planks, it places a crafting table near the bot and crafts a chest using the crafting table.\n}"}, "equipIronSword": {"code": "async function equipIronSword(bot) {\n  // Find the iron sword in the inventory\n  let ironSword = bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id);\n\n  // If the iron sword is not found in the inventory, check the chest\n  if (!ironSword) {\n    const chestPosition = new Vec3(89, 41, 206);\n    const itemsToGet = {\n      \"iron_sword\": 1\n    };\n    await getItemFromChest(bot, chestPosition, itemsToGet);\n    ironSword = bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id);\n  }\n\n  // Equip the iron sword\n  if (ironSword) {\n    await bot.equip(ironSword, \"hand\");\n    bot.chat(\"Equipped iron sword.\");\n  } else {\n    bot.chat(\"Iron sword not found in inventory or chest.\");\n  }\n}", "description": "async function equipIronSword(bot) {\n    // The function is about equipping an iron sword. It first checks if the iron sword is in the inventory. If not, it checks a chest for the iron sword. If the iron sword is found, it is equipped in the hand. If the iron sword is not found, a message is sent to the chat.\n}"}, "craftLightningRod": {"code": "async function findSuitablePosition(bot) {\n  const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n  for (const offset of offsets) {\n    const position = bot.entity.position.offset(offset.x, offset.y, offset.z);\n    const block = bot.blockAt(position);\n    if (block.name === \"air\") {\n      return position;\n    }\n  }\n  return null;\n}\n\nasync function craftLightningRod(bot) {\n  // Find a suitable position to place the crafting table\n  const craftingTablePosition = await findSuitablePosition(bot);\n\n  // Place the crafting table at the found position\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Check if there are enough copper ingots in the inventory\n  const copperIngotsCount = bot.inventory.count(mcData.itemsByName.copper_ingot.id);\n\n  // If not enough copper ingots, mine copper ores and smelt them into copper ingots\n  if (copperIngotsCount < 3) {\n    await mineBlock(bot, \"copper_ore\", 3 - copperIngotsCount);\n    bot.chat(\"Collected copper ores.\");\n    await smeltItem(bot, \"copper_ore\", \"coal\", 3 - copperIngotsCount);\n    bot.chat(\"Smelted copper ores into copper ingots.\");\n  }\n\n  // Craft a lightning rod using the crafting table\n  await craftItem(bot, \"lightning_rod\", 1);\n  bot.chat(\"Crafted a lightning rod.\");\n}", "description": "async function craftLightningRod(bot) {\n    // The function is about crafting a lightning rod. It first finds a suitable position to place the crafting table and places it there. Then it checks if there are enough copper ingots in the inventory, and if not, it mines copper ores and smelts them into copper ingots. Finally, it crafts a lightning rod using the crafting table.\n}"}, "craftCopperBlock": {"code": "async function craftCopperBlock(bot) {\n  // Check if there are enough copper ingots in the inventory\n  const copperIngotsCount = bot.inventory.count(mcData.itemsByName.copper_ingot.id);\n\n  // If not enough copper ingots, mine copper ores and smelt them into copper ingots\n  if (copperIngotsCount < 9) {\n    await mineBlock(bot, \"copper_ore\", 9 - copperIngotsCount);\n    bot.chat(\"Collected copper ores.\");\n    await smeltItem(bot, \"copper_ore\", \"coal\", 9 - copperIngotsCount);\n    bot.chat(\"Smelted copper ores into copper ingots.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a copper block using the crafting table\n  await craftItem(bot, \"copper_block\", 1);\n  bot.chat(\"Crafted a copper block.\");\n}", "description": "async function craftCopperBlock(bot) {\n    // The function crafts a copper block using a crafting table. It first checks if there are enough copper ingots in the inventory, and if not, it mines copper ores and smelts them into copper ingots. Then it places a crafting table near the bot and crafts a copper block using the crafting table.\n}"}, "killOneSpider": {"code": "async function killOneSpider(bot) {\n  // Equip the iron sword\n  const ironSword = bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id);\n  await bot.equip(ironSword, \"hand\");\n\n  // Find the nearest spider\n  const spider = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const spider = bot.nearestEntity(entity => {\n      return entity.name === \"spider\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return spider;\n  });\n  if (!spider) {\n    bot.chat(\"Could not find a spider.\");\n    return;\n  }\n\n  // Kill the spider using the iron sword\n  await killMob(bot, \"spider\", 300);\n  bot.chat(\"Killed a spider.\");\n\n  // Collect the dropped items\n  await bot.pathfinder.goto(new GoalBlock(spider.position.x, spider.position.y, spider.position.z));\n  bot.chat(\"Collected dropped items.\");\n}", "description": "async function killOneSpider(bot) {\n    // The function is about killing a spider using an iron sword. First, equip the iron sword in the hand. Then, explore the environment until finding the nearest spider within 32 blocks. Once a spider is found, kill it using the iron sword. After killing the spider, collect the dropped items by moving to the spider's position.\n}"}, "killOneZombie": {"code": "async function killOneZombie(bot) {\n  // Equip the iron sword\n  const ironSword = bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id);\n  await bot.equip(ironSword, \"hand\");\n\n  // Find the nearest zombie\n  const zombie = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const zombie = bot.nearestEntity(entity => {\n      return entity.name === \"zombie\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return zombie;\n  });\n  if (!zombie) {\n    bot.chat(\"Could not find a zombie.\");\n    return;\n  }\n\n  // Kill the zombie using the iron sword\n  await killMob(bot, \"zombie\", 300);\n  bot.chat(\"Killed a zombie.\");\n\n  // Collect the dropped items\n  await bot.pathfinder.goto(new GoalBlock(zombie.position.x, zombie.position.y, zombie.position.z));\n  bot.chat(\"Collected dropped items.\");\n}", "description": "async function killOneZombie(bot) {\n    // The function is about killing a single zombie using an iron sword. First, equip the iron sword in the hand. Then, explore the environment until finding the nearest zombie within 32 blocks. Once a zombie is found, kill it using the iron sword and collect the dropped items.\n}"}, "craftIronLeggingsAndBoots": {"code": "async function craftIronLeggingsAndBoots(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  if (ironIngotsCount < 11) {\n    await mineBlock(bot, \"iron_ore\", 11 - ironIngotsCount);\n    bot.chat(\"Collected iron ores.\");\n    await smeltItem(bot, \"iron_ore\", \"coal\", 11 - ironIngotsCount);\n    bot.chat(\"Smelted iron ores into iron ingots.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft iron leggings using the crafting table\n  await craftItem(bot, \"iron_leggings\", 1);\n  bot.chat(\"Crafted iron leggings.\");\n\n  // Craft iron boots using the crafting table\n  await craftItem(bot, \"iron_boots\", 1);\n  bot.chat(\"Crafted iron boots.\");\n}", "description": "async function craftIronLeggingsAndBoots(bot) {\n    // The function crafts iron leggings and boots using a crafting table. If there are not enough iron ingots in the inventory, the bot mines iron ores and smelts them into iron ingots. Then, the bot places a crafting table near itself and crafts iron leggings and boots using the crafting table.\n}"}, "equipIronArmor": {"code": "async function equipIronArmor(bot) {\n  // Find the iron_leggings, iron_boots, and iron_helmet in the inventory\n  const ironLeggings = bot.inventory.findInventoryItem(mcData.itemsByName.iron_leggings.id);\n  const ironBoots = bot.inventory.findInventoryItem(mcData.itemsByName.iron_boots.id);\n  const ironHelmet = bot.inventory.findInventoryItem(mcData.itemsByName.iron_helmet.id);\n\n  // Equip the iron_leggings, iron_boots, and iron_helmet in the appropriate slots (legs, feet, and head)\n  if (ironLeggings) {\n    await bot.equip(ironLeggings, \"legs\");\n    bot.chat(\"Equipped iron leggings.\");\n  } else {\n    bot.chat(\"Iron leggings not found in inventory.\");\n  }\n  if (ironBoots) {\n    await bot.equip(ironBoots, \"feet\");\n    bot.chat(\"Equipped iron boots.\");\n  } else {\n    bot.chat(\"Iron boots not found in inventory.\");\n  }\n  if (ironHelmet) {\n    await bot.equip(ironHelmet, \"head\");\n    bot.chat(\"Equipped iron helmet.\");\n  } else {\n    bot.chat(\"Iron helmet not found in inventory.\");\n  }\n}", "description": "async function equipIronArmor(bot) {\n    // The function is about equipping iron armor (leggings, boots, and helmet) in the appropriate slots (legs, feet, and head) if they are available in the inventory. If any of the items are not found in the inventory, the function will output a message indicating that the item is not available.\n}"}, "craftShieldImproved": {"code": "async function craftShieldImproved(bot) {\n  // Check if there are enough oak planks in the inventory\n  let oakPlanksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n\n  // If not, check if there are enough oak logs in the inventory\n  if (oakPlanksCount < 6) {\n    let oakLogsCount = bot.inventory.count(mcData.itemsByName.oak_log.id);\n    const planksToCraft = Math.ceil((6 - oakPlanksCount) / 4);\n\n    // If not, explore to find and mine oak logs\n    if (oakLogsCount < planksToCraft) {\n      await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const oak_log = bot.findBlock({\n          matching: mcData.blocksByName[\"oak_log\"].id,\n          maxDistance: 32\n        });\n        return oak_log;\n      });\n      await mineBlock(bot, \"oak_log\", planksToCraft - oakLogsCount);\n      bot.chat(\"Collected oak logs.\");\n    }\n\n    // Craft oak planks from oak logs\n    await craftItem(bot, \"oak_planks\", planksToCraft);\n    bot.chat(\"Crafted oak planks.\");\n    oakPlanksCount = bot.inventory.count(mcData.itemsByName.oak_planks.id);\n  }\n\n  // Check if there are enough iron ingots in the inventory\n  let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n\n  // If not, explore to find and mine iron ores\n  if (ironIngotsCount < 1) {\n    await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n      const iron_ore = bot.findBlock({\n        matching: mcData.blocksByName[\"iron_ore\"].id,\n        maxDistance: 32\n      });\n      return iron_ore;\n    });\n    await mineBlock(bot, \"iron_ore\", 1);\n    bot.chat(\"Collected iron ores.\");\n\n    // Smelt iron ores into iron ingots\n    await smeltItem(bot, \"iron_ore\", \"coal\", 1);\n    bot.chat(\"Smelted iron ores into iron ingots.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a shield using the crafting table\n  await craftItem(bot, \"shield\", 1);\n  bot.chat(\"Crafted a shield.\");\n}", "description": "async function craftShieldImproved(bot) {\n    // The function crafts a shield using oak planks and iron ingots. It checks if there are enough oak planks and iron ingots in the inventory, and if not, it explores the environment to find and collect the required materials. It then places a crafting table near the bot and crafts a shield using the crafting table.\n}"}, "craftBucket": {"code": "async function craftBucket(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  if (ironIngotsCount < 3) {\n    await mineBlock(bot, \"iron_ore\", 3 - ironIngotsCount);\n    bot.chat(\"Collected iron ores.\");\n    await smeltItem(bot, \"iron_ore\", \"coal\", 3 - ironIngotsCount);\n    bot.chat(\"Smelted iron ores into iron ingots.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a bucket using the crafting table\n  await craftItem(bot, \"bucket\", 1);\n  bot.chat(\"Crafted a bucket.\");\n}", "description": "async function craftBucket(bot) {\n    // The function crafts a bucket using a crafting table. It first checks if there are enough iron ingots in the inventory, and if not, it mines iron ores and smelts them into iron ingots. Then, it places a crafting table near the bot and crafts a bucket using the crafting table.\n}"}, "fillBucketWithWater": {"code": "async function fillBucketWithWater(bot) {\n  // Find a water block nearby\n  const waterBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const water = bot.findBlock({\n      matching: mcData.blocksByName.water.id,\n      maxDistance: 32,\n    });\n    return water;\n  });\n  if (!waterBlock) {\n    bot.chat(\"Could not find water.\");\n    return;\n  }\n\n  const adjacentBlock = waterBlock.position.offset(0, 1, 0);\n  // Go to the water block\n  await bot.pathfinder.goto(\n    new GoalGetToBlock(adjacentBlock.x, adjacentBlock.y, adjacentBlock.z)\n  );\n\n  // Equip the bucket\n  const bucket = bot.inventory.findInventoryItem(mcData.itemsByName.bucket.id);\n  await bot.equip(bucket, \"hand\");\n\n  // Look at the water block\n  await bot.lookAt(waterBlock.position);\n\n  // Activate the bucket to collect water\n  await bot.activateItem();\n  bot.chat(\"Filled the bucket with water.\");\n}\n", "description": "async function fillBucketWithWater(bot) {\n    // This function fills a bucket with water by first finding a nearby water block. After locating the water block, the bot moves to it and equips the bucket in its hand. The bot then looks at the water block and activates the bucket to collect water.\n}"}, "craftIronShovel": {"code": "async function craftIronShovel(bot) {\n  // Check if there are enough iron ingots and sticks in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n  // If not enough iron ingots or sticks, collect the required items\n  if (ironIngotsCount < 1) {\n    await mineBlock(bot, \"iron_ore\", 1);\n    bot.chat(\"Collected iron ore.\");\n    await smeltItem(bot, \"iron_ore\", \"coal\", 1);\n    bot.chat(\"Smelted iron ore into iron ingot.\");\n  }\n  if (sticksCount < 2) {\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Crafted sticks.\");\n  }\n\n  // Find a suitable position to place the crafting table\n  const suitablePosition = bot.entity.position.offset(1, 0, 0);\n  const block = bot.blockAt(suitablePosition);\n  if (block.name === \"grass_block\" || block.name === \"dirt\") {\n    await bot.dig(block);\n  }\n\n  // Place the crafting table at the suitable position\n  await placeItem(bot, \"crafting_table\", suitablePosition);\n\n  // Craft an iron shovel using the crafting table\n  await craftItem(bot, \"iron_shovel\", 1);\n  bot.chat(\"Crafted an iron shovel.\");\n}", "description": "async function craftIronShovel(bot) {\n    // The function crafts an iron shovel using a crafting table. It checks if there are enough iron ingots and sticks in the inventory, and if not, collects the required items. It finds a suitable position to place the crafting table and places it there. Then, it crafts an iron shovel using the crafting table.\n}"}, "obtainOneMoreAcaciaLog": {"code": "async function obtainOneMoreAcaciaLog(bot) {\n  // Check the initial inventory for acacia logs\n  const initialAcaciaLogs = bot.inventory.count(mcData.itemsByName.acacia_log.id);\n\n  // If the number of acacia logs is less than 5, find and mine one more acacia log\n  if (initialAcaciaLogs < 5) {\n    const acaciaLog = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      return bot.findBlock({\n        matching: block => block.name === \"acacia_log\",\n        maxDistance: 32\n      });\n    });\n    if (!acaciaLog) {\n      bot.chat(\"Could not find an acacia log.\");\n      return;\n    }\n    await mineBlock(bot, \"acacia_log\", 1);\n    bot.chat(\"1 more acacia log obtained.\");\n  }\n\n  // Check the final number of acacia logs in the inventory\n  const finalAcaciaLogs = bot.inventory.count(mcData.itemsByName.acacia_log.id);\n  if (finalAcaciaLogs >= 5) {\n    bot.chat(\"Successfully obtained 5 acacia logs.\");\n  } else {\n    bot.chat(\"Failed to obtain 5 acacia logs.\");\n  }\n}", "description": "async function obtainOneMoreAcaciaLog(bot) {\n    // The function checks if there are less than 5 acacia logs in the inventory, and if so, finds and mines one more acacia log. If the bot successfully obtains 5 acacia logs, it sends a success message, otherwise it sends a failure message.\n}"}, "craftAcaciaPlanksAndSticks": {"code": "async function craftAcaciaPlanksAndSticks(bot) {\n  // Check if there are enough acacia logs in the inventory\n  const acaciaLogsCount = bot.inventory.count(mcData.itemsByName.acacia_log.id);\n\n  // If not, mine more acacia logs\n  if (acaciaLogsCount < 5) {\n    await mineBlock(bot, \"acacia_log\", 5 - acaciaLogsCount);\n    bot.chat(\"Mined acacia logs.\");\n  }\n\n  // Craft 20 acacia planks from acacia logs\n  await craftItem(bot, \"acacia_planks\", 5);\n  bot.chat(\"Crafted 20 acacia planks.\");\n\n  // Check if there are enough acacia planks in the inventory to craft 10 sticks\n  const acaciaPlanksCount = bot.inventory.count(mcData.itemsByName.acacia_planks.id);\n\n  // If not, mine more acacia logs and craft more acacia planks\n  if (acaciaPlanksCount < 5) {\n    await mineBlock(bot, \"acacia_log\", 5 - acaciaLogsCount);\n    bot.chat(\"Mined more acacia logs.\");\n    await craftItem(bot, \"acacia_planks\", 5 - acaciaPlanksCount);\n    bot.chat(\"Crafted more acacia planks.\");\n  }\n\n  // Craft 10 sticks from acacia planks\n  await craftItem(bot, \"stick\", 3);\n  bot.chat(\"Crafted 10 sticks.\");\n}", "description": "async function craftAcaciaPlanksAndSticks(bot) {\n    // The function is about crafting 20 acacia planks and 10 sticks. It checks if there are enough acacia logs in the inventory, and if not, it mines more acacia logs. Then it crafts 20 acacia planks from the acacia logs. If there are not enough acacia planks in the inventory to craft 10 sticks, it mines more acacia logs and crafts more acacia planks. Finally, it crafts 10 sticks from the acacia planks.\n}"}, "eatTwoCookedMutton": {"code": "async function eatTwoCookedMutton(bot) {\n  // Check if there are 2 cooked mutton in the inventory\n  const cookedMutton = bot.inventory.findInventoryItem(mcData.itemsByName.cooked_mutton.id);\n  if (!cookedMutton || cookedMutton.count < 2) {\n    bot.chat(\"Not enough cooked mutton in the inventory.\");\n    return;\n  }\n\n  // Equip the cooked mutton in the bot's hand\n  await bot.equip(cookedMutton, \"hand\");\n\n  // Consume the cooked mutton twice\n  await bot.consume();\n  await bot.consume();\n\n  // Send a chat message to indicate the task is completed\n  bot.chat(\"Ate 2 cooked mutton.\");\n}", "description": "async function eatTwoCookedMutton(bot) {\n    // The function is about eating two cooked muttons. It checks if there are at least 2 cooked muttons in the inventory, and if not, it returns. If there are 2 or more cooked muttons, it equips one in the bot's hand and consumes it twice. Finally, it sends a chat message to indicate that the task is completed.\n}"}, "collectBamboo": {"code": "async function collectBamboo(bot) {\n  // Equip the iron sword\n  const ironSword = bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id);\n  await bot.equip(ironSword, \"hand\");\n\n  // Find bamboo plants using the exploreUntil function\n  const bambooPlants = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const bambooPlants = bot.findBlocks({\n      matching: block => block.name === \"bamboo\",\n      maxDistance: 32,\n      count: 10\n    });\n    return bambooPlants.length >= 10 ? bambooPlants : null;\n  });\n  if (!bambooPlants) {\n    bot.chat(\"Could not find enough bamboo plants.\");\n    return;\n  }\n\n  // Break 10 bamboo plants using the iron sword\n  for (const bambooPlant of bambooPlants) {\n    const block = bot.blockAt(bambooPlant);\n    await bot.dig(block);\n  }\n  bot.chat(\"Broke 10 bamboo plants.\");\n\n  // Collect the dropped bamboo items\n  for (const bambooPlant of bambooPlants) {\n    await bot.pathfinder.goto(new GoalBlock(bambooPlant.x, bambooPlant.y, bambooPlant.z));\n  }\n  bot.chat(\"Collected 10 bamboo.\");\n}", "description": "async function collectBamboo(bot) {\n    // The function is about collecting 10 bamboo plants. It equips the iron sword and uses the `exploreUntil` function to find 10 bamboo plants within a certain distance. If enough bamboo plants are found, it breaks them using the iron sword and collects the dropped bamboo items by moving to their location. If not enough bamboo plants are found, it returns an error message.\n}"}, "craftScaffolding": {"code": "async function craftScaffolding(bot) {\n  // Check if we have a crafting table in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftItem(bot, \"crafting_table\", 1);\n    bot.chat(\"Crafted a crafting table.\");\n  }\n\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft 10 scaffolding using the crafting table\n  await craftItem(bot, \"scaffolding\", 1);\n  bot.chat(\"Crafted 10 scaffolding.\");\n}", "description": "async function craftScaffolding(bot) {\n    // The function is about crafting 10 scaffolding using a crafting table. First, it checks if there is a crafting table in the inventory. If not, it crafts one. Then, it places the crafting table near the bot. After that, it crafts 10 scaffolding using the crafting table and saves the event.\n}"}, "collectFiveCactusBlocks": {"code": "async function collectFiveCactusBlocks(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find 5 cactus blocks using the exploreUntil function\n  const cactusBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const cactusBlocks = bot.findBlocks({\n      matching: block => block.name === \"cactus\",\n      maxDistance: 32,\n      count: 5\n    });\n    return cactusBlocks.length >= 5 ? cactusBlocks : null;\n  });\n  if (!cactusBlocks) {\n    bot.chat(\"Could not find enough cactus blocks.\");\n    return;\n  }\n\n  // Mine the 5 cactus blocks using the mineBlock function\n  await mineBlock(bot, \"cactus\", 5);\n  bot.chat(\"5 cactus blocks mined.\");\n\n  // Collect the dropped cactus items\n  for (const cactusBlock of cactusBlocks) {\n    await bot.pathfinder.goto(new GoalBlock(cactusBlock.x, cactusBlock.y, cactusBlock.z));\n  }\n  bot.chat(\"Collected 5 cactus blocks.\");\n}", "description": "async function collectFiveCactusBlocks(bot) {\n    // The function is about collecting 5 cactus blocks using an iron pickaxe. First, equip the iron pickaxe in the hand. Next, explore the environment until finding 5 cactus blocks using the `exploreUntil` function. If 5 cactus blocks are not found, return. Otherwise, mine the 5 cactus blocks using the `mineBlock` function. Finally, collect the dropped cactus items by moving to each block's location.\n}"}, "smeltCactusIntoGreenDye": {"code": "async function smeltCactusIntoGreenDye(bot) {\n  // Check if there is a furnace in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n\n  // If not, craft a furnace using the available cobblestone\n  if (!furnaceItem) {\n    await craftFurnace(bot);\n  }\n\n  // Find a suitable position to place the furnace\n  const furnacePosition = await findSuitablePosition(bot);\n  if (!furnacePosition) {\n    bot.chat(\"Could not find a suitable position to place the furnace.\");\n    return;\n  }\n\n  // Place the furnace at the suitable position\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt 5 cactus using the available coal as fuel\n  await smeltItem(bot, \"cactus\", \"coal\", 5);\n  bot.chat(\"5 cactus smelted into green dye.\");\n}", "description": "async function smeltCactusIntoGreenDye(bot) {\n    // The function is about smelting 5 cactus into green dye using a furnace and coal as fuel. It checks if there is a furnace in the inventory, and if not, it crafts one. Then it finds a suitable position to place the furnace and places it there. Finally, it smelts the cactus using coal as fuel and saves the event of smelting 5 cactus into green dye.\n}"}, "craftShears": {"code": "async function craftShears(bot) {\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a pair of shears using the crafting table\n  await craftItem(bot, \"shears\", 1);\n  bot.chat(\"Crafted a pair of shears.\");\n}", "description": "async function craftShears(bot) {\n    // The function is about crafting a pair of shears. First, place a crafting table near the bot. Then, craft a pair of shears using the crafting table. Finally, the bot will chat that it has crafted a pair of shears.\n}"}, "catchFiveFishSafely": {"code": "async function catchFiveFishSafely(bot) {\n  // Check if the bot has a fishing rod in its inventory\n  let fishingRod = bot.inventory.findInventoryItem(mcData.itemsByName.fishing_rod.id);\n  if (!fishingRod) {\n    await craftFishingRod(bot);\n    fishingRod = bot.inventory.findInventoryItem(mcData.itemsByName.fishing_rod.id);\n  }\n\n  // Find a nearby water block\n  let waterBlock;\n  while (!waterBlock) {\n    waterBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundWaterBlock = bot.findBlock({\n        matching: mcData.blocksByName.water.id,\n        maxDistance: 32\n      });\n      return foundWaterBlock;\n    });\n    if (!waterBlock) {\n      bot.chat(\"No path to the water block. Trying to find another water block...\");\n    }\n  }\n\n  // Move to a block adjacent to the water block\n  const adjacentBlock = waterBlock.position.offset(0, 1, 0);\n  await bot.pathfinder.goto(new GoalBlock(adjacentBlock.x, adjacentBlock.y, adjacentBlock.z));\n\n  // Look at the water block\n  await bot.lookAt(waterBlock.position);\n\n  // Equip the fishing rod\n  await bot.equip(fishingRod, \"hand\");\n\n  // Fish in the water 5 times\n  for (let i = 0; i < 5; i++) {\n    try {\n      await bot.fish();\n      bot.chat(`Fish ${i + 1} caught.`);\n    } catch (error) {\n      if (error.message === \"Fishing cancelled\") {\n        bot.chat(\"Fishing was cancelled. Trying again...\");\n        i--; // Retry the same iteration\n      } else {\n        throw error;\n      }\n    }\n  }\n}", "description": "async function catchFiveFishSafely(bot) {\n    // async function catchFiveFishSafely(bot) {\n    // The function is about catching five fish safely using a fishing rod. First, it checks if the bot has a fishing rod in its inventory. If not, it crafts one. Then, it finds a nearby water block and moves to a block adjacent to it. After looking at the water block, it equips the fishing rod and fishes in the water five times. If fishing is cancelled, it retries the same iteration.\n}\n}"}, "catchThreeFish": {"code": "async function catchThreeFish(bot) {\n  // Check if the bot has a fishing rod in its inventory\n  let fishingRod = bot.inventory.findInventoryItem(mcData.itemsByName.fishing_rod.id);\n  if (!fishingRod) {\n    await craftFishingRod(bot);\n    fishingRod = bot.inventory.findInventoryItem(mcData.itemsByName.fishing_rod.id);\n  }\n\n  // Find a nearby water block\n  let waterBlock;\n  while (!waterBlock) {\n    waterBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundWaterBlock = bot.findBlock({\n        matching: mcData.blocksByName.water.id,\n        maxDistance: 32\n      });\n      return foundWaterBlock;\n    });\n    if (!waterBlock) {\n      bot.chat(\"No path to the water block. Trying to find another water block...\");\n    }\n  }\n\n  // Move to a block adjacent to the water block\n  const adjacentBlock = waterBlock.position.offset(0, 1, 0);\n  await bot.pathfinder.goto(new GoalBlock(adjacentBlock.x, adjacentBlock.y, adjacentBlock.z));\n\n  // Look at the water block\n  await bot.lookAt(waterBlock.position);\n\n  // Equip the fishing rod\n  await bot.equip(fishingRod, \"hand\");\n\n  // Fish in the water 3 times\n  for (let i = 0; i < 3; i++) {\n    try {\n      await bot.fish();\n      bot.chat(`Fish ${i + 1} caught.`);\n    } catch (error) {\n      if (error.message === \"Fishing cancelled\") {\n        bot.chat(\"Fishing was cancelled. Trying again...\");\n        i--; // Retry the same iteration\n      } else {\n        throw error;\n      }\n    }\n  }\n}", "description": "async function catchThreeFish(bot) {\n    // async function catchThreeFish(bot) {\n    // The function is about catching three fish using a fishing rod. First, it checks if the bot has a fishing rod in its inventory. If not, it crafts one. Then, it finds a nearby water block and moves to a block adjacent to it. After looking at the water block, it equips the fishing rod and fishes in the water three times. If fishing is cancelled, it retries the same iteration.\n}\n}"}, "checkStonePickaxe": {"code": "async function checkStonePickaxe(bot) {\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  if (stonePickaxe) {\n    bot.chat(\"The bot already has a stone pickaxe in its inventory.\");\n  } else {\n    bot.chat(\"The bot does not have a stone pickaxe in its inventory.\");\n  }\n}", "description": "async function checkStonePickaxe(bot) {\n    // async function checkStonePickaxe(bot) {\n    // The function checks if the bot has a stone pickaxe in its inventory and sends a chat message indicating whether it has one or not.\n}\n}"}, "chopDownSpruceLogs": {"code": "async function chopDownSpruceLogs(bot) {\n  const spruceLogCount = bot.inventory.count(mcData.itemsByName.spruce_log.id);\n  const logsToMine = 5 - spruceLogCount;\n  if (logsToMine > 0) {\n    bot.chat(\"Chopping down spruce logs...\");\n    await mineBlock(bot, \"spruce_log\", logsToMine);\n    bot.chat(\"Chopped down 5 spruce logs.\");\n  } else {\n    bot.chat(\"Already have 5 spruce logs in inventory.\");\n  }\n}", "description": "async function chopDownSpruceLogs(bot) {\n    // async function chopDownSpruceLogs(bot) {\n    // The function is about chopping down spruce logs until there are 5 in the inventory. It first checks how many spruce logs are in the inventory and calculates how many more need to be mined. If there are less than 5, it mines the remaining logs and saves the event. If there are already 5 logs in the inventory, it does nothing.\n}\n}"}, "chopDownSpruceLogsV2": {"code": "async function chopDownSpruceLogs(bot) {\n  const spruceLogCount = bot.inventory.count(mcData.itemsByName.spruce_log.id);\n  const logsToMine = 5 - spruceLogCount;\n  if (logsToMine > 0) {\n    bot.chat(\"Chopping down spruce logs...\");\n    await mineBlock(bot, \"spruce_log\", logsToMine);\n    bot.chat(\"Chopped down 5 spruce logs.\");\n  } else {\n    bot.chat(\"Already have 5 spruce logs in inventory.\");\n  }\n}", "description": "async function chopDownSpruceLogsV2(bot) {\n    // async function chopDownSpruceLogs(bot) {\n    // The function is about chopping down spruce logs until there are 5 in the inventory. It first checks how many spruce logs are in the inventory and calculates how many more need to be mined. If there are less than 5, it mines the remaining amount and saves the event. If there are already 5 spruce logs in the inventory, it does nothing.\n}\n}"}, "chopSpruceLogs": {"code": "async function chopSpruceLogs(bot) {\n  const spruceLogCount = bot.inventory.count(mcData.itemsByName.spruce_log.id);\n  const logsToMine = 3 - spruceLogCount;\n  if (logsToMine > 0) {\n    bot.chat(\"Chopping down spruce logs...\");\n    await mineBlock(bot, \"spruce_log\", logsToMine);\n    bot.chat(\"Chopped down 3 spruce logs.\");\n  } else {\n    bot.chat(\"Already have 3 spruce logs in inventory.\");\n  }\n}", "description": "async function chopSpruceLogs(bot) {\n    // async function chopSpruceLogs(bot) {\n    // The function is about chopping down spruce logs until there are 3 in the inventory. It first checks how many spruce logs are in the inventory and calculates how many more need to be mined. If there are less than 3, it mines the remaining logs and saves them in the inventory. If there are already 3 logs in the inventory, it does nothing.\n}\n}"}, "collectWaterWithBucket": {"code": "async function collectWaterWithBucket(bot) {\n  const waterBlock = bot.findBlock({\n    matching: mcData.blocksByName.water.id,\n    maxDistance: 32\n  });\n  if (!waterBlock) {\n    bot.chat(\"No water block found nearby. Exploring...\");\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundWaterBlock = bot.findBlock({\n        matching: mcData.blocksByName.water.id,\n        maxDistance: 32\n      });\n      return foundWaterBlock;\n    });\n  }\n  const bucket = bot.inventory.findInventoryItem(mcData.itemsByName.bucket.id);\n  await bot.equip(bucket, \"hand\");\n  await bot.lookAt(waterBlock.position);\n  await bot.activateItem();\n  bot.chat(\"Water collected with bucket.\");\n}", "description": "async function collectWaterWithBucket(bot) {\n    // async function collectWaterWithBucket(bot) {\n    // The function is about collecting water with a bucket. It first searches for a water block within a certain distance. If no water block is found, it explores the environment until it finds one. Once a water block is found, it equips the bucket in the hand, looks at the water block, and activates the item to collect water. Finally, it sends a chat message indicating that water has been collected.\n}\n}"}, "cookMutton": {"code": "async function cookMutton(bot) {\n  const rawMuttonCount = bot.inventory.count(mcData.itemsByName.mutton.id);\n  if (rawMuttonCount < 5) {\n    bot.chat(\"Not enough raw mutton to cook. Please collect more first.\");\n    return;\n  }\n  const furnaceInInventory = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  if (!furnaceInInventory) {\n    bot.chat(\"No furnace found in inventory. Please craft one first.\");\n    return;\n  }\n  let furnacePosition = bot.entity.position.offset(1, 0, 0);\n  const blockAtFurnacePosition = bot.blockAt(furnacePosition);\n  if (blockAtFurnacePosition.name === \"coal_ore\") {\n    furnacePosition = bot.entity.position.offset(-1, 0, 0);\n  }\n  await placeItem(bot, \"furnace\", furnacePosition);\n  bot.chat(\"Furnace placed.\");\n  const requiredCoal = 5;\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  if (coalCount < requiredCoal) {\n    bot.chat(\"Not enough coal. Mining more coal...\");\n    await mineBlock(bot, \"coal_ore\", requiredCoal - coalCount);\n  }\n  await smeltItem(bot, \"mutton\", \"coal\", 5);\n  bot.chat(\"5 mutton cooked.\");\n}", "description": "async function cookMutton(bot) {\n    // async function cookMutton(bot) {\n    // The function is about cooking 5 raw muttons using a furnace and coal. It first checks if there are at least 5 raw muttons in the inventory, and if not, it returns a message to collect more. Then it checks if there is a furnace in the inventory, and if not, it returns a message to craft one. It places the furnace next to the player and checks if there is enough coal in the inventory. If not, it mines coal until there are 5 pieces. Finally, it smelts 5 raw muttons using coal and returns a message that 5 muttons have been cooked.\n}\n}"}, "craftEightSticks": {"code": "async function craftEightSticks(bot) {\n  const requiredPlanks = 2;\n  const planksCount = bot.inventory.count(mcData.itemsByName.spruce_planks.id);\n  if (planksCount < requiredPlanks) {\n    bot.chat(\"Not enough spruce_planks. Mining a spruce_log and crafting more...\");\n    await mineBlock(bot, \"spruce_log\", 1);\n    await craftItem(bot, \"spruce_planks\", 1);\n    bot.chat(\"Spruce_planks crafted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"stick\", 2);\n  bot.chat(\"8 sticks crafted.\");\n}", "description": "async function craftEightSticks(bot) {\n    // async function craftEightSticks(bot) {\n    // The function crafts 8 sticks using spruce planks. If there are not enough spruce planks, it mines a spruce log and crafts more planks. If there is no crafting table nearby, it places one. Finally, it crafts 2 sticks and repeats the process until 8 sticks are crafted.\n}\n}"}, "craftEightTorches": {"code": "async function craftEightTorches(bot) {\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"torch\", 1);\n  bot.chat(\"8 torches crafted.\");\n}", "description": "async function craftEightTorches(bot) {\n    // async function craftEightTorches(bot) {\n    // The function is about crafting 8 torches. First, it checks if there is a crafting table nearby. If not, it places one. Then, it crafts 1 torch and saves it to the inventory. Finally, it outputs a message indicating that 8 torches have been crafted.\n}\n}"}, "craftFishingRod": {"code": "async function craftFishingRod(bot) {\n  // Check if we have enough strings\n  const requiredStrings = 2;\n  const stringsCount = bot.inventory.count(mcData.itemsByName.string.id);\n  if (stringsCount < requiredStrings) {\n    // Find and kill spiders to obtain strings\n    while (bot.inventory.count(mcData.itemsByName.string.id) < requiredStrings) {\n      bot.chat(\"Finding a spider to obtain strings...\");\n      const spider = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const spider = bot.nearestEntity(entity => {\n          return entity.name === \"spider\" && entity.position.distanceTo(bot.entity.position) < 32;\n        });\n        return spider;\n      });\n      if (spider) {\n        bot.chat(\"Spider found. Killing it...\");\n        await killMob(bot, \"spider\", 300);\n        bot.chat(\"Spider killed.\");\n      } else {\n        bot.chat(\"Could not find a spider. Trying again...\");\n      }\n    }\n  }\n\n  // Place a crafting table if not already placed\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n\n  // Craft a fishing rod using the 3 sticks and 2 strings\n  await craftItem(bot, \"fishing_rod\", 1);\n  bot.chat(\"Fishing rod crafted.\");\n}", "description": "async function craftFishingRod(bot) {\n    // async function craftFishingRod(bot) {\n    // The function crafts a fishing rod using 2 strings and 3 sticks. If there are not enough strings, the bot will find and kill spiders to obtain them. If a crafting table is not already placed, the bot will place one. Finally, the bot will craft a fishing rod and output a message.\n}\n}"}, "craftIronPickaxeWithMaterials": {"code": "async function craftIronPickaxeWithMaterials(bot) {\n  const requiredIronIngots = 3;\n  const requiredSticks = 2;\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (ironIngotsCount < requiredIronIngots) {\n    bot.chat(\"Not enough iron ingots. Mining iron ores...\");\n    await mineBlock(bot, \"iron_ore\", requiredIronIngots - ironIngotsCount);\n    bot.chat(\"Iron ores mined. Smelting iron ingots...\");\n    await smeltItem(bot, \"iron_ore\", \"coal\", requiredIronIngots - ironIngotsCount);\n    bot.chat(\"Iron ingots smelted.\");\n  }\n  if (sticksCount < requiredSticks) {\n    bot.chat(\"Not enough sticks. Crafting more...\");\n    await craftItem(bot, \"stick\", requiredSticks - sticksCount);\n    bot.chat(\"Sticks crafted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"iron_pickaxe\", 1);\n  bot.chat(\"Iron pickaxe crafted.\");\n}", "description": "async function craftIronPickaxeWithMaterials(bot) {\n    // async function craftIronPickaxeWithMaterials(bot) {\n    // The function crafts an iron pickaxe using 3 iron ingots and 2 sticks. If there are not enough iron ingots, it mines iron ores and smelts them into ingots. If there are not enough sticks, it crafts them. If there is no crafting table nearby, it places one. Finally, it crafts an iron pickaxe and logs the result.\n}\n}"}, "craftShieldWithFurnace": {"code": "async function craftShieldWithFurnace(bot) {\n  const requiredIronIngots = 1;\n  const requiredSprucePlanks = 6;\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sprucePlanksCount = bot.inventory.count(mcData.itemsByName.spruce_planks.id);\n  if (ironIngotsCount < requiredIronIngots) {\n    bot.chat(\"Not enough iron ingots. Smelting iron ingots...\");\n    const furnace = bot.findBlock({\n      matching: mcData.blocksByName.furnace.id,\n      maxDistance: 32\n    });\n    if (!furnace) {\n      const furnacePosition = bot.entity.position.offset(1, 0, 0);\n      await placeItem(bot, \"furnace\", furnacePosition);\n      bot.chat(\"Furnace placed.\");\n    }\n    await smeltItem(bot, \"raw_iron\", \"coal\", requiredIronIngots - ironIngotsCount);\n    bot.chat(\"Iron ingots smelted.\");\n  }\n  if (sprucePlanksCount < requiredSprucePlanks) {\n    bot.chat(\"Not enough spruce planks. Crafting more...\");\n    await craftItem(bot, \"spruce_planks\", requiredSprucePlanks - sprucePlanksCount);\n    bot.chat(\"Spruce planks crafted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"shield\", 1);\n  bot.chat(\"Shield crafted.\");\n}", "description": "async function craftShieldWithFurnace(bot) {\n    // async function craftShieldWithFurnace(bot) {\n    // The function crafts a shield using a furnace and a crafting table. It checks if there are enough iron ingots and spruce planks in the inventory, and if not, it smelts iron ingots and crafts spruce planks. If a furnace or a crafting table is not nearby, it places one. Finally, it crafts a shield using the crafting table and logs a message.\n}\n}"}, "craftSixteenTorches": {"code": "async function craftSixteenTorches(bot) {\n  const requiredSticks = 4;\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (sticksCount < requiredSticks) {\n    bot.chat(\"Not enough sticks. Crafting more...\");\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Sticks crafted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"torch\", 2);\n  bot.chat(\"16 torches crafted.\");\n}", "description": "async function craftSixteenTorches(bot) {\n    // async function craftSixteenTorches(bot) {\n    // The function crafts 16 torches using sticks and a crafting table. It checks if there are enough sticks in the inventory, and if not, crafts more. If there is no crafting table nearby, it places one. Finally, it crafts 16 torches and saves the event.\n}\n}"}, "craftSpyglass": {"code": "async function craftSpyglass(bot) {\n  const requiredCopperIngots = 2;\n  const requiredAmethystShards = 1;\n  const copperIngotsCount = bot.inventory.count(mcData.itemsByName.copper_ingot.id);\n  const amethystShardsCount = bot.inventory.count(mcData.itemsByName.amethyst_shard.id);\n  if (copperIngotsCount < requiredCopperIngots || amethystShardsCount < requiredAmethystShards) {\n    bot.chat(\"Not enough copper ingots or amethyst shards to craft a spyglass.\");\n    return;\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"spyglass\", 1);\n  bot.chat(\"Spyglass crafted.\");\n}", "description": "async function craftSpyglass(bot) {\n    // async function craftSpyglass(bot) {\n    // The function crafts a spyglass using 2 copper ingots and 1 amethyst shard. It checks if there are enough materials in the inventory, and if not, it returns. If there is a crafting table nearby, it crafts the spyglass. If not, it places a crafting table and then crafts the spyglass. Finally, it sends a chat message indicating that the spyglass has been crafted.\n}\n}"}, "craftSticks": {"code": "async function craftSticks(bot) {\n  const requiredPlanks = 2;\n  const planksCount = bot.inventory.count(mcData.itemsByName.spruce_planks.id);\n  if (planksCount < requiredPlanks) {\n    bot.chat(\"Not enough spruce_planks. Mining a spruce_log and crafting more...\");\n    await mineBlock(bot, \"spruce_log\", 1);\n    await craftItem(bot, \"spruce_planks\", 1);\n    bot.chat(\"Spruce_planks crafted.\");\n  }\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  bot.chat(\"Crafting_table placed.\");\n  await craftItem(bot, \"stick\", 1);\n  bot.chat(\"4 sticks crafted.\");\n}", "description": "async function craftSticks(bot) {\n    // async function craftSticks(bot) {\n    // The function crafts 4 sticks using a crafting table. If there are not enough spruce planks, it mines a spruce log and crafts the planks. Then, it places a crafting table next to the bot and crafts 4 sticks.\n}\n}"}, "craftStoneAxe": {"code": "async function craftStoneAxe(bot) {\n  const requiredCobblestones = 3;\n  const requiredSticks = 2;\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (cobblestoneCount < requiredCobblestones) {\n    bot.chat(\"Not enough cobblestones. Mining more...\");\n    await mineBlock(bot, \"stone\", requiredCobblestones - cobblestoneCount);\n    bot.chat(\"Cobblestones mined.\");\n  }\n  if (sticksCount < requiredSticks) {\n    bot.chat(\"Not enough sticks. Crafting more...\");\n    await craftItem(bot, \"stick\", requiredSticks - sticksCount);\n    bot.chat(\"Sticks crafted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"stone_axe\", 1);\n  bot.chat(\"Stone axe crafted.\");\n}", "description": "async function craftStoneAxe(bot) {\n    // async function craftStoneAxe(bot) {\n    // The function crafts a stone axe using cobblestones and sticks. It checks if there are enough cobblestones and sticks in the inventory, and if not, it mines cobblestones or crafts sticks. If there is no crafting table nearby, it places one. Finally, it crafts a stone axe and sends a chat message.\n}\n}"}, "craftStoneHoe": {"code": "async function craftStoneHoe(bot) {\n  const requiredCobblestones = 2;\n  const requiredSticks = 2;\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (cobblestoneCount < requiredCobblestones) {\n    bot.chat(\"Not enough cobblestones. Mining more...\");\n    await mineBlock(bot, \"stone\", requiredCobblestones - cobblestoneCount);\n    bot.chat(\"Cobblestones mined.\");\n  }\n  if (sticksCount < requiredSticks) {\n    bot.chat(\"Not enough sticks. Crafting more...\");\n    await craftItem(bot, \"stick\", requiredSticks - sticksCount);\n    bot.chat(\"Sticks crafted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"stone_hoe\", 1);\n  bot.chat(\"Stone hoe crafted.\");\n}", "description": "async function craftStoneHoe(bot) {\n    // async function craftStoneHoe(bot) {\n    // The function crafts a stone hoe using cobblestones and sticks. It checks if there are enough cobblestones and sticks in the inventory, and if not, it mines cobblestones or crafts sticks. If there is no crafting table nearby, it places one. Finally, it crafts a stone hoe and logs a message.\n}\n}"}, "craftStoneSword": {"code": "async function craftStoneSword(bot) {\n  const requiredCobblestones = 2;\n  const requiredSticks = 1;\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (cobblestoneCount < requiredCobblestones) {\n    bot.chat(\"Not enough cobblestones. Mining more...\");\n    await mineBlock(bot, \"stone\", requiredCobblestones - cobblestoneCount);\n    bot.chat(\"Cobblestones mined.\");\n  }\n  if (sticksCount < requiredSticks) {\n    bot.chat(\"Not enough sticks. Crafting more...\");\n    await craftSticks(bot);\n    bot.chat(\"Sticks crafted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"stone_sword\", 1);\n  bot.chat(\"Stone sword crafted.\");\n}", "description": "async function craftStoneSword(bot) {\n    // async function craftStoneSword(bot) {\n    // The function crafts a stone sword using cobblestones and sticks. It checks if there are enough cobblestones and sticks in the inventory, and if not, it mines cobblestones or crafts sticks. If there is no crafting table nearby, it places one. Finally, it crafts a stone sword and logs a message.\n}\n}"}, "craftTorches": {"code": "async function craftTorches(bot) {\n  const requiredCoal = 2;\n  const requiredSticks = 2;\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (coalCount < requiredCoal) {\n    bot.chat(\"Not enough coal. Mining more...\");\n    await mineBlock(bot, \"coal_ore\", requiredCoal - coalCount);\n    bot.chat(\"Coal mined.\");\n  }\n  if (sticksCount < requiredSticks) {\n    bot.chat(\"Not enough sticks. Crafting more...\");\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"Sticks crafted.\");\n  }\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n  await craftItem(bot, \"torch\", 1);\n  bot.chat(\"8 torches crafted.\");\n}", "description": "async function craftTorches(bot) {\n    // async function craftTorches(bot) {\n    // The function crafts 8 torches using coal and sticks. It checks if there is enough coal and sticks in the inventory, and if not, it mines coal or crafts sticks. If there is no crafting table nearby, it places one. Finally, it crafts 8 torches and saves the event.\n}\n}"}, "craftTwentySprucePlanks": {"code": "async function craftTwentySprucePlanks(bot) {\n  const requiredLogs = 5;\n  const spruceLogCount = bot.inventory.count(mcData.itemsByName.spruce_log.id);\n  const logsToMine = requiredLogs - spruceLogCount;\n  if (logsToMine > 0) {\n    bot.chat(\"Not enough spruce logs. Chopping down more...\");\n    await mineBlock(bot, \"spruce_log\", logsToMine);\n    bot.chat(\"Spruce logs chopped down.\");\n  }\n  bot.chat(\"Crafting 20 spruce planks...\");\n  await craftItem(bot, \"spruce_planks\", requiredLogs);\n  bot.chat(\"20 spruce planks crafted.\");\n}", "description": "async function craftTwentySprucePlanks(bot) {\n    // async function craftTwentySprucePlanks(bot) {\n    // The function crafts 20 spruce planks using spruce logs. If there are not enough spruce logs in the inventory, it will mine the required amount. Once enough logs are available, it will craft 20 spruce planks and save the event.\n}\n}"}, "craftWhiteBedWithExploration": {"code": "async function craftWhiteBedWithExploration(bot) {\n  // Step 1: Explore the area to find and kill sheep to collect the required wool blocks if needed\n  const requiredWool = 3;\n  const woolCount = bot.inventory.count(mcData.itemsByName.white_wool.id);\n  if (woolCount < requiredWool) {\n    bot.chat(\"Collecting wool from sheep...\");\n    for (let i = 0; i < requiredWool - woolCount; i++) {\n      const sheep = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const sheep = bot.nearestEntity(entity => {\n          return entity.name === \"sheep\" && entity.position.distanceTo(bot.entity.position) < 32;\n        });\n        return sheep;\n      });\n      if (sheep) {\n        await killMob(bot, \"sheep\");\n      } else {\n        bot.chat(\"No sheep found. Please try again later.\");\n        return;\n      }\n    }\n    bot.chat(\"Wool collected.\");\n  }\n\n  // Step 2: Craft 2 more spruce planks if needed\n  const requiredPlanks = 3;\n  const planksCount = bot.inventory.count(mcData.itemsByName.spruce_planks.id);\n  if (planksCount < requiredPlanks) {\n    bot.chat(\"Crafting more spruce_planks...\");\n    await craftItem(bot, \"spruce_planks\", requiredPlanks - planksCount);\n    bot.chat(\"Spruce_planks crafted.\");\n  }\n\n  // Step 3: Place a crafting table if not already placed\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  if (!craftingTable) {\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting_table placed.\");\n  }\n\n  // Step 4: Craft a white bed using the 3 white wool blocks and 3 spruce planks\n  bot.chat(\"Crafting a white bed...\");\n  await craftItem(bot, \"white_bed\", 1);\n  bot.chat(\"White bed crafted.\");\n}", "description": "async function craftWhiteBedWithExploration(bot) {\n    // async function craftWhiteBedWithExploration(bot) {\n    // The function crafts a white bed using 3 white wool blocks and 3 spruce planks. If there are not enough wool blocks, the bot explores the area to find and kill sheep to collect the wool. If there are not enough spruce planks, the bot crafts more. If there is no crafting table nearby, the bot places one.\n}\n}"}, "craftWoodenPlanks": {"code": "async function craftWoodenPlanks(bot) {\n  const logNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n  const plankNames = [\"oak_planks\", \"birch_planks\", \"spruce_planks\", \"jungle_planks\", \"acacia_planks\", \"dark_oak_planks\", \"mangrove_planks\"];\n  const logInInventory = logNames.find(logName => bot.inventory.count(mcData.itemsByName[logName].id) > 0);\n  if (!logInInventory) {\n    bot.chat(\"No wooden log in inventory. Mining a wooden log...\");\n    await mineWoodLog(bot);\n  }\n  const logIndex = logNames.indexOf(logInInventory);\n  const plankName = plankNames[logIndex];\n  bot.chat(`Crafting 4 ${plankName}...`);\n  await craftItem(bot, plankName, 1);\n  bot.chat(`4 ${plankName} crafted.`);\n}", "description": "async function craftWoodenPlanks(bot) {\n    // async function craftWoodenPlanks(bot) {\n    // The function crafts 4 wooden planks using any type of wooden log available in the inventory. If there is no wooden log in the inventory, it will mine one. It then finds the index of the log in the `logNames` array and uses that index to determine the corresponding plank name in the `plankNames` array. Finally, it crafts 4 planks of the corresponding type and saves the event.\n}\n}"}, "eatCookedMutton": {"code": "async function eatCookedMutton(bot) {\n  const cookedMutton = bot.inventory.findInventoryItem(mcData.itemsByName.cooked_mutton.id);\n  await bot.equip(cookedMutton, \"hand\");\n  await bot.consume();\n  bot.chat(\"Cooked mutton eaten.\");\n}", "description": "async function eatCookedMutton(bot) {\n    // async function eatCookedMutton(bot) {\n    // The function is about eating cooked mutton. It first checks if there is any cooked mutton in the inventory. If there is, it equips the cooked mutton in the hand and consumes it. Finally, it sends a chat message indicating that the cooked mutton has been eaten.\n}\n}"}, "eatCookedMuttonV2": {"code": "async function eatCookedMutton(bot) {\n  const cookedMutton = bot.inventory.findInventoryItem(mcData.itemsByName.cooked_mutton.id);\n  await bot.equip(cookedMutton, \"hand\");\n  await bot.consume();\n  bot.chat(\"Cooked mutton eaten.\");\n}", "description": "async function eatCookedMuttonV2(bot) {\n    // async function eatCookedMutton(bot) {\n    // The function is about eating cooked mutton. It first checks if there is any cooked mutton in the inventory. If there is, it equips the cooked mutton in the hand and consumes it. Finally, it sends a chat message indicating that the cooked mutton has been eaten.\n}\n}"}, "eatCookedMuttonV3": {"code": "async function eatCookedMutton(bot) {\n  const cookedMutton = bot.inventory.findInventoryItem(mcData.itemsByName.cooked_mutton.id);\n  await bot.equip(cookedMutton, \"hand\");\n  await bot.consume();\n  bot.chat(\"Cooked mutton eaten.\");\n}", "description": "async function eatCookedMuttonV3(bot) {\n    // async function eatCookedMutton(bot) {\n    // The function is about eating cooked mutton. It first checks if there is any cooked mutton in the inventory. If there is, it equips the cooked mutton in the hand and consumes it. Finally, it sends a chat message indicating that the cooked mutton has been eaten.\n}\n}"}, "exploreCave": {"code": "async function exploreCave(bot) {\n  const torches = bot.inventory.findInventoryItem(mcData.itemsByName.torch.id);\n  if (!torches) {\n    bot.chat(\"No torches found in inventory. Crafting torches...\");\n    await craftTorches(bot);\n  }\n  await bot.equip(mcData.itemsByName.torch.id, \"hand\");\n  const caveEntrance = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const caveBlock = bot.findBlock({\n      matching: block => {\n        return block && block.name === \"air\" && block.position && block.position.y < 60;\n      },\n      maxDistance: 32\n    });\n    return caveBlock;\n  });\n  if (!caveEntrance) {\n    bot.chat(\"No cave entrance found nearby.\");\n    return;\n  }\n  bot.chat(\"Cave entrance found. Exploring the cave...\");\n  await exploreUntil(bot, new Vec3(1, 0, 1), 300, () => {\n    const caveBlock = bot.findBlock({\n      matching: block => {\n        return block && block.name === \"air\" && block.position && block.position.y < 60;\n      },\n      maxDistance: 32\n    });\n    if (caveBlock) {\n      bot.placeBlock(caveBlock, new Vec3(0, 1, 0));\n    }\n    const mob = bot.nearestEntity(entity => {\n      return entity.type === \"mob\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    if (mob) {\n      killMob(bot, mob.name, 300);\n    }\n    return null; // Continue exploring until the time limit is reached\n  });\n\n  bot.chat(\"Finished exploring the cave.\");\n}", "description": "async function exploreCave(bot) {\n    // async function exploreCave(bot) {\n    // The function is about exploring a nearby cave. First, check if there are torches in the inventory. If not, craft torches. Equip the torches in the hand and explore the environment until finding a cave entrance. Once a cave entrance is found, explore the cave by placing torches and killing mobs until the time limit is reached.\n}\n}"}, "exploreCaveAndGatherResources": {"code": "async function exploreCaveAndGatherResources(bot) {\n  // Equip torches\n  const torches = bot.inventory.findInventoryItem(mcData.itemsByName.torch.id);\n  if (!torches) {\n    bot.chat(\"No torches found in inventory. Crafting torches...\");\n    await craftTorches(bot);\n  }\n  await bot.equip(mcData.itemsByName.torch.id, \"hand\");\n\n  // Find a cave entrance and start exploring\n  const caveEntrance = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const caveBlock = bot.findBlock({\n      matching: block => {\n        return block && block.name === \"air\" && block.position && block.position.y < 60;\n      },\n      maxDistance: 32\n    });\n    return caveBlock;\n  });\n  if (!caveEntrance) {\n    bot.chat(\"No cave entrance found nearby.\");\n    return;\n  }\n  bot.chat(\"Cave entrance found. Exploring the cave...\");\n\n  // Explore the cave and gather resources\n  await exploreUntil(bot, new Vec3(1, 0, 1), 300, () => {\n    const caveBlock = bot.findBlock({\n      matching: block => {\n        return block && block.name === \"air\" && block.position && block.position.y < 60;\n      },\n      maxDistance: 32\n    });\n    if (caveBlock) {\n      bot.placeBlock(caveBlock, new Vec3(0, 1, 0));\n    }\n    const mob = bot.nearestEntity(entity => {\n      return entity.type === \"mob\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    if (mob) {\n      killMob(bot, mob.name, 300);\n    }\n    const ores = [\"coal_ore\", \"iron_ore\", \"gold_ore\", \"diamond_ore\"];\n    for (const ore of ores) {\n      const oreBlock = bot.findBlock({\n        matching: mcData.blocksByName[ore].id,\n        maxDistance: 32\n      });\n      if (oreBlock) {\n        mineBlock(bot, ore, 1);\n      }\n    }\n    return null; // Continue exploring until the time limit is reached\n  });\n\n  bot.chat(\"Finished exploring the cave and gathering resources.\");\n}", "description": "async function exploreCaveAndGatherResources(bot) {\n    // async function exploreCaveAndGatherResources(bot) {\n    // The function is about exploring a nearby cave and gathering resources. First, equip torches and find a cave entrance. Once a cave entrance is found, explore the cave and gather resources such as coal, iron, gold, and diamond ores. While exploring, place torches to light up the cave, kill nearby mobs, and mine ores. The function will continue exploring until the time limit is reached. Finally, the function will output a message indicating that the exploration and resource gathering is finished.\n}\n}"}, "exploreCaveAndGatherResourcesV2": {"code": "async function exploreCaveAndGatherResources(bot) {\n  // Equip torches\n  const torches = bot.inventory.findInventoryItem(mcData.itemsByName.torch.id);\n  if (!torches) {\n    bot.chat(\"No torches found in inventory. Crafting torches...\");\n    await craftTorches(bot);\n  }\n  await bot.equip(mcData.itemsByName.torch.id, \"hand\");\n\n  // Find a cave entrance and start exploring\n  const caveEntrance = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const caveBlock = bot.findBlock({\n      matching: block => {\n        return block && block.name === \"air\" && block.position && block.position.y < 60;\n      },\n      maxDistance: 32\n    });\n    return caveBlock;\n  });\n  if (!caveEntrance) {\n    bot.chat(\"No cave entrance found nearby.\");\n    return;\n  }\n  bot.chat(\"Cave entrance found. Exploring the cave...\");\n\n  // Explore the cave and gather resources\n  await exploreUntil(bot, new Vec3(1, 0, 1), 300, () => {\n    const caveBlock = bot.findBlock({\n      matching: block => {\n        return block && block.name === \"air\" && block.position && block.position.y < 60;\n      },\n      maxDistance: 32\n    });\n    if (caveBlock) {\n      bot.placeBlock(caveBlock, new Vec3(0, 1, 0));\n    }\n    const mob = bot.nearestEntity(entity => {\n      return entity.type === \"mob\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    if (mob) {\n      killMob(bot, mob.name, 300);\n    }\n    const ores = [\"coal_ore\", \"iron_ore\", \"gold_ore\", \"diamond_ore\"];\n    for (const ore of ores) {\n      const oreBlock = bot.findBlock({\n        matching: mcData.blocksByName[ore].id,\n        maxDistance: 32\n      });\n      if (oreBlock) {\n        mineBlock(bot, ore, 1);\n      }\n    }\n    return null; // Continue exploring until the time limit is reached\n  });\n\n  bot.chat(\"Finished exploring the cave and gathering resources.\");\n}", "description": "async function exploreCaveAndGatherResourcesV2(bot) {\n    // async function exploreCaveAndGatherResources(bot) {\n    // The function is about exploring a nearby cave and gathering resources. First, equip torches and find a cave entrance. Once a cave entrance is found, explore the cave and gather resources such as coal, iron, gold, and diamond ores. While exploring, place torches to light up the cave, kill nearby mobs, and mine ores. The function will continue exploring until the time limit is reached. Finally, the function will output a message indicating that the exploration and resource gathering is finished.\n}\n}"}, "fishInNearbyWaterSafely": {"code": "async function fishInNearbyWaterSafely(bot) {\n  // Check if the bot has a fishing rod in its inventory\n  let fishingRod = bot.inventory.findInventoryItem(mcData.itemsByName.fishing_rod.id);\n  if (!fishingRod) {\n    await craftFishingRod(bot);\n    fishingRod = bot.inventory.findInventoryItem(mcData.itemsByName.fishing_rod.id);\n  }\n\n  // Find a nearby water block\n  const waterBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const foundWaterBlock = bot.findBlock({\n      matching: mcData.blocksByName.water.id,\n      maxDistance: 32\n    });\n    return foundWaterBlock;\n  });\n\n  // Move to a block adjacent to the water block\n  const adjacentBlock = waterBlock.position.offset(0, 1, 0);\n  await bot.pathfinder.goto(new GoalBlock(adjacentBlock.x, adjacentBlock.y, adjacentBlock.z));\n\n  // Look at the water block\n  await bot.lookAt(waterBlock.position);\n\n  // Equip the fishing rod\n  await bot.equip(fishingRod, \"hand\");\n\n  // Check for hostile mobs nearby and kill them if necessary\n  const hostileMobs = [\"zombie\", \"skeleton\", \"creeper\"];\n  for (const mobName of hostileMobs) {\n    const mob = bot.nearestEntity(entity => {\n      return entity.name === mobName && entity.position.distanceTo(bot.entity.position) < 16;\n    });\n    if (mob) {\n      await killMob(bot, mobName, 300);\n    }\n  }\n\n  // Fish in the water\n  try {\n    await bot.fish();\n    bot.chat(\"Fished in the nearby water.\");\n  } catch (error) {\n    if (error.message === \"Fishing cancelled\") {\n      bot.chat(\"Fishing was cancelled. Trying again...\");\n      await fishInNearbyWaterSafely(bot);\n    } else {\n      throw error;\n    }\n  }\n}", "description": "async function fishInNearbyWaterSafely(bot) {\n    // async function fishInNearbyWaterSafely(bot) {\n    // The function is about fishing in a nearby water block safely. It first checks if the bot has a fishing rod in its inventory, and crafts one if it doesn't. Then, it finds a nearby water block and moves to a block adjacent to it. After looking at the water block, it equips the fishing rod and checks for hostile mobs nearby, killing them if necessary. Finally, it fishes in the water and retries if the fishing is cancelled.\n}\n}"}, "mineCoalOre": {"code": "async function mineCoalOre(bot) {\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  if (!stonePickaxe) {\n    bot.chat(\"No stone pickaxe found in inventory.\");\n    return;\n  }\n  await bot.equip(mcData.itemsByName.stone_pickaxe.id, \"hand\");\n  const coalOreBlock = bot.findBlock({\n    matching: mcData.blocksByName.coal_ore.id,\n    maxDistance: 32\n  });\n  if (!coalOreBlock) {\n    bot.chat(\"No coal ore found nearby. Exploring...\");\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundCoalOre = bot.findBlock({\n        matching: mcData.blocksByName.coal_ore.id,\n        maxDistance: 32\n      });\n      return foundCoalOre;\n    });\n  }\n  await mineBlock(bot, \"coal_ore\", 1);\n  bot.chat(\"Coal ore mined.\");\n}", "description": "async function mineCoalOre(bot) {\n    // async function mineCoalOre(bot) {\n    // The function is about mining a single coal ore block using a stone pickaxe. First, it checks if a stone pickaxe is in the inventory. If not, it returns. If the stone pickaxe is available, it equips it in the hand. Next, it searches for a nearby coal ore block. If it is not found, it explores the environment until it finds one. Once a coal ore block is found, it mines it and sends a message to the chat.\n}\n}"}, "mineCopperOreWithStonePickaxe": {"code": "async function mineCopperOreWithStonePickaxe(bot) {\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  if (!stonePickaxe) {\n    bot.chat(\"No stone pickaxe found. Mining cobblestone and crafting one...\");\n    await mineBlock(bot, \"stone\", 3);\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    await craftItem(bot, \"stone_pickaxe\", 1);\n    bot.chat(\"Stone pickaxe crafted.\");\n  }\n  await bot.equip(mcData.itemsByName.stone_pickaxe.id, \"hand\");\n  const copperOreBlock = bot.findBlock({\n    matching: mcData.blocksByName.copper_ore.id,\n    maxDistance: 32\n  });\n  if (!copperOreBlock) {\n    bot.chat(\"No copper ore found nearby. Exploring...\");\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundCopperOre = bot.findBlock({\n        matching: mcData.blocksByName.copper_ore.id,\n        maxDistance: 32\n      });\n      return foundCopperOre;\n    });\n  }\n  await mineBlock(bot, \"copper_ore\", 1);\n  bot.chat(\"Copper ore mined.\");\n}", "description": "async function mineCopperOreWithStonePickaxe(bot) {\n    // async function mineCopperOreWithStonePickaxe(bot) {\n    // The function is about mining a single copper ore block using a stone pickaxe. If the stone pickaxe is not in the inventory, the bot will mine 3 cobblestone blocks and craft a stone pickaxe. Once the stone pickaxe is available, it will be equipped in the hand. The bot will then explore the environment until finding a copper ore block. Once a copper ore block is found, the bot will mine it and save the event.\n}\n}"}, "mineFiveCoalOresV2": {"code": "async function mineFiveCoalOres(bot) {\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  if (!stonePickaxe) {\n    bot.chat(\"No stone pickaxe found in inventory.\");\n    return;\n  }\n  await bot.equip(mcData.itemsByName.stone_pickaxe.id, \"hand\");\n  await mineBlock(bot, \"coal_ore\", 5);\n  bot.chat(\"5 coal ores mined.\");\n}", "description": "async function mineFiveCoalOresV2(bot) {\n    // async function mineFiveCoalOres(bot) {\n    // The function is about mining 5 coal ores using a stone pickaxe. First, check if a stone pickaxe is in the inventory. If not, return. If the stone pickaxe is available, equip the stone pickaxe in the hand. Next, mine a total of 5 coal ores using the stone pickaxe. Finally, send a chat message indicating that 5 coal ores have been mined.\n}\n}"}, "mineLapisOre": {"code": "async function mineLapisOre(bot) {\n  const pickaxeTypes = [mcData.itemsByName.stone_pickaxe.id, mcData.itemsByName.iron_pickaxe.id, mcData.itemsByName.diamond_pickaxe.id, mcData.itemsByName.netherite_pickaxe.id];\n  let pickaxe = bot.inventory.items().find(item => pickaxeTypes.includes(item.type));\n  if (!pickaxe) {\n    bot.chat(\"No suitable pickaxe found. Mining cobblestone and crafting a stone pickaxe...\");\n    await mineBlock(bot, \"stone\", 3);\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    await craftItem(bot, \"stone_pickaxe\", 1);\n    pickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n    bot.chat(\"Stone pickaxe crafted.\");\n  }\n  await bot.equip(pickaxe, \"hand\");\n  const lapisOreBlock = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const foundLapisOre = bot.findBlock({\n      matching: mcData.blocksByName.lapis_ore.id,\n      maxDistance: 32\n    });\n    return foundLapisOre;\n  });\n  if (!lapisOreBlock) {\n    bot.chat(\"No lapis ore found nearby. Exploring...\");\n  }\n  await mineBlock(bot, \"lapis_ore\", 1);\n  bot.chat(\"Lapis ore mined.\");\n}", "description": "async function mineLapisOre(bot) {\n    // async function mineLapisOre(bot) {\n    // The function is about mining a single lapis ore block using the best available pickaxe. If the bot does not have a suitable pickaxe, it will mine cobblestone and craft a stone pickaxe. Once the pickaxe is available, it will equip it and explore the environment until finding a lapis ore block. Once a lapis ore block is found, it will mine it and save the event of mining the lapis ore.\n}\n}"}, "mineThreeIronOres": {"code": "async function mineThreeIronOres(bot) {\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  if (!stonePickaxe) {\n    bot.chat(\"No stone pickaxe found. Mining cobblestone and crafting one...\");\n    await mineBlock(bot, \"stone\", 3);\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    await craftItem(bot, \"stone_pickaxe\", 1);\n    bot.chat(\"Stone pickaxe crafted.\");\n  }\n  await bot.equip(mcData.itemsByName.stone_pickaxe.id, \"hand\");\n  const ironOreBlock = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const foundIronOre = bot.findBlock({\n      matching: mcData.blocksByName.iron_ore.id,\n      maxDistance: 32\n    });\n    return foundIronOre;\n  });\n  if (!ironOreBlock) {\n    bot.chat(\"No iron ore found nearby. Exploring...\");\n  }\n  await mineBlock(bot, \"iron_ore\", 3);\n  bot.chat(\"3 iron ores mined.\");\n}", "description": "async function mineThreeIronOres(bot) {\n    // async function mineThreeIronOres(bot) {\n    // The function is about mining 3 iron ores using a stone pickaxe. If the stone pickaxe is not in the inventory, the bot will mine cobblestone and craft one. Once the stone pickaxe is available, it will be equipped in the hand. The bot will explore the environment until finding an iron ore block. Once an iron ore block is found, the bot will mine a total of 3 iron ores using the stone pickaxe.\n}\n}"}, "smeltOneRawIron": {"code": "async function smeltOneRawIron(bot) {\n  const furnaceInInventory = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  if (!furnaceInInventory) {\n    bot.chat(\"No furnace found in inventory. Please craft one first.\");\n    return;\n  }\n  let furnacePosition = bot.entity.position.offset(1, 0, 0);\n  const blockAtFurnacePosition = bot.blockAt(furnacePosition);\n  if (blockAtFurnacePosition.name === \"coal_ore\") {\n    furnacePosition = bot.entity.position.offset(-1, 0, 0);\n  }\n  await placeItem(bot, \"furnace\", furnacePosition);\n  bot.chat(\"Furnace placed.\");\n  await smeltItem(bot, \"raw_iron\", \"coal\", 1);\n  bot.chat(\"1 raw iron smelted.\");\n}", "description": "async function smeltOneRawIron(bot) {\n    // async function smeltOneRawIron(bot) {\n    // The function is about smelting one raw iron using a furnace. It first checks if a furnace is in the inventory, and if not, it returns a message to craft one. It then places the furnace next to the bot and smelts one raw iron using coal as fuel. Finally, it sends a message indicating that one raw iron has been smelted.\n}\n}"}, "smeltRawIron": {"code": "async function smeltRawIron(bot) {\n  const furnaceInInventory = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  if (!furnaceInInventory) {\n    bot.chat(\"No furnace found in inventory. Please craft one first.\");\n    return;\n  }\n  let furnacePosition = bot.entity.position.offset(1, 0, 0);\n  const blockAtFurnacePosition = bot.blockAt(furnacePosition);\n  if (blockAtFurnacePosition.name === \"coal_ore\") {\n    furnacePosition = bot.entity.position.offset(-1, 0, 0);\n  }\n  await placeItem(bot, \"furnace\", furnacePosition);\n  bot.chat(\"Furnace placed.\");\n  const requiredCoal = 3;\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  if (coalCount < requiredCoal) {\n    bot.chat(\"Not enough coal. Mining more coal...\");\n    await mineBlock(bot, \"coal_ore\", requiredCoal - coalCount);\n  }\n  await smeltItem(bot, \"raw_iron\", \"coal\", 3);\n  bot.chat(\"3 raw iron smelted.\");\n}", "description": "async function smeltRawIron(bot) {\n    // async function smeltRawIron(bot) {\n    // The function is about smelting 3 raw iron using a furnace and coal. First, it checks if there is a furnace in the inventory, and if not, it returns a message to craft one. Then, it places the furnace next to the bot. If there is coal in the inventory, it uses it to smelt the raw iron. Otherwise, it mines coal ore to obtain the required amount of coal. Finally, it smelts the raw iron and returns a message indicating that the process is complete.\n}\n}"}, "smeltSixRawIron": {"code": "async function smeltSixRawIron(bot) {\n  const furnaceInInventory = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  if (!furnaceInInventory) {\n    bot.chat(\"No furnace found in inventory. Please craft one first.\");\n    return;\n  }\n  let furnacePosition = bot.entity.position.offset(1, 0, 0);\n  const blockAtFurnacePosition = bot.blockAt(furnacePosition);\n  if (blockAtFurnacePosition.name === \"coal_ore\") {\n    furnacePosition = bot.entity.position.offset(-1, 0, 0);\n  }\n  await placeItem(bot, \"furnace\", furnacePosition);\n  bot.chat(\"Furnace placed.\");\n  const requiredCoal = 6;\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  if (coalCount < requiredCoal) {\n    bot.chat(\"Not enough coal. Mining more coal...\");\n    await mineBlock(bot, \"coal_ore\", requiredCoal - coalCount);\n  }\n  await smeltItem(bot, \"raw_iron\", \"coal\", 6);\n  bot.chat(\"6 raw iron smelted.\");\n}", "description": "async function smeltSixRawIron(bot) {\n    // async function smeltSixRawIron(bot) {\n    // The function is about smelting 6 raw iron using a furnace and coal. It first checks if a furnace is in the inventory, and if not, it returns a message to craft one. It then places the furnace next to the player and checks if there is enough coal in the inventory. If there isn't, it mines coal until there are 6 pieces. Finally, it smelts 6 raw iron using the furnace and coal, and returns a message indicating that the process is complete.\n}\n}"}, "smeltTwentyFiveIronIngots": {"code": "async function smeltTwentyFiveIronIngots(bot) {\n  const furnaceInInventory = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  if (!furnaceInInventory) {\n    bot.chat(\"No furnace found in inventory. Please craft one first.\");\n    return;\n  }\n  let furnacePosition = bot.entity.position.offset(1, 0, 0);\n  const blockAtFurnacePosition = bot.blockAt(furnacePosition);\n  if (blockAtFurnacePosition.name === \"coal_ore\") {\n    furnacePosition = bot.entity.position.offset(-1, 0, 0);\n  }\n  await placeItem(bot, \"furnace\", furnacePosition);\n  bot.chat(\"Furnace placed.\");\n  const requiredCoal = 25;\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  if (coalCount < requiredCoal) {\n    bot.chat(\"Not enough coal. Mining more coal...\");\n    await mineBlock(bot, \"coal_ore\", requiredCoal - coalCount);\n  }\n  await smeltItem(bot, \"raw_iron\", \"coal\", 25);\n  bot.chat(\"25 raw iron smelted.\");\n}", "description": "async function smeltTwentyFiveIronIngots(bot) {\n    // async function smeltTwentyFiveIronIngots(bot) {\n    // The function is about smelting 25 raw iron ingots using a furnace and coal. It first checks if a furnace is in the inventory, and if not, it returns a message to craft one. Then it places the furnace next to the bot, and checks if there is enough coal in the inventory. If there isn't, it mines coal until there are 25 pieces. Finally, it smelts 25 raw iron ingots using the furnace and coal, and returns a message indicating that the process is complete.\n}\n}"}, "cookChicken": {"code": "async function cookChicken(bot) {\n  // Check if there is a furnace in the inventory\n  const furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n\n  // If there is no furnace, craft one using cobblestone\n  if (!furnace) {\n    await craftItem(bot, \"furnace\", 1);\n  }\n\n  // Place the furnace near the player\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt the raw chicken using coal as fuel in the furnace\n  await smeltItem(bot, \"chicken\", \"coal\", 1);\n\n  // Collect the cooked chicken\n  bot.chat(\"1 chicken cooked.\");\n}", "description": "async function cookChicken(bot) {\n    // async function cookChicken(bot) {\n    // The function is about cooking a raw chicken using a furnace and coal as fuel. First, it checks if there is a furnace in the inventory. If not, it crafts one using cobblestone. Then, it places the furnace near the player. Next, it smelts the raw chicken using coal as fuel in the furnace. Finally, it collects the cooked chicken and sends a chat message.\n}\n}"}, "cookRawBeef": {"code": "async function cookRawBeef(bot) {\n  // Check if there is a furnace in the inventory\n  const furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n\n  // If there is no furnace, craft one using cobblestone\n  if (!furnace) {\n    await craftItem(bot, \"furnace\", 1);\n  }\n\n  // Place the furnace near the player\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt the 6 raw beef using coal as fuel in the furnace\n  await smeltItem(bot, \"beef\", \"coal\", 6);\n\n  // Collect the cooked beef\n  bot.chat(\"6 raw beef cooked.\");\n}", "description": "async function cookRawBeef(bot) {\n    // async function cookRawBeef(bot) {\n    // The function is about cooking 6 raw beef using a furnace and coal as fuel. It first checks if there is a furnace in the inventory, and if not, crafts one using cobblestone. Then, it places the furnace near the player and smelts the 6 raw beef using coal as fuel in the furnace. Finally, it collects the cooked beef and sends a chat message.\n}\n}"}, "cookRawMutton": {"code": "async function cookRawMutton(bot) {\n  // Check if there is a furnace in the inventory\n  const furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n\n  // If there is no furnace, craft one using cobblestone\n  if (!furnace) {\n    await craftItem(bot, \"furnace\", 1);\n  }\n\n  // Place the furnace near the player\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt the 4 raw mutton using coal as fuel in the furnace\n  await smeltItem(bot, \"mutton\", \"coal\", 4);\n\n  // Collect the cooked mutton\n  bot.chat(\"4 raw mutton cooked.\");\n}", "description": "async function cookRawMutton(bot) {\n    // async function cookRawMutton(bot) {\n    // The function is about cooking 4 raw mutton using a furnace and coal as fuel. If there is no furnace in the inventory, the bot will craft one using cobblestone. Then, the bot will place the furnace near the player and smelt the 4 raw mutton using coal as fuel. Finally, the bot will collect the cooked mutton and print a message in the chat.\n}\n}"}, "cookThreeRawChicken": {"code": "async function cookThreeRawChicken(bot) {\n  // Find a suitable location to place the furnace\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n\n  // Place the furnace\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt 3 raw chicken using coal as fuel\n  await smeltItem(bot, \"chicken\", \"coal\", 3);\n  bot.chat(\"3 raw chicken cooked.\");\n}", "description": "async function cookThreeRawChicken(bot) {\n    // async function cookThreeRawChicken(bot) {\n    // The function is about cooking 3 raw chicken using a furnace and coal as fuel. First, it finds a suitable location to place the furnace. Then, it places the furnace at that location. Finally, it smelts 3 raw chicken using coal as fuel and sends a chat message indicating that the chicken has been cooked.\n}\n}"}, "craftBirchBoat": {"code": "async function findSuitablePosition(bot) {\n  const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n  for (const offset of offsets) {\n    const position = bot.entity.position.offset(offset.x, offset.y, offset.z);\n    const blockBelow = bot.blockAt(position.offset(0, -1, 0));\n    if (blockBelow && blockBelow.name !== \"air\") {\n      return position;\n    }\n  }\n  return null;\n}\n\nasync function craftBirchBoat(bot) {\n  // Check if there are enough birch logs in the inventory\n  const birchLogs = bot.inventory.count(mcData.itemsByName[\"birch_log\"].id);\n  if (birchLogs < 5) {\n    // Mine more birch logs\n    await mineBlock(bot, \"birch_log\", 5 - birchLogs);\n  }\n\n  // Craft birch planks using birch logs\n  await craftItem(bot, \"birch_planks\", 5);\n\n  // Check if there is a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    // Craft a crafting table\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Find a suitable position to place the crafting table\n  const craftingTablePosition = await findSuitablePosition(bot);\n  if (!craftingTablePosition) {\n    bot.chat(\"Failed to find a suitable position to place the crafting table. Please try again.\");\n    return;\n  }\n\n  // Place the crafting table at the suitable position\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a birch boat using birch planks and the crafting table\n  await craftItem(bot, \"birch_boat\", 1, craftingTablePosition);\n  bot.chat(\"Birch boat crafted.\");\n}", "description": "async function craftBirchBoat(bot) {\n    // async function craftBirchBoat(bot) {\n    // The function crafts a birch boat using birch logs and a crafting table. It first checks if there are enough birch logs in the inventory, and if not, mines more. Then, it crafts birch planks using the birch logs. If there is no crafting table in the inventory, it crafts one. It finds a suitable position to place the crafting table and places it there. Finally, it crafts a birch boat using the birch planks and the crafting table.\n}\n}"}, "craftBoneMeal": {"code": "async function craftBoneMeal(bot) {\n  // Check if there are enough bones in the inventory\n  const bones = bot.inventory.count(mcData.itemsByName[\"bone\"].id);\n  if (bones < 2) {\n    bot.chat(\"Not enough bones to craft 4 bone meal.\");\n    return;\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft 4 bone meal using 2 bones and the crafting table\n  await craftItem(bot, \"bone_meal\", 2, craftingTablePosition);\n  bot.chat(\"4 bone meal crafted.\");\n}", "description": "async function craftBoneMeal(bot) {\n    // async function craftBoneMeal(bot) {\n    // The function is about crafting 4 bone meal using 2 bones and a crafting table. It first checks if there are enough bones in the inventory, and if not, it returns. Then, it places a crafting table near the player using the `placeItem` helper function. Finally, it crafts 4 bone meal using 2 bones and the crafting table, and sends a chat message indicating that the bone meal has been crafted.\n}\n}"}, "craftClock": {"code": "async function craftClock(bot) {\n  // Check if there is a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n\n  // If there is no crafting table, craft one using oak planks\n  if (!craftingTable) {\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a clock using 4 gold ingots and 1 redstone dust with the crafting table\n  await craftItem(bot, \"clock\", 1, craftingTablePosition);\n  bot.chat(\"Clock crafted.\");\n}", "description": "async function craftClock(bot) {\n    // async function craftClock(bot) {\n    // The function crafts a clock using 4 gold ingots and 1 redstone dust. It first checks if there is a crafting table in the inventory, and if not, crafts one using oak planks. Then, it places the crafting table near the player. Finally, it crafts a clock using the crafting table and saves the event of crafting a clock.\n}\n}"}, "craftDiamondSword": {"code": "async function craftDiamondSword(bot) {\n  // Check if there are enough diamonds in the inventory\n  const diamonds = bot.inventory.count(mcData.itemsByName[\"diamond\"].id);\n  if (diamonds < 2) {\n    bot.chat(\"Not enough diamonds to craft a diamond sword.\");\n    return;\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.count(mcData.itemsByName[\"stick\"].id);\n  if (sticks < 1) {\n    // Craft more sticks using oak planks\n    await craftItem(bot, \"stick\", 1 - sticks);\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a diamond sword using diamonds and sticks with the crafting table\n  await craftItem(bot, \"diamond_sword\", 1, craftingTablePosition);\n  bot.chat(\"Diamond sword crafted.\");\n}", "description": "async function craftDiamondSword(bot) {\n    // async function craftDiamondSword(bot) {\n    // The function crafts a diamond sword using diamonds and sticks. It first checks if there are enough diamonds and sticks in the inventory. If there are not enough sticks, it crafts more using oak planks. Then, it places a crafting table near the player and uses it to craft a diamond sword. Finally, it sends a chat message indicating that the diamond sword has been crafted.\n}\n}"}, "craftShield": {"code": "async function craftShield(bot) {\n  // Check if there are enough oak planks in the inventory\n  const oakPlanks = bot.inventory.count(mcData.itemsByName[\"oak_planks\"].id);\n  if (oakPlanks < 6) {\n    // Craft more oak planks using oak logs\n    await craftItem(bot, \"oak_planks\", 6 - oakPlanks);\n  }\n\n  // Check if there are enough iron ingots in the inventory\n  const ironIngots = bot.inventory.count(mcData.itemsByName[\"iron_ingot\"].id);\n  if (ironIngots < 1) {\n    bot.chat(\"Not enough iron ingots to craft a shield.\");\n    return;\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a shield using oak planks and iron ingots with the crafting table\n  await craftItem(bot, \"shield\", 1, craftingTablePosition);\n  bot.chat(\"Shield crafted.\");\n}", "description": "async function craftShield(bot) {\n    // async function craftShield(bot) {\n    // The function crafts a shield using oak planks and iron ingots. It checks if there are enough oak planks and iron ingots in the inventory, and crafts more oak planks if necessary. If there are not enough iron ingots, it returns. It then places a crafting table near the player and crafts a shield using the crafting table. Finally, it sends a chat message indicating that the shield has been crafted.\n}\n}"}, "craftStoneHoeV2": {"code": "async function craftStoneHoe(bot) {\n  // Check if there are enough cobblestones in the inventory\n  const cobblestones = bot.inventory.count(mcData.itemsByName[\"cobblestone\"].id);\n  if (cobblestones < 2) {\n    bot.chat(\"Not enough cobblestones to craft a stone hoe.\");\n    return;\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.count(mcData.itemsByName[\"stick\"].id);\n  if (sticks < 2) {\n    // Craft more sticks using oak planks\n    await craftItem(bot, \"stick\", 2 - sticks);\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a stone hoe using cobblestones and sticks with the crafting table\n  await craftItem(bot, \"stone_hoe\", 1, craftingTablePosition);\n  bot.chat(\"Stone hoe crafted.\");\n}", "description": "async function craftStoneHoeV2(bot) {\n    // async function craftStoneHoe(bot) {\n    // The function crafts a stone hoe using cobblestones and sticks. It first checks if there are enough cobblestones and sticks in the inventory. If there are not enough sticks, it crafts more using oak planks. Then, it places a crafting table near the player and crafts a stone hoe using the cobblestones and sticks with the crafting table. Finally, it sends a chat message indicating that the stone hoe has been crafted.\n}\n}"}, "craftStoneTools": {"code": "async function craftStoneTools(bot) {\n  // Check if there are enough cobblestones in the inventory\n  const cobblestones = bot.inventory.count(mcData.itemsByName[\"cobblestone\"].id);\n  if (cobblestones < 6) {\n    // Mine more cobblestones\n    await mineBlock(bot, \"stone\", 6 - cobblestones);\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.count(mcData.itemsByName[\"stick\"].id);\n  if (sticks < 5) {\n    // Craft more sticks using oak planks\n    await craftItem(bot, \"stick\", 5 - sticks);\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a stone sword, a stone axe, and a stone shovel using the crafting table\n  await craftItem(bot, \"stone_sword\", 1, craftingTablePosition);\n  await craftItem(bot, \"stone_axe\", 1, craftingTablePosition);\n  await craftItem(bot, \"stone_shovel\", 1, craftingTablePosition);\n  bot.chat(\"Stone sword, stone axe, and stone shovel crafted.\");\n}", "description": "async function craftStoneTools(bot) {\n    // async function craftStoneTools(bot) {\n    // The function crafts stone tools (sword, axe, and shovel) using a crafting table. It checks if there are enough cobblestones and sticks in the inventory, and mines more cobblestones or crafts more sticks if necessary. Then, it places a crafting table near the player and crafts the stone tools using the crafting table. Finally, it sends a chat message indicating that the tools have been crafted.\n}\n}"}, "craftTenCobblestoneWalls": {"code": "async function craftTenCobblestoneWalls(bot) {\n  // Check if there are enough cobblestones in the inventory\n  const cobblestones = bot.inventory.count(mcData.itemsByName[\"cobblestone\"].id);\n  if (cobblestones < 32) {\n    bot.chat(\"Not enough cobblestones to craft 10 cobblestone walls.\");\n    return;\n  }\n\n  // Place the crafting table near the player\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft 6 cobblestone walls using the crafting table\n  await craftItem(bot, \"cobblestone_wall\", 1, craftingTablePosition);\n\n  // Craft 6 more cobblestone walls using the crafting table\n  await craftItem(bot, \"cobblestone_wall\", 1, craftingTablePosition);\n  bot.chat(\"10 cobblestone walls crafted.\");\n}", "description": "async function craftTenCobblestoneWalls(bot) {\n    // async function craftTenCobblestoneWalls(bot) {\n    // The function crafts 10 cobblestone walls using a crafting table. It first checks if there are enough cobblestones in the inventory, and if not, it returns. Then, it places a crafting table near the player and crafts 6 cobblestone walls using the crafting table. It repeats the process to craft 6 more cobblestone walls and outputs a message when the process is complete.\n}\n}"}, "eatCookedBeef": {"code": "async function eatCookedBeef(bot) {\n  // Equip a cooked beef in the bot's hand\n  const cookedBeef = bot.inventory.findInventoryItem(mcData.itemsByName[\"cooked_beef\"].id);\n  await bot.equip(cookedBeef, \"hand\");\n\n  // Consume the cooked beef\n  await bot.consume();\n  bot.chat(\"1 cooked beef eaten.\");\n}", "description": "async function eatCookedBeef(bot) {\n    // async function eatCookedBeef(bot) {\n    // The function is about making the bot eat a cooked beef. It equips a cooked beef in the bot's hand and then consumes it. Finally, it sends a message to the chat saying that 1 cooked beef has been eaten.\n}\n}"}, "eatCookedBeefV2": {"code": "async function eatCookedBeef(bot) {\n  // Equip a cooked beef in the bot's hand\n  const cookedBeef = bot.inventory.findInventoryItem(mcData.itemsByName[\"cooked_beef\"].id);\n  await bot.equip(cookedBeef, \"hand\");\n\n  // Consume the cooked beef\n  await bot.consume();\n  bot.chat(\"1 cooked beef eaten.\");\n}", "description": "async function eatCookedBeefV2(bot) {\n    // async function eatCookedBeef(bot) {\n    // The function is about making the bot eat a cooked beef. It equips a cooked beef in the bot's hand and then consumes it. Finally, it sends a message to the chat indicating that one cooked beef has been eaten.\n}\n}"}, "eatCookedBeefV3": {"code": "async function eatCookedBeef(bot) {\n  // Equip a cooked beef in the bot's hand\n  const cookedBeef = bot.inventory.findInventoryItem(mcData.itemsByName[\"cooked_beef\"].id);\n  await bot.equip(cookedBeef, \"hand\");\n\n  // Consume the cooked beef\n  await bot.consume();\n  bot.chat(\"1 cooked beef eaten.\");\n}", "description": "async function eatCookedBeefV3(bot) {\n    // async function eatCookedBeef(bot) {\n    // The function is about making the bot eat a cooked beef. It equips a cooked beef in the bot's hand and then consumes it. Finally, it sends a message to the chat indicating that one cooked beef has been eaten.\n}\n}"}, "eatCookedMuttonIfHungry": {"code": "async function eatCookedMuttonIfHungry(bot) {\n  // Check if the bot's hunger is less than 20\n  if (bot.food < 20) {\n    // Equip the cooked mutton in the bot's hand\n    const cookedMutton = bot.inventory.findInventoryItem(mcData.itemsByName[\"cooked_mutton\"].id);\n    await bot.equip(cookedMutton, \"hand\");\n\n    // Consume the cooked mutton\n    await bot.consume();\n    bot.chat(\"1 cooked mutton eaten.\");\n  } else {\n    bot.chat(\"Hunger is full, no need to eat cooked mutton.\");\n  }\n}", "description": "async function eatCookedMuttonIfHungry(bot) {\n    // async function eatCookedMuttonIfHungry(bot) {\n    // The function checks if the bot's hunger is less than 20, and if so, equips and consumes a cooked mutton to restore hunger. If the hunger is already full, it will not eat the cooked mutton.\n}\n}"}, "equipIronHelmet": {"code": "async function equipIronHelmet(bot) {\n  // Find the iron helmet in the bot's inventory\n  const ironHelmet = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_helmet\"].id);\n\n  // Equip the iron helmet in the head slot\n  await bot.equip(ironHelmet, \"head\");\n  bot.chat(\"Iron helmet equipped.\");\n}", "description": "async function equipIronHelmet(bot) {\n    // async function equipIronHelmet(bot) {\n    // The function is about equipping an iron helmet in the head slot of the bot's inventory. It first finds the iron helmet in the bot's inventory and then equips it in the head slot. Finally, it sends a chat message confirming that the iron helmet has been equipped.\n}\n}"}, "equipIronLeggingsAndBoots": {"code": "async function equipIronLeggingsAndBoots(bot) {\n  // Find the iron leggings and iron boots in the bot's inventory\n  const ironLeggings = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_leggings\"].id);\n  const ironBoots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_boots\"].id);\n\n  // Check if the bot has iron leggings and iron boots\n  if (ironLeggings && ironBoots) {\n    // Equip the iron leggings in the legs slot\n    await bot.equip(ironLeggings, \"legs\");\n\n    // Equip the iron boots in the feet slot\n    await bot.equip(ironBoots, \"feet\");\n\n    // Send a chat message to indicate that the iron leggings and iron boots have been equipped\n    bot.chat(\"Iron leggings and iron boots equipped.\");\n  } else {\n    bot.chat(\"Iron leggings and/or iron boots not found in inventory.\");\n  }\n}", "description": "async function equipIronLeggingsAndBoots(bot) {\n    // async function equipIronLeggingsAndBoots(bot) {\n    // The function equips the bot with iron leggings and iron boots if they are available in the inventory, and sends a chat message indicating that they have been equipped. If the items are not found in the inventory, it sends a chat message indicating that they were not found.\n}\n}"}, "equipShield": {"code": "async function equipShield(bot) {\n  // Find the shield in the bot's inventory\n  const shield = bot.inventory.findInventoryItem(mcData.itemsByName[\"shield\"].id);\n\n  // Equip the shield in the off-hand slot\n  await bot.equip(shield, \"off-hand\");\n  bot.chat(\"Shield equipped.\");\n}", "description": "async function equipShield(bot) {\n    // async function equipShield(bot) {\n    // The function equips a shield in the off-hand slot of the bot's inventory. It first finds the shield in the bot's inventory and then equips it in the off-hand slot. Finally, it sends a chat message confirming that the shield has been equipped.\n}\n}"}, "killChickenWithIncreasedTime": {"code": "async function killChickenWithIncreasedTime(bot) {\n  // Explore the area to find a chicken with an increased exploration time limit\n  const chicken = await exploreUntil(bot, new Vec3(1, 0, 1), 120, () => {\n    const chicken = bot.nearestEntity(entity => {\n      return entity.name === \"chicken\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return chicken;\n  });\n  if (!chicken) {\n    bot.chat(\"No chicken found.\");\n    return;\n  }\n\n  // Equip a weapon (preferably a sword) to kill the chicken\n  const sword = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_sword\"].id) || bot.inventory.findInventoryItem(mcData.itemsByName[\"wooden_sword\"].id);\n  if (sword) {\n    await bot.equip(sword, \"hand\");\n  } else {\n    bot.chat(\"No sword found, using bare hands.\");\n  }\n\n  // Kill the chicken\n  await killMob(bot, \"chicken\", 300);\n\n  // Report the completion of the task\n  bot.chat(\"1 chicken killed.\");\n}", "description": "async function killChickenWithIncreasedTime(bot) {\n    // async function killChickenWithIncreasedTime(bot) {\n    // The function is about killing a chicken with an increased exploration time limit. It explores the area to find a chicken within a certain distance. If a chicken is found, it equips a sword (if available) to kill the chicken. Otherwise, it uses bare hands. After killing the chicken, it reports the completion of the task.\n}\n}"}, "killThreeChickens": {"code": "async function killThreeChickens(bot) {\n  // Equip a weapon (preferably a sword) to kill the chickens\n  const sword = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_sword\"].id) || bot.inventory.findInventoryItem(mcData.itemsByName[\"wooden_sword\"].id);\n  if (sword) {\n    await bot.equip(sword, \"hand\");\n  } else {\n    bot.chat(\"No sword found, using bare hands.\");\n  }\n\n  // Explore the area to find 3 chickens\n  let chickens = [];\n  while (chickens.length < 3) {\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const nearbyChicken = bot.nearestEntity(entity => {\n        return entity.name === \"chicken\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      if (nearbyChicken && !chickens.includes(nearbyChicken)) {\n        chickens.push(nearbyChicken);\n        return chickens.length === 3 ? chickens : null;\n      }\n      return null;\n    });\n  }\n\n  // Kill each chicken one by one\n  for (const chicken of chickens) {\n    await killMob(bot, chicken.name, 300);\n  }\n\n  // Report the completion of the task\n  bot.chat(\"3 chickens killed.\");\n}", "description": "async function killThreeChickens(bot) {\n    // async function killThreeChickens(bot) {\n    // The function is about killing 3 chickens. First, it equips a sword to kill the chickens, and if there is no sword, it uses bare hands. Then, it explores the environment to find 3 chickens within a 32 block radius. Once 3 chickens are found, it kills each chicken one by one using the equipped weapon. Finally, it reports the completion of the task by sending a chat message.\n}\n}"}, "killThreeCows": {"code": "async function killThreeCows(bot) {\n  // Explore the area to find 3 cows\n  let cows = [];\n  while (cows.length < 3) {\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const nearbyCow = bot.nearestEntity(entity => {\n        return entity.name === \"cow\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      if (nearbyCow && !cows.includes(nearbyCow)) {\n        cows.push(nearbyCow);\n        return cows.length === 3 ? cows : null;\n      }\n      return null;\n    });\n  }\n\n  // Equip a weapon (preferably a sword) to kill the cows\n  const sword = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_sword\"].id) || bot.inventory.findInventoryItem(mcData.itemsByName[\"wooden_sword\"].id);\n  if (sword) {\n    await bot.equip(sword, \"hand\");\n  } else {\n    bot.chat(\"No sword found, using bare hands.\");\n  }\n\n  // Kill each cow one by one\n  for (const cow of cows) {\n    await killMob(bot, cow.name, 300);\n  }\n\n  // Report the completion of the task\n  bot.chat(\"3 cows killed.\");\n}", "description": "async function killThreeCows(bot) {\n    // async function killThreeCows(bot) {\n    // The function is about killing 3 cows. It explores the environment to find 3 cows within a certain distance. Once 3 cows are found, it equips a sword (if available) to kill the cows one by one. If no sword is found, it uses bare hands. After killing all 3 cows, it reports the completion of the task.\n}\n}"}, "killThreeSheep": {"code": "async function killThreeSheep(bot) {\n  // Equip a weapon (preferably a sword) to kill the sheep\n  const sword = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_sword\"].id) || bot.inventory.findInventoryItem(mcData.itemsByName[\"wooden_sword\"].id);\n  if (sword) {\n    await bot.equip(sword, \"hand\");\n  } else {\n    bot.chat(\"No sword found, using bare hands.\");\n  }\n\n  // Explore the area to find 3 sheep\n  let sheep = [];\n  while (sheep.length < 3) {\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const nearbySheep = bot.nearestEntity(entity => {\n        return entity.name === \"sheep\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      if (nearbySheep && !sheep.includes(nearbySheep)) {\n        sheep.push(nearbySheep);\n        return sheep.length === 3 ? sheep : null;\n      }\n      return null;\n    });\n  }\n\n  // Kill each sheep one by one\n  for (const singleSheep of sheep) {\n    await killMob(bot, singleSheep.name, 300);\n  }\n\n  // Report the completion of the task\n  bot.chat(\"3 sheep killed.\");\n}", "description": "async function killThreeSheep(bot) {\n    // async function killThreeSheep(bot) {\n    // The function is about killing 3 sheep. First, it equips a weapon (preferably a sword) to kill the sheep. Then, it explores the environment to find 3 sheep. Once 3 sheep are found, it kills each sheep one by one. Finally, it reports the completion of the task by sending a chat message.\n}\n}"}, "mineDeepslateOres": {"code": "async function mineDeepslateOres(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find and mine 1 deepslate_redstone_ore\n  await mineBlock(bot, \"deepslate_redstone_ore\", 1);\n  bot.chat(\"1 deepslate_redstone_ore mined.\");\n\n  // Find and mine 1 deepslate_gold_ore\n  await mineBlock(bot, \"deepslate_gold_ore\", 1);\n  bot.chat(\"1 deepslate_gold_ore mined.\");\n}", "description": "async function mineDeepslateOres(bot) {\n    // async function mineDeepslateOres(bot) {\n    // The function is about mining 1 deepslate_redstone_ore and 1 deepslate_gold_ore using an iron pickaxe. The function first equips the iron pickaxe in the hand. Then, it finds and mines 1 deepslate_redstone_ore and 1 deepslate_gold_ore using the mineBlock function. Finally, it sends a chat message indicating the number of ores mined.\n}\n}"}, "mineEightCobblestone": {"code": "async function mineEightCobblestone(bot) {\n  // Equip the wooden pickaxe\n  const woodenPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"wooden_pickaxe\"].id);\n  await bot.equip(woodenPickaxe, \"hand\");\n\n  // Find stone blocks\n  const stoneBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const stone = bot.findBlock({\n      matching: mcData.blocksByName[\"stone\"].id,\n      maxDistance: 32\n    });\n    return stone;\n  });\n\n  // Mine 8 cobblestone\n  await mineBlock(bot, \"stone\", 8);\n  bot.chat(\"8 cobblestone mined.\");\n}", "description": "async function mineEightCobblestone(bot) {\n    // async function mineEightCobblestone(bot) {\n    // The function is about mining 8 cobblestones using a wooden pickaxe. It equips the wooden pickaxe and explores the environment until finding a stone block. Once a stone block is found, it mines a total of 8 cobblestone blocks using the wooden pickaxe. Finally, it sends a chat message indicating that 8 cobblestones have been mined.\n}\n}"}, "mineFiveCoalOre": {"code": "async function mineFiveCoalOre(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find 5 coal ore blocks\n  const coalOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const coalOres = bot.findBlocks({\n      matching: mcData.blocksByName[\"coal_ore\"].id,\n      maxDistance: 32,\n      count: 5\n    });\n    return coalOres.length >= 5 ? coalOres : null;\n  });\n\n  // Mine the 5 coal ore blocks\n  await mineBlock(bot, \"coal_ore\", 5);\n  bot.chat(\"5 coal ore mined.\");\n}", "description": "async function mineFiveCoalOre(bot) {\n    // async function mineFiveCoalOre(bot) {\n    // The function is about mining 5 coal ore blocks using an iron pickaxe. First, equip the iron pickaxe in the hand. Next, explore the environment until finding 5 coal ore blocks. Once 5 coal ore blocks are found, mine them using the iron pickaxe and save the event of mining 5 coal ore blocks.\n}\n}"}, "mineFiveCopperOre": {"code": "async function mineFiveCopperOre(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find 5 copper ore blocks\n  const copperOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const copperOres = bot.findBlocks({\n      matching: mcData.blocksByName[\"copper_ore\"].id,\n      maxDistance: 32,\n      count: 5\n    });\n    return copperOres.length >= 5 ? copperOres : null;\n  });\n\n  // Mine the 5 copper ore blocks\n  await mineBlock(bot, \"copper_ore\", 5);\n  bot.chat(\"5 copper ore mined.\");\n}", "description": "async function mineFiveCopperOre(bot) {\n    // async function mineFiveCopperOre(bot) {\n    // The function is about mining 5 copper ore blocks using an iron pickaxe. First, equip the iron pickaxe in the hand. Next, explore the environment until finding 5 copper ore blocks. Once 5 copper ore blocks are found, mine them using the iron pickaxe and save the event of mining 5 copper ore.\n}\n}"}, "mineFourCoalOre": {"code": "async function mineFourCoalOre(bot) {\n  // Equip the stone pickaxe\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_pickaxe\"].id);\n  await bot.equip(stonePickaxe, \"hand\");\n\n  // Find and mine 4 coal ore blocks\n  await mineBlock(bot, \"coal_ore\", 4);\n  bot.chat(\"4 coal ore mined.\");\n}", "description": "async function mineFourCoalOre(bot) {\n    // async function mineFourCoalOre(bot) {\n    // The function is about mining 4 coal ore blocks using a stone pickaxe. The function equips the stone pickaxe in the hand and then mines 4 coal ore blocks. Once the mining is complete, the function sends a chat message indicating that 4 coal ore blocks have been mined.\n}\n}"}, "mineTenCobbledDeepslateBelowY0": {"code": "async function mineTenCobbledDeepslateBelowY0(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find cobbled_deepslate blocks below Y=0\n  const cobbledDeepslateBlocks = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n    const cobbledDeepslate = bot.findBlock({\n      matching: mcData.blocksByName[\"cobbled_deepslate\"].id,\n      maxDistance: 32,\n      position: pos => pos.y < 0\n    });\n    return cobbledDeepslate;\n  });\n\n  // Mine 10 cobbled_deepslate blocks\n  await mineBlock(bot, \"cobbled_deepslate\", 10);\n  bot.chat(\"10 cobbled_deepslate mined below Y=0.\");\n}", "description": "async function mineTenCobbledDeepslateBelowY0(bot) {\n    // async function mineTenCobbledDeepslateBelowY0(bot) {\n    // The function is about mining 10 cobbled_deepslate blocks below Y=0 using an iron pickaxe. First, equip the iron pickaxe in the hand. Next, explore the environment until finding a cobbled_deepslate block below Y=0. Once 10 cobbled_deepslate blocks are found, mine them using the iron pickaxe. Finally, a message is sent to the chat indicating that 10 cobbled_deepslate blocks have been mined below Y=0.\n}\n}"}, "mineThreeIronOre": {"code": "async function mineThreeIronOre(bot) {\n  // Equip the stone pickaxe\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_pickaxe\"].id);\n  await bot.equip(stonePickaxe, \"hand\");\n\n  // Find and mine 3 iron ore blocks\n  await mineBlock(bot, \"iron_ore\", 3);\n  bot.chat(\"3 iron ore mined.\");\n}", "description": "async function mineThreeIronOre(bot) {\n    // async function mineThreeIronOre(bot) {\n    // The function is about mining 3 iron ore blocks using a stone pickaxe. The function equips the stone pickaxe in the hand and then mines 3 iron ore blocks. Once the mining is complete, the function sends a chat message indicating that 3 iron ore blocks have been mined.\n}\n}"}, "obtainBirchLogs": {"code": "async function obtainBirchLogs(bot) {\n  // Check if there are enough birch logs in the inventory\n  const birchLogs = bot.inventory.count(mcData.itemsByName[\"birch_log\"].id);\n  const logsNeeded = 5 - birchLogs;\n  if (logsNeeded > 0) {\n    // Mine the required number of birch logs\n    await mineBlock(bot, \"birch_log\", logsNeeded);\n    bot.chat(\"5 birch logs obtained.\");\n  } else {\n    bot.chat(\"Already have 5 birch logs in the inventory.\");\n  }\n}", "description": "async function obtainBirchLogs(bot) {\n    // async function obtainBirchLogs(bot) {\n    // The function is about obtaining 5 birch logs. It checks if there are enough birch logs in the inventory and mines the required number of birch logs if necessary. Once 5 birch logs are obtained, it sends a chat message. If there are already 5 birch logs in the inventory, it sends a different chat message.\n}\n}"}, "openChestAndCheckContents": {"code": "async function openChestAndCheckContents(bot) {\n  const targetChestPosition = new Vec3(5, 61, 134);\n\n  // Find the chest at the specified position\n  const chestPosition = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const chest = bot.findBlock({\n      matching: mcData.blocksByName[\"chest\"].id,\n      maxDistance: 32,\n      position: targetChestPosition\n    });\n    return chest ? chest.position : null;\n  });\n\n  // Check the contents of the chest\n  await checkItemInsideChest(bot, chestPosition);\n  bot.chat(\"Chest at (5, 61, 134) opened and contents checked.\");\n}", "description": "async function openChestAndCheckContents(bot) {\n    // async function openChestAndCheckContents(bot) {\n    // The function is about finding a chest at a specified position, opening it, and checking its contents. It uses the `exploreUntil` helper function to find the chest and the `checkItemInsideChest` helper function to check the contents of the chest. The position of the chest is specified by `targetChestPosition`. Once the chest is found, the function checks its contents and sends a chat message indicating that the chest has been opened and its contents have been checked.\n}\n}"}, "plantOakSapling": {"code": "async function plantOakSapling(bot) {\n  // Find a suitable location to plant the oak sapling\n  const targetBlock = bot.findBlock({\n    matching: block => {\n      return block.name === \"grass_block\" || block.name === \"dirt\";\n    },\n    maxDistance: 32\n  });\n  if (!targetBlock) {\n    bot.chat(\"Could not find a suitable location to plant the oak sapling.\");\n    return;\n  }\n\n  // Go to the location\n  await bot.pathfinder.goto(new GoalBlock(targetBlock.position.x, targetBlock.position.y, targetBlock.position.z));\n\n  // Equip the oak sapling in the bot's hand\n  const oakSapling = bot.inventory.findInventoryItem(mcData.itemsByName[\"oak_sapling\"].id);\n  await bot.equip(oakSapling, \"hand\");\n\n  // Right-click on the ground to plant the oak sapling\n  await bot.activateBlock(targetBlock);\n\n  // Send a chat message to indicate the oak sapling has been planted\n  bot.chat(\"Oak sapling planted.\");\n}", "description": "async function plantOakSapling(bot) {\n    // async function plantOakSapling(bot) {\n    // The function is about finding a suitable location to plant an oak sapling, going to that location, equipping the oak sapling in the bot's hand, right-clicking on the ground to plant the oak sapling, and sending a chat message to indicate the oak sapling has been planted. If a suitable location cannot be found, the function will return without planting the oak sapling.\n}\n}"}, "smeltCopperOre": {"code": "async function smeltCopperOre(bot) {\n  // Check if there is a furnace in the inventory\n  const furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n\n  // If there is no furnace, craft one using cobblestone\n  if (!furnace) {\n    await craftItem(bot, \"furnace\", 1);\n  }\n\n  // Place the furnace near the player\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Find a copper ore block\n  const copperOre = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const copperOre = bot.findBlock({\n      matching: mcData.blocksByName[\"copper_ore\"].id,\n      maxDistance: 32\n    });\n    return copperOre;\n  });\n\n  // Mine the copper ore block\n  await mineBlock(bot, \"copper_ore\", 1);\n\n  // Smelt the raw copper using coal as fuel in the furnace\n  await smeltItem(bot, \"raw_copper\", \"coal\", 1);\n\n  // Collect the smelted copper ingot\n  bot.chat(\"1 copper ore smelted.\");\n}", "description": "async function smeltCopperOre(bot) {\n    // async function smeltCopperOre(bot) {\n    // The function is about smelting one copper ore block into a copper ingot using a furnace and coal as fuel. First, check if there is a furnace in the inventory. If not, craft one using cobblestone. Then, place the furnace near the player. Next, explore the environment until finding a copper ore block. Once a copper ore block is found, mine it and smelt the raw copper using coal as fuel in the furnace. Finally, collect the smelted copper ingot.\n}\n}"}, "smeltFiveRawCopper": {"code": "async function smeltFiveRawCopper(bot) {\n  // Find a suitable location to place the furnace\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n\n  // Place the furnace\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt 5 raw copper using coal as fuel\n  await smeltItem(bot, \"raw_copper\", \"coal\", 5);\n  bot.chat(\"5 raw copper smelted.\");\n}", "description": "async function smeltFiveRawCopper(bot) {\n    // async function smeltFiveRawCopper(bot) {\n    // The function is about smelting 5 raw copper using a furnace and coal as fuel. First, it finds a suitable location to place the furnace. Then, it places the furnace at that location. Finally, it smelts 5 raw copper using coal as fuel and sends a chat message indicating that 5 raw copper has been smelted.\n}\n}"}, "smeltFiveRawGold": {"code": "async function smeltFiveRawGold(bot) {\n  // Check if there is a furnace in the inventory\n  const furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n\n  // If there is no furnace, craft one using cobblestone\n  if (!furnace) {\n    await craftItem(bot, \"furnace\", 1);\n  }\n\n  // Place the furnace near the player\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt the 5 raw gold using coal as fuel in the furnace\n  await smeltItem(bot, \"raw_gold\", \"coal\", 5);\n\n  // Collect the smelted gold ingots\n  bot.chat(\"5 raw gold smelted.\");\n}", "description": "async function smeltFiveRawGold(bot) {\n    // async function smeltFiveRawGold(bot) {\n    // The function is about smelting 5 raw gold into gold ingots using a furnace and coal as fuel. If there is no furnace in the inventory, the bot will craft one using cobblestone. Then, the bot will place the furnace near the player and smelt the 5 raw gold using coal as fuel. Finally, the bot will collect the smelted gold ingots and print a message in the chat.\n}\n}"}, "smeltThreeRawCopper": {"code": "async function smeltThreeRawCopper(bot) {\n  // Find a suitable location to place the furnace\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n\n  // Place the furnace\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt 3 raw copper using coal as fuel\n  await smeltItem(bot, \"raw_copper\", \"coal\", 3);\n  bot.chat(\"3 raw copper smelted.\");\n}", "description": "async function smeltThreeRawCopper(bot) {\n    // async function smeltThreeRawCopper(bot) {\n    // The function is about smelting 3 raw copper using a furnace and coal as fuel. First, it finds a suitable location to place the furnace. Then, it places the furnace at that location. Finally, it smelts 3 raw copper using coal as fuel and saves the event of smelting 3 raw copper.\n}\n}"}, "waitAndEatCookedMutton": {"code": "async function waitAndEatCookedMutton(bot) {\n  // Wait until the bot's hunger is less than 20\n  while (bot.food >= 20) {\n    await bot.waitForTicks(20);\n  }\n\n  // Equip a cooked mutton in the bot's hand\n  const cookedMutton = bot.inventory.findInventoryItem(mcData.itemsByName[\"cooked_mutton\"].id);\n  await bot.equip(cookedMutton, \"hand\");\n\n  // Consume the cooked mutton\n  await bot.consume();\n  bot.chat(\"1 cooked mutton eaten.\");\n}", "description": "async function waitAndEatCookedMutton(bot) {\n    // async function waitAndEatCookedMutton(bot) {\n    // The function waits until the bot's hunger is less than 20, equips a cooked mutton in the bot's hand, consumes it, and then sends a chat message indicating that 1 cooked mutton has been eaten.\n}\n}"}, "checkWoodenShovel": {"code": "async function checkWoodenShovel(bot) {\n  const woodenShovel = bot.inventory.findInventoryItem(mcData.itemsByName[\"wooden_shovel\"].id);\n  if (woodenShovel) {\n    bot.chat(\"Wooden shovel already in inventory. Task completed.\");\n  } else {\n    bot.chat(\"Wooden shovel not found in inventory.\");\n  }\n}", "description": "async function checkWoodenShovel(bot) {\n    // async function checkWoodenShovel(bot) {\n    // The function checks if a wooden shovel is in the inventory and sends a chat message indicating whether it is found or not.\n}\n}"}, "collectAlliumWithShears": {"code": "async function collectAlliumWithShears(bot) {\n  // Find an allium flower nearby\n  const allium = bot.findBlock({\n    matching: mcData.blocksByName[\"allium\"].id,\n    maxDistance: 32\n  });\n  if (!allium) {\n    bot.chat(\"No allium flower found nearby.\");\n    return;\n  }\n\n  // Go near the allium flower\n  await bot.pathfinder.goto(new GoalGetToBlock(allium.position.x, allium.position.y, allium.position.z));\n\n  // Equip the shears\n  const shears = bot.inventory.findInventoryItem(mcData.itemsByName[\"shears\"].id);\n  await bot.equip(shears, \"hand\");\n\n  // Use the shears on the allium flower to collect it\n  await bot.useOn(allium);\n  bot.chat(\"Collected 1 allium using shears.\");\n}", "description": "async function collectAlliumWithShears(bot) {\n    // async function collectAlliumWithShears(bot) {\n    // The function is about collecting an allium flower using shears. It first finds an allium flower nearby and goes near it. Then, it equips the shears and uses them to collect the allium flower. Finally, it sends a chat message indicating that 1 allium has been collected.\n}\n}"}, "cookSevenRawPorkchops": {"code": "async function cookSevenRawPorkchops(bot) {\n  // Check if there is a furnace in the inventory or nearby\n  let furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n  if (!furnace) {\n    furnace = bot.findBlock({\n      matching: mcData.blocksByName[\"furnace\"].id,\n      maxDistance: 32\n    });\n  }\n\n  // Place the furnace near the player if it's not already placed\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  const furnaceBlock = bot.blockAt(furnacePosition);\n  if (!furnaceBlock || furnaceBlock.name !== \"furnace\") {\n    await placeItem(bot, \"furnace\", furnacePosition);\n  }\n\n  // Check if there are 7 raw porkchops in the inventory\n  let rawPorkchops = bot.inventory.findInventoryItem(mcData.itemsByName[\"porkchop\"].id);\n  if (!rawPorkchops || rawPorkchops.count < 7) {\n    // Collect raw porkchops by killing pigs\n    const pigsToKill = 7 - (rawPorkchops ? rawPorkchops.count : 0);\n    for (let i = 0; i < pigsToKill; i++) {\n      await killMob(bot, \"pig\", 300);\n    }\n    rawPorkchops = bot.inventory.findInventoryItem(mcData.itemsByName[\"porkchop\"].id);\n  }\n\n  // Smelt 7 raw porkchops using coal as fuel\n  await smeltItem(bot, \"porkchop\", \"coal\", 7);\n  bot.chat(\"7 raw porkchops cooked.\");\n}", "description": "async function cookSevenRawPorkchops(bot) {\n    // async function cookSevenRawPorkchops(bot) {\n    // The function is about cooking 7 raw porkchops using a furnace and coal as fuel. First, it checks if there is a furnace in the inventory or nearby. If not, it places one near the player. Then, it checks if there are 7 raw porkchops in the inventory. If not, it kills pigs to collect them. Finally, it smelts 7 raw porkchops using coal as fuel and saves the event of cooking 7 raw porkchops.\n}\n}"}, "craftBed": {"code": "async function craftBed(bot) {\n  // Check if there is a crafting table in the inventory or nearby\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Mine oak logs and craft oak planks\n      await mineBlock(bot, \"oak_log\", 1);\n      await craftItem(bot, \"oak_planks\", 2);\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Find a suitable position to place the crafting table if it's not already placed\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  const tableBlock = bot.blockAt(tablePosition);\n  if (!tableBlock || tableBlock.name !== \"crafting_table\") {\n    if (tableBlock && tableBlock.name === \"lily_of_the_valley\") {\n      // Find a different position to place the crafting table\n      const newPosition = bot.entity.position.offset(-1, 0, 0);\n      await placeItem(bot, \"crafting_table\", newPosition);\n    } else {\n      await placeItem(bot, \"crafting_table\", tablePosition);\n    }\n  }\n\n  // Check if there are enough wool blocks in the inventory\n  let wool = bot.inventory.findInventoryItem(mcData.itemsByName[\"white_wool\"].id);\n  if (!wool || wool.count < 3) {\n    // Find a sheep and use shears to collect wool\n    bot.chat(\"Finding a sheep to collect wool...\");\n    const sheep = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const sheep = bot.nearestEntity(entity => {\n        return entity.name === \"sheep\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return sheep;\n    });\n    await bot.pathfinder.goto(new GoalGetToBlock(sheep.position.x, sheep.position.y, sheep.position.z));\n    await bot.equip(mcData.itemsByName[\"shears\"].id, \"hand\");\n    await bot.useOn(sheep);\n    wool = bot.inventory.findInventoryItem(mcData.itemsByName[\"white_wool\"].id);\n  }\n\n  // Check if there are enough wooden planks in the inventory\n  let oakPlanks = bot.inventory.findInventoryItem(mcData.itemsByName[\"oak_planks\"].id);\n  if (!oakPlanks || oakPlanks.count < 3) {\n    // Mine oak logs and craft oak planks\n    bot.chat(\"Mining oak logs to craft oak planks...\");\n    await mineBlock(bot, \"oak_log\", 1);\n    bot.chat(\"Crafting oak planks...\");\n    await craftItem(bot, \"oak_planks\", 1);\n  }\n\n  // Craft a bed using the wool blocks and wooden planks\n  bot.chat(\"Crafting a bed...\");\n  await craftItem(bot, \"white_bed\", 1);\n  bot.chat(\"Bed crafted.\");\n}", "description": "async function craftBed(bot) {\n    // async function craftBed(bot) {\n    // The function crafts a bed using wool blocks and wooden planks. It first checks if there is a crafting table nearby, and if not, it mines oak logs and crafts a crafting table. It then finds a suitable position to place the crafting table and places it. Next, it checks if there are enough wool blocks and wooden planks in the inventory, and if not, it finds a sheep to collect wool and mines oak logs to craft oak planks. Finally, it crafts a bed using the collected wool blocks and wooden planks.\n}\n}"}, "craftDiamondPickaxe": {"code": "async function craftDiamondPickaxe(bot) {\n  // Check if there is a crafting table in the inventory or nearby\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Place the crafting table near the player if it's not already placed\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  const tableBlock = bot.blockAt(tablePosition);\n  if (!tableBlock || tableBlock.name !== \"crafting_table\") {\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  }\n\n  // Craft a diamond pickaxe using the crafting table, 3 diamonds, and 2 sticks\n  await craftItem(bot, \"diamond_pickaxe\", 1);\n  bot.chat(\"Diamond pickaxe crafted.\");\n}", "description": "async function craftDiamondPickaxe(bot) {\n    // async function craftDiamondPickaxe(bot) {\n    // The function crafts a diamond pickaxe using a crafting table, 3 diamonds, and 2 sticks. It first checks if there is a crafting table in the inventory or nearby, and if not, crafts one using oak planks. Then it places the crafting table near the player if it's not already placed. Finally, it crafts a diamond pickaxe using the crafting table and announces the successful crafting in the chat.\n}\n}"}, "craftIronBoots": {"code": "async function craftIronBoots(bot) {\n  // Check if there are enough iron ingots in the inventory\n  let ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  if (!ironIngots || ironIngots.count < 4) {\n    const chestPosition = new Vec3(-17, 1, 17);\n    await getItemFromChest(bot, chestPosition, {\n      \"iron_ingot\": 4 - (ironIngots ? ironIngots.count : 0)\n    });\n    ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  }\n\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Place the crafting table near the player if it's not already placed\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  const tableBlock = bot.blockAt(tablePosition);\n  if (!tableBlock || tableBlock.name !== \"crafting_table\") {\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  }\n\n  // Craft iron boots using the crafting table and 4 iron ingots\n  await craftItem(bot, \"iron_boots\", 1);\n  bot.chat(\"Iron boots crafted.\");\n}", "description": "async function craftIronBoots(bot) {\n    // async function craftIronBoots(bot) {\n    // The function crafts a pair of iron boots. It checks if there are enough iron ingots in the inventory, and if not, it retrieves them from a nearby chest. It then checks if there is a crafting table nearby or in the inventory, and if not, it crafts one using oak planks. The function places the crafting table near the player if it's not already placed. Finally, it crafts iron boots using the crafting table and 4 iron ingots.\n}\n}"}, "craftIronBootsWithSuitablePosition": {"code": "async function findSuitablePosition(bot, startPosition) {\n  const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n  for (const offset of offsets) {\n    const position = startPosition.offset(offset.x, offset.y, offset.z);\n    const block = bot.blockAt(position);\n    if (block.name === \"grass_block\" || block.name === \"dirt\") {\n      return position;\n    }\n  }\n  return null;\n}\n\nasync function craftIronBootsWithSuitablePosition(bot) {\n  // Check if there are enough iron ingots in the inventory\n  let ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  if (!ironIngots || ironIngots.count < 4) {\n    const chestPosition = new Vec3(-17, 1, 17);\n    await getItemFromChest(bot, chestPosition, {\n      \"iron_ingot\": 4 - (ironIngots ? ironIngots.count : 0)\n    });\n    ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  }\n\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Find a suitable position to place the crafting table\n  const startPosition = bot.entity.position.floored();\n  const tablePosition = await findSuitablePosition(bot, startPosition);\n\n  // Place the crafting table at the suitable position\n  if (tablePosition) {\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  } else {\n    bot.chat(\"Cannot find a suitable position to place the crafting table.\");\n    return;\n  }\n\n  // Craft iron boots using the crafting table and 4 iron ingots\n  await craftItem(bot, \"iron_boots\", 1);\n  bot.chat(\"Iron boots crafted.\");\n}", "description": "async function craftIronBootsWithSuitablePosition(bot) {\n    // async function craftIronBootsWithSuitablePosition(bot) {\n    // The function is about crafting iron boots using a crafting table and 4 iron ingots. First, check if there are enough iron ingots in the inventory. If not, get them from a chest. Then, check if there is a crafting table nearby or in the inventory. If not, craft one using oak planks. Next, find a suitable position to place the crafting table and place it there. Finally, craft the iron boots using the crafting table and 4 iron ingots.\n}\n}"}, "craftIronHelmetV2": {"code": "async function craftIronHelmet(bot) {\n  // Check if there are enough iron ingots in the inventory\n  let ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  if (!ironIngots || ironIngots.count < 5) {\n    const chestPosition = new Vec3(-17, 1, 17);\n    await getItemFromChest(bot, chestPosition, {\n      \"iron_ingot\": 5 - (ironIngots ? ironIngots.count : 0)\n    });\n    ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  }\n\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Place the crafting table near the player if it's not already placed\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  const tableBlock = bot.blockAt(tablePosition);\n  if (!tableBlock || tableBlock.name !== \"crafting_table\") {\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  }\n\n  // Craft an iron helmet using the crafting table and 5 iron ingots\n  await craftItem(bot, \"iron_helmet\", 1);\n  bot.chat(\"Iron helmet crafted.\");\n}", "description": "async function craftIronHelmetV2(bot) {\n    // async function craftIronHelmet(bot) {\n    // The function crafts an iron helmet using 5 iron ingots. It checks if there are enough iron ingots in the inventory, and if not, it retrieves them from a nearby chest. It then checks if there is a crafting table nearby or in the inventory, and if not, it crafts one using oak planks. The function places the crafting table near the player if it's not already placed. Finally, it crafts an iron helmet using the crafting table and 5 iron ingots.\n}\n}"}, "craftIronHelmetWithSuitablePosition": {"code": "async function findSuitablePosition(bot, startPosition) {\n  const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n  for (const offset of offsets) {\n    const position = startPosition.offset(offset.x, offset.y, offset.z);\n    const block = bot.blockAt(position);\n    if (block.name === \"grass_block\" || block.name === \"dirt\") {\n      return position;\n    }\n  }\n  return null;\n}\n\nasync function craftIronHelmetWithSuitablePosition(bot) {\n  // Check if there is a crafting table in the inventory or nearby\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Find a suitable position to place the crafting table\n  const startPosition = bot.entity.position.floored();\n  const tablePosition = await findSuitablePosition(bot, startPosition);\n\n  // Place the crafting table at the suitable position\n  if (tablePosition) {\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  } else {\n    bot.chat(\"Cannot find a suitable position to place the crafting table.\");\n    return;\n  }\n\n  // Craft an iron helmet using the crafting table and 5 iron ingots\n  await craftItem(bot, \"iron_helmet\", 1);\n  bot.chat(\"Iron helmet crafted.\");\n}", "description": "async function craftIronHelmetWithSuitablePosition(bot) {\n    // async function craftIronHelmetWithSuitablePosition(bot) {\n    // The function is about crafting an iron helmet using a crafting table and 5 iron ingots. First, it checks if there is a crafting table in the inventory or nearby. If not, it crafts a crafting table using oak planks. Then, it finds a suitable position to place the crafting table and places it there. After that, it crafts an iron helmet using the crafting table and 5 iron ingots. Finally, it sends a chat message indicating that the iron helmet has been crafted.\n}\n}"}, "craftIronLeggingsWithSmelting": {"code": "async function craftIronLeggingsWithSmelting(bot) {\n  // Check if there are enough iron ingots in the inventory\n  let ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  if (!ironIngots || ironIngots.count < 7) {\n    const chestPosition = new Vec3(-17, 1, 17);\n    await getItemFromChest(bot, chestPosition, {\n      \"iron_ingot\": 7 - (ironIngots ? ironIngots.count : 0),\n      \"raw_iron\": 7 - (ironIngots ? ironIngots.count : 0)\n    });\n    ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n    const rawIron = bot.inventory.findInventoryItem(mcData.itemsByName[\"raw_iron\"].id);\n\n    // Check if there is a furnace nearby or in the inventory\n    let furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n    if (!furnace) {\n      furnace = bot.findBlock({\n        matching: mcData.blocksByName[\"furnace\"].id,\n        maxDistance: 32\n      });\n      if (!furnace) {\n        // Craft a furnace using cobblestone\n        await mineBlock(bot, \"stone\", 8);\n        await craftItem(bot, \"furnace\", 1);\n        furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n      }\n    }\n\n    // Place the furnace near the player if it's not already placed\n    const furnacePosition = bot.entity.position.offset(1, 0, 0);\n    const furnaceBlock = bot.blockAt(furnacePosition);\n    if (!furnaceBlock || furnaceBlock.name !== \"furnace\") {\n      await placeItem(bot, \"furnace\", furnacePosition);\n    }\n\n    // Smelt the raw iron using the furnace and coal as fuel\n    if (rawIron) {\n      await smeltItem(bot, \"raw_iron\", \"coal\", rawIron.count);\n      ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n    }\n  }\n\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Place the crafting table near the player if it's not already placed\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  const tableBlock = bot.blockAt(tablePosition);\n  if (!tableBlock || tableBlock.name !== \"crafting_table\") {\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  }\n\n  // Craft iron leggings using the crafting table and 7 iron ingots\n  await craftItem(bot, \"iron_leggings\", 1);\n  bot.chat(\"Iron leggings crafted.\");\n}", "description": "async function craftIronLeggingsWithSmelting(bot) {\n    // async function craftIronLeggingsWithSmelting(bot) {\n    // The function crafts iron leggings using 7 iron ingots. If there are not enough iron ingots in the inventory, it gets them from a chest and smelts them using a furnace and coal as fuel. If there is no furnace nearby, it crafts one using cobblestone. If there is no crafting table nearby, it crafts one using oak planks. Finally, it crafts the iron leggings using the crafting table and places it near the player.\n}\n}"}, "craftIronPickaxeWithSmelting": {"code": "async function craftIronPickaxeWithSmelting(bot) {\n  // Check if there are enough iron ingots in the inventory\n  let ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  if (!ironIngots || ironIngots.count < 3) {\n    // Mine one more iron ore\n    await mineBlock(bot, \"iron_ore\", 1);\n  }\n\n  // Check if there is a furnace in the inventory or nearby\n  let furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n  if (!furnace) {\n    furnace = bot.findBlock({\n      matching: mcData.blocksByName[\"furnace\"].id,\n      maxDistance: 32\n    });\n    if (!furnace) {\n      // Craft a furnace using cobblestone\n      await mineBlock(bot, \"stone\", 8);\n      await craftItem(bot, \"furnace\", 1);\n      furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n    }\n  }\n\n  // Place the furnace near the player if it's not already placed\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  const furnaceBlock = bot.blockAt(furnacePosition);\n  if (!furnaceBlock || furnaceBlock.name !== \"furnace\") {\n    await placeItem(bot, \"furnace\", furnacePosition);\n  }\n\n  // Smelt the iron ore using the furnace and coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 1);\n  ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n\n  // Check if there are enough sticks in the inventory\n  let sticks = bot.inventory.findInventoryItem(mcData.itemsByName[\"stick\"].id);\n  if (!sticks || sticks.count < 2) {\n    // Craft an extra stick using wooden planks\n    await craftItem(bot, \"stick\", 1);\n    sticks = bot.inventory.findInventoryItem(mcData.itemsByName[\"stick\"].id);\n  }\n\n  // Check if there is a crafting table in the inventory or nearby\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Place the crafting table near the player if it's not already placed\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  const tableBlock = bot.blockAt(tablePosition);\n  if (!tableBlock || tableBlock.name !== \"crafting_table\") {\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  }\n\n  // Craft an iron pickaxe using the crafting table, 3 iron ingots, and 2 sticks\n  await craftItem(bot, \"iron_pickaxe\", 1);\n  bot.chat(\"Iron pickaxe crafted.\");\n}", "description": "async function craftIronPickaxeWithSmelting(bot) {\n    // async function craftIronPickaxeWithSmelting(bot) {\n    // The function is about crafting an iron pickaxe using smelting and crafting table. It checks if there are enough iron ingots in the inventory, and if not, it mines one more iron ore. It also checks if there is a furnace and a crafting table in the inventory or nearby, and if not, it crafts them. Then it places the furnace and crafting table near the player if they are not already placed. After that, it smelts the iron ore using the furnace and coal as fuel, and crafts an iron pickaxe using the crafting table, 3 iron ingots, and 2 sticks. Finally, it sends a chat message indicating that the iron pickaxe has been crafted.\n}\n}"}, "craftIronSwordWithChest": {"code": "async function craftIronSwordWithChest(bot) {\n  // Check if there are enough iron ingots and sticks in the inventory\n  let ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n  let sticks = bot.inventory.findInventoryItem(mcData.itemsByName[\"stick\"].id);\n\n  // If not, get the required items from the chest\n  if (!ironIngots || ironIngots.count < 2 || !sticks || sticks.count < 1) {\n    const chestPosition = new Vec3(-17, 1, 17);\n    await getItemFromChest(bot, chestPosition, {\n      \"iron_ingot\": 2,\n      \"stick\": 1\n    });\n    ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_ingot\"].id);\n    sticks = bot.inventory.findInventoryItem(mcData.itemsByName[\"stick\"].id);\n  }\n\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    craftingTable = bot.findBlock({\n      matching: mcData.blocksByName[\"crafting_table\"].id,\n      maxDistance: 32\n    });\n    if (!craftingTable) {\n      // Craft a crafting table using oak planks\n      await craftItem(bot, \"crafting_table\", 1);\n    }\n  }\n\n  // Place the crafting table near the player if it's not already placed\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  const tableBlock = bot.blockAt(tablePosition);\n  if (!tableBlock || tableBlock.name !== \"crafting_table\") {\n    await placeItem(bot, \"crafting_table\", tablePosition);\n  }\n\n  // Craft an iron sword using the crafting table, 2 iron ingots, and 1 stick\n  await craftItem(bot, \"iron_sword\", 1);\n  bot.chat(\"Iron sword crafted.\");\n}", "description": "async function craftIronSwordWithChest(bot) {\n    // async function craftIronSwordWithChest(bot) {\n    // The function crafts an iron sword using 2 iron ingots and 1 stick. If the required items are not in the inventory, the bot retrieves them from a chest. If there is no crafting table nearby, the bot crafts one using oak planks. The bot places the crafting table near the player if it's not already placed. Finally, the bot crafts an iron sword using the crafting table and the required items.\n}\n}"}, "craftWoodenAxe": {"code": "async function craftWoodenAxe(bot) {\n  // Check if there is a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    // Craft a crafting table using oak planks\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Place the crafting table near the player\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", tablePosition);\n\n  // Check if there are enough oak planks in the inventory\n  const oakPlanks = bot.inventory.findInventoryItem(mcData.itemsByName[\"oak_planks\"].id);\n  if (!oakPlanks || oakPlanks.count < 3) {\n    // Craft oak planks using oak logs\n    await craftItem(bot, \"oak_planks\", 2); // Craft 2 times to get 4 oak planks\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.findInventoryItem(mcData.itemsByName[\"stick\"].id);\n  if (!sticks || sticks.count < 2) {\n    // Craft sticks using oak planks\n    await craftItem(bot, \"stick\", 1);\n  }\n\n  // Craft a wooden axe using oak planks and sticks\n  await craftItem(bot, \"wooden_axe\", 1);\n  bot.chat(\"Wooden axe crafted.\");\n}", "description": "async function craftWoodenAxe(bot) {\n    // async function craftWoodenAxe(bot) {\n    // The function crafts a wooden axe using oak planks and sticks. It first checks if there is a crafting table in the inventory, and if not, crafts one. Then it places the crafting table near the player. Next, it checks if there are enough oak planks and sticks in the inventory, and if not, crafts them. Finally, it crafts a wooden axe using the oak planks and sticks, and sends a chat message indicating that the wooden axe has been crafted.\n}\n}"}, "craftWoodenShovel": {"code": "async function craftWoodenShovel(bot) {\n  // Check if there is a crafting table in the inventory\n  const craftingTable = bot.inventory.findInventoryItem(mcData.itemsByName[\"crafting_table\"].id);\n  if (!craftingTable) {\n    // Craft a crafting table using oak logs\n    await craftCraftingTable(bot);\n  }\n\n  // Place the crafting table near the player\n  const tablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", tablePosition);\n\n  // Check if there are enough oak planks in the inventory\n  const oakPlanks = bot.inventory.findInventoryItem(mcData.itemsByName[\"oak_planks\"].id);\n  if (!oakPlanks || oakPlanks.count < 2) {\n    // Craft oak planks using oak logs\n    await craftItem(bot, \"oak_planks\", 1); // Craft 1 time to get 2 oak planks\n  }\n\n  // Check if there are enough sticks in the inventory\n  const sticks = bot.inventory.findInventoryItem(mcData.itemsByName[\"stick\"].id);\n  if (!sticks || sticks.count < 1) {\n    // Craft sticks using oak planks\n    await craftItem(bot, \"stick\", 1);\n  }\n\n  // Craft a wooden shovel using oak planks and sticks\n  await craftItem(bot, \"wooden_shovel\", 1);\n  bot.chat(\"Wooden shovel crafted.\");\n}", "description": "async function craftWoodenShovel(bot) {\n    // async function craftWoodenShovel(bot) {\n    // The function crafts a wooden shovel using oak planks and sticks. It first checks if there is a crafting table in the inventory, and if not, crafts one. Then it places the crafting table near the player. Next, it checks if there are enough oak planks and sticks in the inventory, and if not, crafts them. Finally, it crafts a wooden shovel using the oak planks and sticks, and sends a chat message indicating that the wooden shovel has been crafted.\n}\n}"}, "eatCookedChicken": {"code": "async function eatCookedChicken(bot) {\n  // Check if the bot has at least 1 cooked chicken in its inventory\n  const cookedChicken = bot.inventory.findInventoryItem(mcData.itemsByName[\"cooked_chicken\"].id);\n  if (cookedChicken) {\n    // Equip the cooked chicken in the main hand\n    await bot.equip(cookedChicken, \"hand\");\n\n    // Consume the cooked chicken\n    await bot.consume();\n    bot.chat(\"Ate 1 cooked chicken.\");\n  } else {\n    bot.chat(\"No cooked chicken in inventory.\");\n  }\n}", "description": "async function eatCookedChicken(bot) {\n    // async function eatCookedChicken(bot) {\n    // The function is about eating a cooked chicken if it exists in the bot's inventory. If the bot has at least 1 cooked chicken, it will equip it in the main hand and consume it. Otherwise, it will output a message saying that there is no cooked chicken in the inventory.\n}\n}"}, "eatOneCookedPorkchop": {"code": "async function eatCookedPorkchop(bot) {\n  // Check if the bot has at least 1 cooked porkchop in its inventory\n  const cookedPorkchop = bot.inventory.findInventoryItem(mcData.itemsByName[\"cooked_porkchop\"].id);\n  if (cookedPorkchop) {\n    // Equip the cooked porkchop in the main hand\n    await bot.equip(cookedPorkchop, \"hand\");\n\n    // Consume the cooked porkchop\n    await bot.consume();\n    bot.chat(\"Ate 1 cooked porkchop.\");\n  } else {\n    bot.chat(\"No cooked porkchop in inventory.\");\n  }\n}\n\nasync function eatOneCookedPorkchop(bot) {\n  await eatCookedPorkchop(bot);\n}", "description": "async function eatOneCookedPorkchop(bot) {\n    // async function eatOneCookedPorkchop(bot) {\n    // The function is about eating a cooked porkchop if it exists in the bot's inventory. If the cooked porkchop is available, it will be equipped in the main hand and consumed. If there is no cooked porkchop in the inventory, the bot will send a message saying so.\n}\n}"}, "equipIronHelmetAndBoots": {"code": "async function equipIronHelmetAndBoots(bot) {\n  // Find the iron helmet in the bot's inventory\n  const ironHelmet = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_helmet\"].id);\n\n  // Equip the iron helmet in the \"head\" slot\n  if (ironHelmet) {\n    await bot.equip(ironHelmet, \"head\");\n    bot.chat(\"Iron helmet equipped.\");\n  } else {\n    bot.chat(\"No iron helmet found in inventory.\");\n  }\n\n  // Find the iron boots in the bot's inventory\n  const ironBoots = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_boots\"].id);\n\n  // Equip the iron boots in the \"feet\" slot\n  if (ironBoots) {\n    await bot.equip(ironBoots, \"feet\");\n    bot.chat(\"Iron boots equipped.\");\n  } else {\n    bot.chat(\"No iron boots found in inventory.\");\n  }\n}", "description": "async function equipIronHelmetAndBoots(bot) {\n    // async function equipIronHelmetAndBoots(bot) {\n    // The function equips an iron helmet and iron boots on the bot if they are available in the inventory. The iron helmet is equipped in the \"head\" slot and the iron boots are equipped in the \"feet\" slot. If either item is not found in the inventory, a message is sent to the chat.\n}\n}"}, "equipIronLeggings": {"code": "async function equipIronLeggings(bot) {\n  // Find the iron leggings in the bot's inventory\n  const ironLeggings = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_leggings\"].id);\n\n  // Equip the iron leggings in the \"legs\" slot\n  if (ironLeggings) {\n    await bot.equip(ironLeggings, \"legs\");\n    bot.chat(\"Iron leggings equipped.\");\n  } else {\n    bot.chat(\"No iron leggings found in inventory.\");\n  }\n}", "description": "async function equipIronLeggings(bot) {\n    // async function equipIronLeggings(bot) {\n    // The function is about equipping iron leggings in the \"legs\" slot of the bot's armor. It first finds the iron leggings in the bot's inventory and then equips them in the \"legs\" slot. If the iron leggings are not found in the inventory, it sends a message saying so.\n}\n}"}, "findCookAndEatChicken": {"code": "async function findCookAndEatChicken(bot) {\n  // Check if the bot has at least 1 cooked chicken in its inventory\n  let cookedChicken = bot.inventory.findInventoryItem(mcData.itemsByName[\"cooked_chicken\"].id);\n  if (cookedChicken) {\n    // Eat the cooked chicken\n    await eatCookedChicken(bot);\n  } else {\n    // Check if there is raw chicken in the inventory or in the nearby chest\n    let rawChicken = bot.inventory.findInventoryItem(mcData.itemsByName[\"chicken\"].id);\n    if (!rawChicken) {\n      const chestPosition = new Vec3(-17, 1, 17);\n      await getItemFromChest(bot, chestPosition, {\n        \"chicken\": 1\n      });\n      rawChicken = bot.inventory.findInventoryItem(mcData.itemsByName[\"chicken\"].id);\n    }\n\n    // If there is still no raw chicken, explore the area to find and kill a chicken\n    if (!rawChicken) {\n      await killMob(bot, \"chicken\", 300);\n      rawChicken = bot.inventory.findInventoryItem(mcData.itemsByName[\"chicken\"].id);\n    }\n\n    // Cook the raw chicken into cooked chicken using a furnace\n    if (rawChicken) {\n      await smeltItem(bot, \"chicken\", \"coal\", 1);\n      cookedChicken = bot.inventory.findInventoryItem(mcData.itemsByName[\"cooked_chicken\"].id);\n    }\n\n    // Eat the cooked chicken if available\n    if (cookedChicken) {\n      await eatCookedChicken(bot);\n    } else {\n      bot.chat(\"No cooked chicken available.\");\n    }\n  }\n}", "description": "async function findCookAndEatChicken(bot) {\n    // async function findCookAndEatChicken(bot) {\n    // The function is about finding and eating cooked chicken. If the bot already has cooked chicken, it will eat it. Otherwise, it will check if there is raw chicken in the inventory or in a nearby chest. If there is no raw chicken, it will explore the area to find and kill a chicken. Once raw chicken is obtained, it will be cooked into cooked chicken using a furnace. If cooked chicken is available, it will be eaten, otherwise, it will output a message saying that there is no cooked chicken available.\n}\n}"}, "killOneCreeper": {"code": "async function killOneCreeper(bot) {\n  // Equip the iron sword\n  const ironSword = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_sword\"].id);\n  await bot.equip(ironSword, \"hand\");\n\n  // Explore until finding a creeper\n  const creeper = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const creeper = bot.nearestEntity(entity => {\n      return entity.name === \"creeper\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return creeper;\n  });\n  if (creeper) {\n    // Attack the creeper while maintaining a safe distance\n    await killMob(bot, \"creeper\", 300);\n    bot.chat(\"Killed 1 creeper.\");\n  } else {\n    bot.chat(\"Could not find a creeper.\");\n  }\n}", "description": "async function killOneCreeper(bot) {\n    // async function killOneCreeper(bot) {\n    // The function is about equipping an iron sword and killing one creeper. First, equip the iron sword in the hand. Next, explore the environment until finding a creeper within 32 blocks. Once a creeper is found, attack the creeper while maintaining a safe distance. Finally, the function will output a message indicating whether a creeper was killed or not.\n}\n}"}, "killOneSkeletonWithBow": {"code": "async function killOneSkeletonWithBow(bot) {\n  // Check if the bot has a bow and arrows in the inventory\n  const bow = bot.inventory.findInventoryItem(mcData.itemsByName[\"bow\"].id);\n  const arrows = bot.inventory.findInventoryItem(mcData.itemsByName[\"arrow\"].id);\n\n  // Explore until finding a skeleton\n  const skeleton = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const skeleton = bot.nearestEntity(entity => {\n      return entity.name === \"skeleton\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return skeleton;\n  });\n  if (skeleton) {\n    if (bow && arrows && arrows.count > 0) {\n      // Equip the bow and attack the skeleton from a distance\n      await bot.equip(bow, \"hand\");\n      await bot.lookAt(skeleton.position);\n      await bot.activateItem();\n      bot.chat(\"Attacked skeleton with bow and arrow.\");\n    } else {\n      // Equip the stone sword and attack the skeleton\n      const stoneSword = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_sword\"].id);\n      await bot.equip(stoneSword, \"hand\");\n      await killMob(bot, \"skeleton\", 300);\n      bot.chat(\"Killed 1 skeleton.\");\n    }\n  } else {\n    bot.chat(\"Could not find a skeleton.\");\n  }\n}", "description": "async function killOneSkeletonWithBow(bot) {\n    // async function killOneSkeletonWithBow(bot) {\n    // The function is about killing a single skeleton using either a bow and arrow or a stone sword. First, it checks if the bot has a bow and arrows in the inventory. Then, it explores the environment until finding a skeleton within 32 blocks. If a skeleton is found, it equips either the bow or the stone sword and attacks the skeleton. If the bot has a bow and arrows, it attacks the skeleton from a distance. Otherwise, it attacks the skeleton with the stone sword.\n}\n}"}, "mineFiveDeepslateRedstoneOres": {"code": "async function mineFiveDeepslateRedstoneOres(bot) {\n  // Equip the diamond pickaxe\n  const diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"diamond_pickaxe\"].id);\n  await bot.equip(diamondPickaxe, \"hand\");\n\n  // Explore the underground area to find deepslate_redstone_ore\n  const deepslateRedstoneOres = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const deepslate_redstone_ores = bot.findBlocks({\n      matching: mcData.blocksByName[\"deepslate_redstone_ore\"].id,\n      maxDistance: 32,\n      count: 5\n    });\n    return deepslate_redstone_ores.length >= 5 ? deepslate_redstone_ores : null;\n  });\n\n  // Mine 5 deepslate_redstone_ore using the equipped diamond_pickaxe\n  if (deepslateRedstoneOres) {\n    await mineBlock(bot, \"deepslate_redstone_ore\", 5);\n    bot.chat(\"5 deepslate redstone ores mined.\");\n  } else {\n    bot.chat(\"Could not find 5 deepslate redstone ores.\");\n  }\n}", "description": "async function mineFiveDeepslateRedstoneOres(bot) {\n    // async function mineFiveDeepslateRedstoneOres(bot) {\n    // The function is about mining 5 deepslate_redstone_ore blocks using a diamond pickaxe. The function equips the diamond pickaxe and explores the underground area to find deepslate_redstone_ore blocks. Once 5 deepslate_redstone_ore blocks are found, the function mines them using the diamond pickaxe. If 5 deepslate_redstone_ore blocks are not found, the function outputs a message indicating that it could not find them.\n}\n}"}, "mineFiveIronOresV2": {"code": "async function mineFiveIronOres(bot) {\n  // Equip the stone pickaxe\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_pickaxe\"].id);\n  await bot.equip(stonePickaxe, \"hand\");\n\n  // Explore until finding an iron ore block\n  const ironOre = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const iron_ore = bot.findBlock({\n      matching: mcData.blocksByName[\"iron_ore\"].id,\n      maxDistance: 32\n    });\n    return iron_ore;\n  });\n\n  // Mine 5 iron ore blocks\n  await mineBlock(bot, \"iron_ore\", 5);\n  bot.chat(\"5 iron ores mined.\");\n}", "description": "async function mineFiveIronOresV2(bot) {\n    // async function mineFiveIronOres(bot) {\n    // The function is about mining 5 iron ore blocks using a stone pickaxe. The function equips the stone pickaxe and explores the environment until finding an iron ore block. Once an iron ore block is found, the function mines a total of 5 iron ore blocks using the stone pickaxe and sends a chat message indicating the successful mining.\n}\n}"}, "mineFiveLapisOres": {"code": "async function mineFiveLapisOres(bot) {\n  // Check if the bot has a stone pickaxe, iron pickaxe, or diamond pickaxe in its inventory\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"stone_pickaxe\"].id);\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  const diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"diamond_pickaxe\"].id);\n\n  // Equip the best pickaxe available\n  if (diamondPickaxe) {\n    await bot.equip(diamondPickaxe, \"hand\");\n  } else if (ironPickaxe) {\n    await bot.equip(ironPickaxe, \"hand\");\n  } else if (stonePickaxe) {\n    await bot.equip(stonePickaxe, \"hand\");\n  } else {\n    bot.chat(\"I don't have a stone, iron, or diamond pickaxe to mine lapis ores.\");\n    return;\n  }\n\n  // Explore the underground area to find lapis ores\n  const lapisOres = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const lapis_ores = bot.findBlocks({\n      matching: mcData.blocksByName[\"lapis_ore\"].id,\n      maxDistance: 32,\n      count: 5\n    });\n    return lapis_ores.length >= 5 ? lapis_ores : null;\n  });\n\n  // Mine 5 lapis ores using the equipped pickaxe\n  if (lapisOres) {\n    await mineBlock(bot, \"lapis_ore\", 5);\n    bot.chat(\"5 lapis ores mined.\");\n  } else {\n    bot.chat(\"Could not find 5 lapis ores.\");\n  }\n}", "description": "async function mineFiveLapisOres(bot) {\n    // async function mineFiveLapisOres(bot) {\n    // The function is about mining 5 lapis ores using the best pickaxe available (stone, iron, or diamond). First, check if the bot has a stone, iron, or diamond pickaxe in its inventory. If so, equip the best pickaxe available. Next, explore the underground area until finding 5 lapis ores. Once 5 lapis ores are found, mine them using the equipped pickaxe.\n}\n}"}, "mineFiveRedstoneOres": {"code": "async function mineFiveRedstoneOres(bot) {\n  // Check if the bot has an iron pickaxe or a diamond pickaxe in its inventory\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  const diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"diamond_pickaxe\"].id);\n\n  // Equip the iron pickaxe or diamond pickaxe\n  if (ironPickaxe) {\n    await bot.equip(ironPickaxe, \"hand\");\n  } else if (diamondPickaxe) {\n    await bot.equip(diamondPickaxe, \"hand\");\n  } else {\n    bot.chat(\"I don't have an iron or diamond pickaxe to mine redstone ores.\");\n    return;\n  }\n\n  // Explore the underground area around level 16 or below\n  const redstoneOres = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const redstone_ores = bot.findBlocks({\n      matching: mcData.blocksByName[\"redstone_ore\"].id,\n      maxDistance: 32,\n      minY: 0,\n      maxY: 16,\n      count: 5\n    });\n    return redstone_ores.length >= 5 ? redstone_ores : null;\n  });\n\n  // Mine the redstone ores when found\n  if (redstoneOres) {\n    await mineBlock(bot, \"redstone_ore\", 5);\n    bot.chat(\"5 redstone ores mined.\");\n  } else {\n    bot.chat(\"Could not find 5 redstone ores.\");\n  }\n}", "description": "async function mineFiveRedstoneOres(bot) {\n    // async function mineFiveRedstoneOres(bot) {\n    // The function is about mining 5 redstone ores using an iron or diamond pickaxe. First, check if the bot has an iron or diamond pickaxe in its inventory. If so, equip the pickaxe in the hand. Next, explore the underground area around level 16 or below until finding 5 redstone ores. Once 5 redstone ores are found, mine them using the equipped pickaxe. Finally, the function will output a message indicating whether 5 redstone ores were successfully mined or not.\n}\n}"}, "mineOneDeepslateDiamondOre": {"code": "async function mineOneDeepslateDiamondOre(bot) {\n  // Equip the diamond pickaxe\n  const diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"diamond_pickaxe\"].id);\n  await bot.equip(diamondPickaxe, \"hand\");\n\n  // Explore the underground area around level 12\n  const deepslateDiamondOre = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const deepslate_diamond_ore = bot.findBlock({\n      matching: mcData.blocksByName[\"deepslate_diamond_ore\"].id,\n      maxDistance: 32,\n      minY: 5,\n      maxY: 12\n    });\n    return deepslate_diamond_ore;\n  });\n\n  // Mine the deepslate diamond ore when found\n  if (deepslateDiamondOre) {\n    await mineBlock(bot, \"deepslate_diamond_ore\", 1);\n    bot.chat(\"1 deepslate diamond ore mined.\");\n  } else {\n    bot.chat(\"Could not find deepslate diamond ore.\");\n  }\n}", "description": "async function mineOneDeepslateDiamondOre(bot) {\n    // async function mineOneDeepslateDiamondOre(bot) {\n    // The function is about mining one deepslate diamond ore using a diamond pickaxe. The function equips the diamond pickaxe and explores the underground area around level 12 until it finds a deepslate diamond ore block. Once found, the function mines the deepslate diamond ore block and outputs a message indicating that one deepslate diamond ore has been mined. If the block is not found, the function outputs a message indicating that it could not find the block.\n}\n}"}, "mineOneDiamondOre": {"code": "async function mineOneDiamondOre(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Explore the underground area around level 12\n  const diamondOre = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const diamond_ore = bot.findBlock({\n      matching: mcData.blocksByName[\"diamond_ore\"].id,\n      maxDistance: 32,\n      minY: 10,\n      maxY: 14\n    });\n    return diamond_ore;\n  });\n\n  // Mine the diamond ore when found\n  if (diamondOre) {\n    await mineBlock(bot, \"diamond_ore\", 1);\n    bot.chat(\"1 diamond ore mined.\");\n  } else {\n    bot.chat(\"Could not find diamond ore.\");\n  }\n}", "description": "async function mineOneDiamondOre(bot) {\n    // async function mineOneDiamondOre(bot) {\n    // The function is about mining a single diamond ore block using an iron pickaxe. The function equips the iron pickaxe and explores the underground area around level 12 until it finds a diamond ore block. Once found, the function mines the diamond ore block and outputs a message indicating that one diamond ore block has been mined. If the diamond ore block is not found, the function outputs a message indicating that it could not find diamond ore.\n}\n}"}, "mineThreeDiamondOres": {"code": "async function mineThreeDiamondOres(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Explore the underground area around level 12\n  const diamondOres = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const diamond_ores = bot.findBlocks({\n      matching: mcData.blocksByName[\"diamond_ore\"].id,\n      maxDistance: 32,\n      minY: 10,\n      maxY: 14,\n      count: 3\n    });\n    return diamond_ores.length >= 3 ? diamond_ores : null;\n  });\n\n  // Mine the diamond ores when found\n  if (diamondOres) {\n    await mineBlock(bot, \"diamond_ore\", 3);\n    bot.chat(\"3 diamond ores mined.\");\n  } else {\n    bot.chat(\"Could not find 3 diamond ores.\");\n  }\n}", "description": "async function mineThreeDiamondOres(bot) {\n    // async function mineThreeDiamondOres(bot) {\n    // The function is about mining 3 diamond ores using an iron pickaxe. The function equips the iron pickaxe and explores the underground area around level 12 until it finds 3 diamond ores. Once 3 diamond ores are found, the function mines them and outputs a message indicating that 3 diamond ores have been mined. If 3 diamond ores are not found, the function outputs a message indicating that it could not find 3 diamond ores.\n}\n}"}, "mineThreeDiamondOresV2": {"code": "async function mineThreeDiamondOres(bot) {\n  // Check if the bot has an iron pickaxe or a diamond pickaxe in its inventory\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  const diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"diamond_pickaxe\"].id);\n\n  // Equip the iron pickaxe or diamond pickaxe\n  if (ironPickaxe) {\n    await bot.equip(ironPickaxe, \"hand\");\n  } else if (diamondPickaxe) {\n    await bot.equip(diamondPickaxe, \"hand\");\n  } else {\n    bot.chat(\"I don't have an iron or diamond pickaxe to mine diamond ores.\");\n    return;\n  }\n\n  // Explore the underground area around level 12\n  const diamondOres = await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n    const diamond_ores = bot.findBlocks({\n      matching: mcData.blocksByName[\"diamond_ore\"].id,\n      maxDistance: 32,\n      minY: 10,\n      maxY: 14,\n      count: 3\n    });\n    return diamond_ores.length >= 3 ? diamond_ores : null;\n  });\n\n  // Mine the diamond ores when found\n  if (diamondOres) {\n    await mineBlock(bot, \"diamond_ore\", 3);\n    bot.chat(\"3 diamond ores mined.\");\n  } else {\n    bot.chat(\"Could not find 3 diamond ores.\");\n  }\n}", "description": "async function mineThreeDiamondOresV2(bot) {\n    // async function mineThreeDiamondOres(bot) {\n    // The function is about mining 3 diamond ores using either an iron pickaxe or a diamond pickaxe. First, check if the bot has either an iron pickaxe or a diamond pickaxe in its inventory. If the bot has either pickaxe, equip it in the hand. Next, explore the underground area around level 12 until finding 3 diamond ores. Once 3 diamond ores are found, mine them using the equipped pickaxe.\n}\n}"}, "obtainAmethystShard": {"code": "async function obtainAmethystShard(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"iron_pickaxe\"].id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Explore the underground area to find an amethyst geode\n  const amethystGeode = await exploreUntil(bot, new Vec3(0, -1, 0), 120, () => {\n    const amethyst_geode = bot.findBlock({\n      matching: mcData.blocksByName[\"amethyst_cluster\"].id,\n      maxDistance: 32\n    });\n    return amethyst_geode;\n  });\n\n  // Mine the amethyst geode to obtain 1 amethyst shard\n  if (amethystGeode) {\n    await mineBlock(bot, \"amethyst_cluster\", 1);\n    bot.chat(\"1 amethyst shard obtained.\");\n  } else {\n    bot.chat(\"Could not find an amethyst geode. Increasing exploration time and trying again.\");\n    await obtainAmethystShard(bot);\n  }\n}", "description": "async function obtainAmethystShard(bot) {\n    // async function obtainAmethystShard(bot) {\n    // The function is about obtaining 1 amethyst shard by exploring the underground area to find an amethyst geode and mining it using an iron pickaxe. If an amethyst geode is not found, the function will increase the exploration time and try again.\n}\n}"}, "obtainOakLogs": {"code": "async function obtainOakLogs(bot) {\n  const oakLogName = \"oak_log\";\n  const oakLogItem = bot.inventory.findInventoryItem(mcData.itemsByName[oakLogName].id);\n  if (oakLogItem && oakLogItem.count >= 3) {\n    bot.chat(\"Already have 3 oak logs in inventory.\");\n    return;\n  }\n  const logsNeeded = oakLogItem ? 3 - oakLogItem.count : 3;\n  bot.chat(`Mining ${logsNeeded} oak logs...`);\n  await mineBlock(bot, oakLogName, logsNeeded);\n  bot.chat(\"Obtained 3 oak logs.\");\n}", "description": "async function obtainOakLogs(bot) {\n    // async function obtainOakLogs(bot) {\n    // The function is about obtaining 3 oak logs. It checks if there are already 3 oak logs in the inventory, and if so, it returns. If not, it calculates how many more logs are needed and mines them. Finally, it sends a message indicating that 3 oak logs have been obtained.\n}\n}"}, "obtainTenWoodLogs": {"code": "async function obtainTenWoodLogs(bot) {\n  const logNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n  let totalLogs = 0;\n\n  // Check if there are already 10 wood logs in the inventory\n  for (const logName of logNames) {\n    const logItem = bot.inventory.findInventoryItem(mcData.itemsByName[logName].id);\n    if (logItem) {\n      totalLogs += logItem.count;\n    }\n  }\n  if (totalLogs >= 10) {\n    bot.chat(\"Already have 10 wood logs in inventory.\");\n    return;\n  }\n  const logsNeeded = 10 - totalLogs;\n  bot.chat(`Mining ${logsNeeded} wood logs...`);\n\n  // Equip the wooden axe if available in the inventory\n  const woodenAxe = bot.inventory.findInventoryItem(mcData.itemsByName[\"wooden_axe\"].id);\n  if (woodenAxe) {\n    await bot.equip(woodenAxe, \"hand\");\n  }\n  for (let i = 0; i < logsNeeded; i++) {\n    // Use exploreUntil to find a wood log if not found nearby\n    const logBlock = bot.findBlock({\n      matching: block => logNames.includes(block.name),\n      maxDistance: 32\n    });\n    if (!logBlock) {\n      await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const foundLog = bot.findBlock({\n          matching: block => logNames.includes(block.name),\n          maxDistance: 32\n        });\n        return foundLog;\n      });\n    }\n\n    // Mine the required number of wood logs using mineBlock\n    await mineBlock(bot, logBlock.name, 1);\n  }\n  bot.chat(\"Obtained 10 wood logs.\");\n}", "description": "async function obtainTenWoodLogs(bot) {\n    // async function obtainTenWoodLogs(bot) {\n    // The function is about obtaining 10 wood logs. It checks if there are already 10 wood logs in the inventory, and if so, returns. Otherwise, it calculates the number of logs needed and equips a wooden axe if available. It then uses `exploreUntil` to find a wood log if not found nearby, and mines the required number of wood logs using `mineBlock`. Finally, it reports the success of obtaining 10 wood logs.\n}\n}"}, "obtainThreeBirchLogs": {"code": "async function obtainThreeBirchLogs(bot) {\n  const chestPosition = new Vec3(-17, 1, 17);\n  const startingPosition = bot.entity.position.clone();\n\n  // Check if the bot is already near the chest\n  if (bot.entity.position.distanceTo(chestPosition) > 5) {\n    // Use exploreUntil to find a path to the chest\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const chest = bot.findBlock({\n        matching: mcData.blocksByName[\"chest\"].id,\n        maxDistance: 32\n      });\n      return chest;\n    });\n  }\n\n  // Take 3 birch logs from the chest\n  await getItemFromChest(bot, chestPosition, {\n    \"birch_log\": 3\n  });\n\n  // Return to the starting position\n  await bot.pathfinder.goto(new GoalNear(startingPosition.x, startingPosition.y, startingPosition.z, 1));\n  bot.chat(\"Obtained 3 birch logs.\");\n}", "description": "async function obtainThreeBirchLogs(bot) {\n    // async function obtainThreeBirchLogs(bot) {\n    // The function is about obtaining 3 birch logs from a chest. If the bot is not already near the chest, it uses `exploreUntil` to find a path to the chest. Then, it takes 3 birch logs from the chest using `getItemFromChest`. Finally, it returns to the starting position and sends a chat message indicating that it has obtained 3 birch logs.\n}\n}"}, "obtainWhiteWoolWithShears": {"code": "async function obtainWhiteWoolWithShears(bot) {\n  // Equip the shears\n  const shears = bot.inventory.findInventoryItem(mcData.itemsByName[\"shears\"].id);\n  await bot.equip(shears, \"hand\");\n\n  // Find the nearest sheep\n  const sheep = bot.nearestEntity(entity => {\n    return entity.name === \"sheep\" && entity.position.distanceTo(bot.entity.position) < 32;\n  });\n\n  // Use the shears on the sheep to obtain white wool\n  if (sheep) {\n    await bot.useOn(sheep);\n    bot.chat(\"Obtained white wool using shears.\");\n  } else {\n    bot.chat(\"No sheep found nearby.\");\n  }\n}", "description": "async function obtainWhiteWoolWithShears(bot) {\n    // async function obtainWhiteWoolWithShears(bot) {\n    // The function is about obtaining white wool using shears. First, equip the shears in the hand. Next, find the nearest sheep within 32 blocks. If a sheep is found, use the shears on the sheep to obtain white wool. If no sheep is found, output a message saying so.\n}\n}"}, "obtainWhiteWoolWithShearsV2": {"code": "async function obtainWhiteWoolWithShears(bot) {\n  // Equip the shears\n  const shears = bot.inventory.findInventoryItem(mcData.itemsByName[\"shears\"].id);\n  await bot.equip(shears, \"hand\");\n\n  // Find the nearest white sheep\n  const whiteSheep = bot.nearestEntity(entity => {\n    return entity.name === \"sheep\" && entity.position.distanceTo(bot.entity.position) < 32 && entity.metadata[16] === 0;\n  });\n\n  // Use the shears on the white sheep to obtain white wool\n  if (whiteSheep) {\n    await bot.useOn(whiteSheep);\n    bot.chat(\"Obtained white wool using shears.\");\n  } else {\n    bot.chat(\"No white sheep found nearby.\");\n  }\n}", "description": "async function obtainWhiteWoolWithShearsV2(bot) {\n    // async function obtainWhiteWoolWithShears(bot) {\n    // The function is about obtaining white wool using shears. First, equip the shears in the hand. Next, find the nearest white sheep within 32 blocks. If a white sheep is found, use the shears on the sheep to obtain white wool. If no white sheep is found, output a message saying so.\n}\n}"}, "openChestAtPosition": {"code": "async function openChestAtPosition(bot) {\n  const chestPosition = new Vec3(-20, -16, 35);\n  await moveToChest(bot, chestPosition);\n  const chestBlock = bot.blockAt(chestPosition);\n  await bot.openContainer(chestBlock);\n  await closeChest(bot, chestBlock);\n  bot.chat(\"Chest opened.\");\n}", "description": "async function openChestAtPosition(bot) {\n    // async function openChestAtPosition(bot) {\n    // The function is about opening a chest at a specific position. First, it moves the bot to the chest position using `moveToChest` helper function. Then, it gets the chest block at the position and opens the container using `bot.openContainer`. After that, it waits for the chest to close using `closeChest` helper function. Finally, it sends a chat message indicating that the chest has been opened.\n}\n}"}, "placeChest": {"code": "async function placeChest(bot) {\n  const chest = bot.inventory.findInventoryItem(mcData.itemsByName[\"chest\"].id);\n  if (chest) {\n    const chestPosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"chest\", chestPosition);\n    bot.chat(\"Chest placed.\");\n  } else {\n    bot.chat(\"No chest found in inventory.\");\n  }\n}", "description": "async function placeChest(bot) {\n    // async function placeChest(bot) {\n    // The function is about placing a chest block in front of the bot. It checks if the chest block is available in the inventory. If it is, the bot places the chest block one block away from its current position. If the chest block is successfully placed, the bot sends a chat message indicating success. If the chest block is not available in the inventory, the bot sends a chat message indicating failure.\n}\n}"}, "placeChestV2": {"code": "async function placeChest(bot) {\n  const chest = bot.inventory.findInventoryItem(mcData.itemsByName[\"chest\"].id);\n  if (chest) {\n    const chestPosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"chest\", chestPosition);\n    bot.chat(\"Chest placed.\");\n  } else {\n    bot.chat(\"No chest found in inventory.\");\n  }\n}", "description": "async function placeChestV2(bot) {\n    // async function placeChest(bot) {\n    // The function is about placing a chest block in front of the bot. It checks if the chest block is available in the inventory. If it is, the bot places the chest block one block away from its current position. If the chest block is successfully placed, the bot sends a chat message indicating that the chest has been placed. If the chest block is not available in the inventory, the bot sends a chat message indicating that no chest was found.\n}\n}"}, "sleepInWhiteBed": {"code": "async function sleepInWhiteBed(bot) {\n  // Find a suitable position to place the bed\n  const startPosition = bot.entity.position.floored();\n  const bedPosition = await findSuitablePosition(bot, startPosition);\n\n  // Place the white bed at the suitable position\n  if (bedPosition) {\n    await placeItem(bot, \"white_bed\", bedPosition);\n  } else {\n    bot.chat(\"Cannot find a suitable position to place the bed.\");\n    return;\n  }\n\n  // Sleep in the bed\n  const bedBlock = bot.blockAt(bedPosition);\n  await bot.sleep(bedBlock);\n  bot.chat(\"Slept in the white bed.\");\n}", "description": "async function sleepInWhiteBed(bot) {\n    // async function sleepInWhiteBed(bot) {\n    // The function is about finding a suitable position to place a white bed and sleeping in it. It first finds a suitable position to place the bed and places the white bed at that position. Then, it sleeps in the bed and sends a message to the chat that it has slept in the white bed.\n}\n}"}, "smeltEightRawIron": {"code": "async function smeltEightRawIron(bot) {\n  // Check if there is a furnace in the inventory or nearby\n  let furnace = bot.inventory.findInventoryItem(mcData.itemsByName[\"furnace\"].id);\n  if (!furnace) {\n    furnace = bot.findBlock({\n      matching: mcData.blocksByName[\"furnace\"].id,\n      maxDistance: 32\n    });\n  }\n\n  // Place the furnace near the player if it's not already placed\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  const furnaceBlock = bot.blockAt(furnacePosition);\n  if (!furnaceBlock || furnaceBlock.name !== \"furnace\") {\n    await placeItem(bot, \"furnace\", furnacePosition);\n  }\n\n  // Smelt 8 raw iron using coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 8);\n  bot.chat(\"8 raw iron smelted.\");\n}", "description": "async function smeltEightRawIron(bot) {\n    // async function smeltEightRawIron(bot) {\n    // The function is about smelting 8 raw iron using a furnace and coal as fuel. First, it checks if there is a furnace in the inventory or nearby. If not, it places one near the player. Then, it smelts 8 raw iron using coal as fuel and saves the event of smelting 8 raw iron.\n}\n}"}, "collectSugarCanes": {"code": "async function collectSugarCanes(bot) {\n  // Find 3 sugar cane blocks nearby\n  const sugarCaneBlocks = bot.findBlocks({\n    matching: mcData.blocksByName[\"sugar_cane\"].id,\n    maxDistance: 32,\n    count: 3\n  });\n\n  // Mine the sugar cane blocks\n  if (sugarCaneBlocks.length >= 3) {\n    await mineBlock(bot, \"sugar_cane\", 3);\n    bot.chat(\"3 sugar canes collected.\");\n  } else {\n    bot.chat(\"Could not find enough sugar canes nearby.\");\n  }\n}", "description": "async function collectSugarCanes(bot) {\n    // async function collectSugarCanes(bot) {\n    // The function is about collecting 3 sugar canes blocks nearby. It searches for 3 sugar cane blocks within a maximum distance of 32 blocks. If it finds at least 3 sugar cane blocks, it mines them and sends a message to the chat indicating that 3 sugar canes have been collected. If it cannot find enough sugar canes nearby, it sends a message to the chat indicating that it could not find enough sugar canes.\n}\n}"}, "craftIronLeggings": {"code": "async function craftIronLeggings(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngots = bot.inventory.findInventoryItem(mcData.itemsByName.iron_ingot.id);\n  if (!ironIngots || ironIngots.count < 7) {\n    // Mine iron ores\n    await mineBlock(bot, \"iron_ore\", 7 - (ironIngots ? ironIngots.count : 0));\n\n    // Smelt the iron ores to obtain the required iron ingots\n    await smeltItem(bot, \"raw_iron\", \"coal\", 7 - (ironIngots ? ironIngots.count : 0));\n  }\n\n  // Check if there is a crafting table nearby or in the inventory\n  let craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n\n  // If not, place the crafting table from the inventory\n  if (!craftingTable) {\n    const craftingTableItem = bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n    if (craftingTableItem) {\n      const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n      await placeItem(bot, \"crafting_table\", craftingTablePosition);\n      craftingTable = bot.blockAt(craftingTablePosition);\n    } else {\n      bot.chat(\"No crafting table found.\");\n      return;\n    }\n  }\n\n  // Craft iron leggings using 7 iron ingots\n  await craftItem(bot, \"iron_leggings\", 1);\n  bot.chat(\"Iron leggings crafted.\");\n}", "description": "async function craftIronLeggings(bot) {\n    // async function craftIronLeggings(bot) {\n    // The function crafts a pair of iron leggings using 7 iron ingots. If there are not enough iron ingots in the inventory, the bot mines iron ores and smelts them to obtain the required amount. It then checks for a nearby crafting table and places one from the inventory if there isn't any. Finally, it crafts the iron leggings and sends a chat message.\n}\n}"}, "craftPaper": {"code": "async function findSuitablePosition(bot) {\n  const offsets = [new Vec3(1, 0, 0), new Vec3(-1, 0, 0), new Vec3(0, 0, 1), new Vec3(0, 0, -1)];\n  for (const offset of offsets) {\n    const position = bot.entity.position.offset(offset.x, offset.y, offset.z);\n    const block = bot.blockAt(position);\n    if (block.name === \"air\" || block.name === \"water\") {\n      const belowBlock = bot.blockAt(position.offset(0, -1, 0));\n      if (belowBlock.name !== \"air\" && belowBlock.name !== \"water\") {\n        return position;\n      }\n    }\n  }\n  return null;\n}\n\nasync function craftPaper(bot) {\n  // Check if there are enough sugar canes in the inventory\n  const sugarCanes = bot.inventory.findInventoryItem(mcData.itemsByName.sugar_cane.id);\n  if (!sugarCanes || sugarCanes.count < 3) {\n    // Explore the area to find more sugar canes\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const sugarCane = bot.findBlock({\n        matching: mcData.blocksByName.sugar_cane.id,\n        maxDistance: 32\n      });\n      return sugarCane;\n    });\n\n    // Mine the sugar canes\n    await mineBlock(bot, \"sugar_cane\", 3 - (sugarCanes ? sugarCanes.count : 0));\n  }\n\n  // Check if there is a crafting table nearby or in the inventory\n  const craftingTable = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  }) || bot.inventory.findInventoryItem(mcData.itemsByName.crafting_table.id);\n\n  // If not, craft a crafting table using the oak_log in the inventory\n  if (!craftingTable) {\n    await craftItem(bot, \"crafting_table\", 1);\n  }\n\n  // Find a suitable position to place the crafting table if it's not already placed\n  const craftingTableBlock = bot.findBlock({\n    matching: mcData.blocksByName.crafting_table.id,\n    maxDistance: 32\n  });\n  let craftingTablePosition;\n  if (!craftingTableBlock) {\n    craftingTablePosition = await findSuitablePosition(bot);\n    if (!craftingTablePosition) {\n      bot.chat(\"No suitable position found to place the crafting table.\");\n      return;\n    }\n  } else {\n    craftingTablePosition = craftingTableBlock.position;\n  }\n\n  // Place the crafting table at the suitable position\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft 3 paper using the sugar canes\n  await craftItem(bot, \"paper\", 1);\n  bot.chat(\"3 paper crafted.\");\n}", "description": "async function craftPaper(bot) {\n    // async function craftPaper(bot) {\n    // The function is about crafting 3 paper using sugar canes. First, it checks if there are enough sugar canes in the inventory, and if not, it explores the area to find more sugar canes and mines them. Then, it checks if there is a crafting table nearby or in the inventory, and if not, it crafts a crafting table using the oak_log in the inventory. Next, it finds a suitable position to place the crafting table if it's not already placed. Finally, it places the crafting table at the suitable position and crafts 3 paper using the sugar canes.\n}\n}"}, "eatCookedPorkchops": {"code": "async function eatCookedPorkchops(bot) {\n  for (let i = 0; i < 3; i++) {\n    // Equip the cooked porkchop in the bot's hand\n    const cookedPorkchop = bot.inventory.findInventoryItem(mcData.itemsByName.cooked_porkchop.id);\n    await bot.equip(cookedPorkchop, \"hand\");\n\n    // Consume the cooked porkchop\n    await bot.consume();\n  }\n  bot.chat(\"3 cooked porkchops eaten.\");\n}", "description": "async function eatCookedPorkchops(bot) {\n    // async function eatCookedPorkchops(bot) {\n    // The function is about eating 3 cooked porkchops. The function equips the cooked porkchop in the bot's hand and consumes it three times. After consuming three cooked porkchops, the function sends a chat message indicating that 3 cooked porkchops have been eaten.\n}\n}"}, "eatRottenFlesh": {"code": "async function eatRottenFlesh(bot) {\n  // Equip the rotten flesh in the bot's hand\n  const rottenFlesh = bot.inventory.findInventoryItem(mcData.itemsByName.rotten_flesh.id);\n  await bot.equip(rottenFlesh, \"hand\");\n\n  // Consume the rotten flesh\n  await bot.consume();\n  bot.chat(\"Rotten flesh consumed.\");\n}", "description": "async function eatRottenFlesh(bot) {\n    // async function eatRottenFlesh(bot) {\n    // The function equips the rotten flesh in the bot's hand and consumes it, then sends a chat message indicating that the rotten flesh has been consumed.\n}\n}"}, "killOneCow": {"code": "async function killOneCow(bot) {\n  // Equip the iron_pickaxe from the inventory\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find the nearest cow and kill it using the iron_pickaxe\n  await killMob(bot, \"cow\", 300);\n  bot.chat(\"1 cow killed.\");\n}", "description": "async function killOneCow(bot) {\n    // async function killOneCow(bot) {\n    // The function is about killing one cow using an iron pickaxe. It equips the iron pickaxe from the inventory and finds the nearest cow within 300 blocks. Once the cow is found, it is killed using the iron pickaxe and a message is sent to the chat indicating that one cow has been killed.\n}\n}"}, "killOneSkeleton": {"code": "async function killOneSkeleton(bot) {\n  // Equip the iron_pickaxe from the inventory\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find the nearest skeleton and kill it using the iron_pickaxe\n  await killMob(bot, \"skeleton\", 300);\n  bot.chat(\"1 skeleton killed.\");\n}", "description": "async function killOneSkeleton(bot) {\n    // async function killOneSkeleton(bot) {\n    // The function is about killing one skeleton using an iron pickaxe. It equips the iron pickaxe from the inventory and finds the nearest skeleton within 300 blocks. Once the skeleton is found, it kills it using the iron pickaxe and outputs a message indicating that one skeleton has been killed.\n}\n}"}, "mineDeepslateDiamondOre": {"code": "async function mineDeepslateDiamondOre(bot) {\n  // Step 1: Equip the diamond_pickaxe\n  const diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.diamond_pickaxe.id);\n  await bot.equip(diamondPickaxe, \"hand\");\n\n  // Step 2: Find a deepslate_diamond_ore block nearby or explore the area to find one\n  let deepslateDiamondOre = bot.findBlock({\n    matching: mcData.blocksByName.deepslate_diamond_ore.id,\n    maxDistance: 32\n  });\n  if (!deepslateDiamondOre) {\n    deepslateDiamondOre = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n      const deepslateDiamondOreBlock = bot.findBlock({\n        matching: mcData.blocksByName.deepslate_diamond_ore.id,\n        maxDistance: 32\n      });\n      return deepslateDiamondOreBlock;\n    });\n  }\n\n  // Step 3: Mine the deepslate_diamond_ore block using the diamond_pickaxe\n  if (deepslateDiamondOre) {\n    await mineBlock(bot, \"deepslate_diamond_ore\", 1);\n    bot.chat(\"1 deepslate diamond ore mined.\");\n  } else {\n    bot.chat(\"Could not find a deepslate diamond ore block.\");\n  }\n}", "description": "async function mineDeepslateDiamondOre(bot) {\n    // async function mineDeepslateDiamondOre(bot) {\n    // The function is about mining a single deepslate diamond ore block using a diamond pickaxe. First, equip the diamond pickaxe in the hand. Next, find a nearby deepslate diamond ore block or explore the area to find one. Once a deepslate diamond ore block is found, mine it using the diamond pickaxe.\n}\n}"}, "mineDeepslateDiamondOreV2": {"code": "async function mineDeepslateDiamondOre(bot) {\n  // Step 1: Equip the diamond_pickaxe\n  const diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.diamond_pickaxe.id);\n  await bot.equip(diamondPickaxe, \"hand\");\n\n  // Step 2: Find a deepslate_diamond_ore block nearby or explore the area to find one\n  let deepslateDiamondOre = bot.findBlock({\n    matching: mcData.blocksByName.deepslate_diamond_ore.id,\n    maxDistance: 32\n  });\n  if (!deepslateDiamondOre) {\n    deepslateDiamondOre = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n      const deepslateDiamondOreBlock = bot.findBlock({\n        matching: mcData.blocksByName.deepslate_diamond_ore.id,\n        maxDistance: 32\n      });\n      return deepslateDiamondOreBlock;\n    });\n  }\n\n  // Step 3: Mine the deepslate_diamond_ore block using the diamond_pickaxe\n  if (deepslateDiamondOre) {\n    await mineBlock(bot, \"deepslate_diamond_ore\", 1);\n    bot.chat(\"1 deepslate diamond ore mined.\");\n  } else {\n    bot.chat(\"Could not find a deepslate diamond ore block.\");\n  }\n}", "description": "async function mineDeepslateDiamondOreV2(bot) {\n    // async function mineDeepslateDiamondOre(bot) {\n    // The function is about mining a single deepslate diamond ore block using a diamond pickaxe. First, equip the diamond pickaxe in the hand. Next, find a nearby deepslate diamond ore block or explore the area to find one. Once a deepslate diamond ore block is found, mine it using the diamond pickaxe.\n}\n}"}, "mineDeepslateGoldOre": {"code": "async function mineDeepslateGoldOre(bot) {\n  // Step 1: Equip the iron_pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Step 2: Find a deepslate_gold_ore block nearby or explore the area to find one\n  let deepslateGoldOre = bot.findBlock({\n    matching: mcData.blocksByName.deepslate_gold_ore.id,\n    maxDistance: 32\n  });\n  if (!deepslateGoldOre) {\n    deepslateGoldOre = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n      const deepslateGoldOreBlock = bot.findBlock({\n        matching: mcData.blocksByName.deepslate_gold_ore.id,\n        maxDistance: 32\n      });\n      return deepslateGoldOreBlock;\n    });\n  }\n\n  // Step 3: Mine the deepslate_gold_ore block using the iron_pickaxe\n  if (deepslateGoldOre) {\n    await mineBlock(bot, \"deepslate_gold_ore\", 1);\n    bot.chat(\"1 deepslate gold ore mined.\");\n  } else {\n    bot.chat(\"Could not find a deepslate gold ore block.\");\n  }\n}", "description": "async function mineDeepslateGoldOre(bot) {\n    // async function mineDeepslateGoldOre(bot) {\n    // The function is about mining a single deepslate gold ore block using an iron pickaxe. First, equip the iron pickaxe in the hand. Next, find a nearby deepslate gold ore block or explore the area to find one. Once a deepslate gold ore block is found, mine it using the iron pickaxe. If the block is successfully mined, a message is sent to the chat. If the block is not found, a message is sent to the chat indicating that it could not be found.\n}\n}"}, "mineDeepslateLapisOre": {"code": "async function mineDeepslateLapisOre(bot) {\n  // Step 1: Equip the iron_pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Step 2: Find a deepslate_lapis_ore block nearby or explore the area to find one\n  let deepslateLapisOre = bot.findBlock({\n    matching: mcData.blocksByName.deepslate_lapis_ore.id,\n    maxDistance: 32\n  });\n  if (!deepslateLapisOre) {\n    deepslateLapisOre = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n      const deepslateLapisOreBlock = bot.findBlock({\n        matching: mcData.blocksByName.deepslate_lapis_ore.id,\n        maxDistance: 32\n      });\n      return deepslateLapisOreBlock;\n    });\n  }\n\n  // Step 3: Mine the deepslate_lapis_ore block using the iron_pickaxe\n  if (deepslateLapisOre) {\n    await mineBlock(bot, \"deepslate_lapis_ore\", 1);\n    bot.chat(\"1 deepslate lapis ore mined.\");\n  } else {\n    bot.chat(\"Could not find a deepslate lapis ore block.\");\n  }\n}", "description": "async function mineDeepslateLapisOre(bot) {\n    // async function mineDeepslateLapisOre(bot) {\n    // The function is about mining a single deepslate lapis ore block using an iron pickaxe. First, equip the iron pickaxe in the hand. Next, find a nearby deepslate lapis ore block or explore the area to find one. Once a deepslate lapis ore block is found, mine it using the iron pickaxe.\n}\n}"}, "mineFiveCalciteBlocks": {"code": "async function mineFiveCalciteBlocks(bot) {\n  // Step 1: Equip the iron_pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Step 2: Find a calcite block nearby or explore the area to find one\n  let calciteBlock = bot.findBlock({\n    matching: mcData.blocksByName.calcite.id,\n    maxDistance: 32\n  });\n  if (!calciteBlock) {\n    calciteBlock = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n      const calcite = bot.findBlock({\n        matching: mcData.blocksByName.calcite.id,\n        maxDistance: 32\n      });\n      return calcite;\n    });\n  }\n\n  // Step 3: Mine 5 calcite blocks using the iron_pickaxe\n  if (calciteBlock) {\n    await mineBlock(bot, \"calcite\", 5);\n    bot.chat(\"5 calcite blocks mined.\");\n  } else {\n    bot.chat(\"Could not find calcite blocks.\");\n  }\n}", "description": "async function mineFiveCalciteBlocks(bot) {\n    // async function mineFiveCalciteBlocks(bot) {\n    // The function is about mining 5 calcite blocks using an iron pickaxe. First, equip the iron pickaxe in the hand. Next, find a nearby calcite block or explore the area to find one. Once a calcite block is found, mine a total of 5 calcite blocks using the iron pickaxe. If no calcite blocks are found, output a message indicating that no calcite blocks were found.\n}\n}"}, "mineFiveDeepslateIronOreWithDiamondPickaxe": {"code": "async function mineFiveDeepslateIronOreWithDiamondPickaxe(bot) {\n  // Step 1: Equip the diamond_pickaxe\n  const diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.diamond_pickaxe.id);\n  await bot.equip(diamondPickaxe, \"hand\");\n\n  // Step 2: Find a deepslate_iron_ore block nearby or explore the area to find one\n  let deepslateIronOre = bot.findBlock({\n    matching: mcData.blocksByName.deepslate_iron_ore.id,\n    maxDistance: 32\n  });\n  if (!deepslateIronOre) {\n    deepslateIronOre = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n      const deepslateIronOreBlock = bot.findBlock({\n        matching: mcData.blocksByName.deepslate_iron_ore.id,\n        maxDistance: 32\n      });\n      return deepslateIronOreBlock;\n    });\n  }\n\n  // Step 3: Mine 5 deepslate_iron_ore blocks using the diamond_pickaxe\n  if (deepslateIronOre) {\n    await mineBlock(bot, \"deepslate_iron_ore\", 5);\n    bot.chat(\"5 deepslate iron ores mined with diamond pickaxe.\");\n  } else {\n    bot.chat(\"Could not find deepslate iron ore blocks.\");\n  }\n}", "description": "async function mineFiveDeepslateIronOreWithDiamondPickaxe(bot) {\n    // async function mineFiveDeepslateIronOreWithDiamondPickaxe(bot) {\n    // The function is about mining 5 deepslate iron ores using a diamond pickaxe. First, equip the diamond pickaxe in the hand. Next, find a nearby deepslate iron ore block or explore the area to find one. Once a deepslate iron ore block is found, mine a total of 5 deepslate iron ore blocks using the diamond pickaxe.\n}\n}"}, "mineFivePointedDripstone": {"code": "async function mineFivePointedDripstone(bot) {\n  // Step 1: Equip the iron_pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Step 2: Find a pointed_dripstone block nearby or explore the area to find one\n  let pointedDripstone = bot.findBlock({\n    matching: mcData.blocksByName.pointed_dripstone.id,\n    maxDistance: 32\n  });\n  if (!pointedDripstone) {\n    pointedDripstone = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const pointedDripstoneBlock = bot.findBlock({\n        matching: mcData.blocksByName.pointed_dripstone.id,\n        maxDistance: 32\n      });\n      return pointedDripstoneBlock;\n    });\n  }\n\n  // Step 3: Mine 5 pointed_dripstone blocks using the iron_pickaxe\n  if (pointedDripstone) {\n    await mineBlock(bot, \"pointed_dripstone\", 5);\n    bot.chat(\"5 pointed dripstone blocks mined.\");\n  } else {\n    bot.chat(\"Could not find pointed dripstone blocks.\");\n  }\n}", "description": "async function mineFivePointedDripstone(bot) {\n    // async function mineFivePointedDripstone(bot) {\n    // The function is about mining 5 pointed dripstone blocks using an iron pickaxe. First, equip the iron pickaxe in the hand. Next, find a pointed dripstone block nearby or explore the area to find one. Once a pointed dripstone block is found, mine a total of 5 pointed dripstone blocks using the iron pickaxe. If no pointed dripstone blocks are found, output a message indicating that they could not be found.\n}\n}"}, "mineOneDiamondOreV2": {"code": "async function mineOneDiamondOre(bot) {\n  // Equip the iron_pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find a diamond_ore block nearby or explore the area to find one\n  let diamondOre = bot.findBlock({\n    matching: mcData.blocksByName.diamond_ore.id,\n    maxDistance: 32\n  });\n  if (!diamondOre) {\n    diamondOre = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n      const diamondOreBlock = bot.findBlock({\n        matching: mcData.blocksByName.diamond_ore.id,\n        maxDistance: 32\n      });\n      return diamondOreBlock;\n    });\n  }\n\n  // Mine the diamond_ore block using the iron_pickaxe\n  if (diamondOre) {\n    await mineBlock(bot, \"diamond_ore\", 1);\n    bot.chat(\"1 diamond ore mined.\");\n  } else {\n    bot.chat(\"Could not find a diamond ore block.\");\n  }\n}", "description": "async function mineOneDiamondOreV2(bot) {\n    // async function mineOneDiamondOre(bot) {\n    // The function is about mining a single diamond ore block using an iron pickaxe. First, the function equips the iron pickaxe. Then, it searches for a nearby diamond ore block. If it cannot find one, it explores the area until it finds one. Finally, it mines the diamond ore block using the iron pickaxe and reports the success or failure of the operation.\n}\n}"}, "mineOneIronOre": {"code": "async function mineOneIronOre(bot) {\n  // Equip the stone_pickaxe\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  await bot.equip(stonePickaxe, \"hand\");\n\n  // Find an iron_ore block nearby\n  let ironOre = bot.findBlock({\n    matching: mcData.blocksByName.iron_ore.id,\n    maxDistance: 32\n  });\n\n  // If not found, explore the area to find an iron_ore block\n  if (!ironOre) {\n    ironOre = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n      const ironOreBlock = bot.findBlock({\n        matching: mcData.blocksByName.iron_ore.id,\n        maxDistance: 32\n      });\n      return ironOreBlock;\n    });\n  }\n\n  // Mine the iron_ore block using the stone_pickaxe\n  if (ironOre) {\n    await mineBlock(bot, \"iron_ore\", 1);\n    bot.chat(\"1 iron ore mined.\");\n  } else {\n    bot.chat(\"Could not find an iron ore block.\");\n  }\n}", "description": "async function mineOneIronOre(bot) {\n    // async function mineOneIronOre(bot) {\n    // The function is about mining one iron ore block using a stone pickaxe. First, equip the stone pickaxe in the hand. Then, find an iron ore block nearby. If not found, explore the area to find an iron ore block. Once an iron ore block is found, mine it using the stone pickaxe.\n}\n}"}, "mineOneLapisOreSafely": {"code": "async function mineOneLapisOreSafely(bot) {\n  // Check if the bot's hunger is less than the maximum hunger\n  if (bot.food < 20) {\n    // Check if the bot has enough food in the inventory\n    const food = bot.inventory.items().find(item => item.foodPoints);\n\n    // If not, find and kill a pig to obtain food\n    if (!food) {\n      await killMob(bot, \"pig\", 300);\n    }\n\n    // Consume the food to restore hunger\n    await bot.equip(food, \"hand\");\n    await bot.consume();\n  }\n\n  // Equip the iron_pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Find a lapis_ore block nearby or explore the area to find one\n  let lapisOre = bot.findBlock({\n    matching: mcData.blocksByName.lapis_ore.id,\n    maxDistance: 32\n  });\n  if (!lapisOre) {\n    lapisOre = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n      const lapisOreBlock = bot.findBlock({\n        matching: mcData.blocksByName.lapis_ore.id,\n        maxDistance: 32\n      });\n      return lapisOreBlock;\n    });\n  }\n\n  // Mine the lapis_ore block using the iron_pickaxe\n  if (lapisOre) {\n    await mineBlock(bot, \"lapis_ore\", 1);\n    bot.chat(\"1 lapis ore mined safely.\");\n  } else {\n    bot.chat(\"Could not find a lapis ore block.\");\n  }\n}", "description": "async function mineOneLapisOreSafely(bot) {\n    // async function mineOneLapisOreSafely(bot) {\n    // The function is about mining one lapis ore block safely using an iron pickaxe. First, check if the bot's hunger is less than the maximum hunger. If so, check if the bot has enough food in the inventory. If not, find and kill a pig to obtain food and consume it to restore hunger. Equip the iron pickaxe and find a lapis ore block nearby or explore the area to find one. Finally, mine the lapis ore block using the iron pickaxe.\n}\n}"}, "mineOneRedstoneOre": {"code": "async function mineOneRedstoneOre(bot) {\n  // Step 1: Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Step 2: Explore the area below layer 16 to find a redstone ore block\n  let redstoneOre = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n    if (bot.entity.position.y > 16) return null;\n    const redstoneOreBlock = bot.findBlock({\n      matching: mcData.blocksByName.redstone_ore.id,\n      maxDistance: 32\n    });\n    return redstoneOreBlock;\n  });\n\n  // Step 3: Mine the redstone ore block using the iron pickaxe\n  if (redstoneOre) {\n    await mineBlock(bot, \"redstone_ore\", 1);\n    bot.chat(\"1 redstone ore mined.\");\n  } else {\n    bot.chat(\"Could not find a redstone ore block.\");\n  }\n}", "description": "async function mineOneRedstoneOre(bot) {\n    // async function mineOneRedstoneOre(bot) {\n    // The function is about mining a single redstone ore block using an iron pickaxe. First, the function equips the iron pickaxe. Then, it explores the area below layer 16 to find a redstone ore block. Once the redstone ore block is found, the function mines it using the iron pickaxe and outputs a message indicating that one redstone ore block has been mined. If the redstone ore block is not found, the function outputs a message indicating that it could not find a redstone ore block.\n}\n}"}, "mineTenCoalOres": {"code": "async function mineTenCoalOres(bot) {\n  // Check if there are 10 coal ores nearby\n  const coalOres = bot.findBlocks({\n    matching: mcData.blocksByName[\"coal_ore\"].id,\n    maxDistance: 32,\n    count: 10\n  });\n\n  // If not, explore the area to find coal ores\n  if (coalOres.length < 10) {\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const coalOre = bot.findBlock({\n        matching: mcData.blocksByName[\"coal_ore\"].id,\n        maxDistance: 32\n      });\n      return coalOre;\n    });\n  }\n\n  // Mine 10 coal ores using the iron_pickaxe\n  await mineBlock(bot, \"coal_ore\", 10);\n  bot.chat(\"10 coal ores mined.\");\n}", "description": "async function mineTenCoalOres(bot) {\n    // async function mineTenCoalOres(bot) {\n    // The function is about mining 10 coal ores using an iron pickaxe. It first checks if there are 10 coal ores nearby, and if not, it explores the area to find them. Once 10 coal ores are found, it mines them using the iron pickaxe and sends a chat message indicating that 10 coal ores have been mined.\n}\n}"}, "mineTenRedstoneOres": {"code": "async function mineTenRedstoneOres(bot) {\n  // Step 1: Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n\n  // Step 2: Explore the area below layer 16 to find redstone ore blocks\n  let redstoneOres = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n    if (bot.entity.position.y > 16) return null;\n    const redstoneOreBlocks = bot.findBlocks({\n      matching: mcData.blocksByName.redstone_ore.id,\n      maxDistance: 32,\n      count: 10\n    });\n    return redstoneOreBlocks.length >= 10 ? redstoneOreBlocks : null;\n  });\n\n  // Step 3: Mine 10 redstone ore blocks using the iron pickaxe\n  if (redstoneOres) {\n    await mineBlock(bot, \"redstone_ore\", 10);\n    bot.chat(\"10 redstone ores mined.\");\n  } else {\n    bot.chat(\"Could not find 10 redstone ore blocks.\");\n  }\n}", "description": "async function mineTenRedstoneOres(bot) {\n    // async function mineTenRedstoneOres(bot) {\n    // The function is about mining 10 redstone ore blocks using an iron pickaxe. First, equip the iron pickaxe in the hand. Next, explore the environment below layer 16 until finding 10 redstone ore blocks. Once 10 redstone ore blocks are found, mine them using the iron pickaxe. If 10 redstone ore blocks are not found, output a message indicating that they could not be found.\n}\n}"}, "obtainSpruceLogs": {"code": "async function obtainSpruceLogs(bot) {\n  // Find 3 spruce_log blocks\n  const spruceLogs = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const spruceLog = bot.findBlock({\n      matching: mcData.blocksByName[\"spruce_log\"].id,\n      maxDistance: 32,\n      count: 3\n    });\n    return spruceLog ? spruceLog : null;\n  });\n  if (spruceLogs) {\n    // Mine the spruce_log blocks\n    await mineBlock(bot, \"spruce_log\", 3);\n    bot.chat(\"3 spruce logs obtained.\");\n  } else {\n    bot.chat(\"Could not find enough spruce logs.\");\n  }\n}", "description": "async function obtainSpruceLogs(bot) {\n    // async function obtainSpruceLogs(bot) {\n    // The function is about obtaining 3 spruce logs. It explores the environment until it finds 3 spruce_log blocks within a certain distance. Once the blocks are found, it mines them and sends a message indicating that 3 spruce logs have been obtained. If the blocks are not found, it sends a message indicating that it could not find enough spruce logs.\n}\n}"}, "openChestAtPositionV2": {"code": "// Fix the moveToChest function if needed\nasync function moveToChest(bot, chestPosition) {\n  const chestBlock = bot.blockAt(chestPosition);\n  if (!chestBlock || chestBlock.name !== \"chest\" && chestBlock.name !== \"trapped_chest\") {\n    throw new Error(`No chest at ${chestPosition}, it is ${chestBlock?.name}`);\n  }\n  const goal = new GoalGetToBlock(chestPosition.x, chestPosition.y, chestPosition.z);\n  await bot.pathfinder.goto(goal);\n}\n\n// Call the openChestAtPosition function again\n\n// Call the openChestAtPosition function again\nasync function openChestAtPosition(bot) {\n  const chestPosition = new Vec3(-12, 62, 39);\n  await moveToChest(bot, chestPosition);\n  const chestBlock = bot.blockAt(chestPosition);\n  await bot.openContainer(chestBlock);\n  await closeChest(bot, chestBlock);\n  bot.chat(\"Chest opened and checked.\");\n}", "description": "async function openChestAtPositionV2(bot) {\n    // async function openChestAtPosition(bot) {\n    // The function is about opening a chest at a specific position and checking its contents. It first calls the `moveToChest` function to move the bot to the chest's position. Then, it opens the chest and waits for it to load. After that, it calls the `closeChest` function to close the chest and prevent any further interaction. Finally, it sends a chat message indicating that the chest has been opened and checked.\n}\n}"}, "smeltIronOre": {"code": "async function smeltIronOre(bot) {\n  // Find a suitable location to place the furnace\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n\n  // Place the furnace at the chosen location\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt 1 raw_iron into 1 iron_ingot using 1 coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 1);\n  bot.chat(\"1 iron ore smelted.\");\n}", "description": "async function smeltIronOre(bot) {\n    // async function smeltIronOre(bot) {\n    // The function is about smelting 1 raw iron ore into 1 iron ingot using 1 coal as fuel. It first finds a suitable location to place the furnace, then places the furnace at the chosen location. Finally, it smelts the raw iron ore into an iron ingot using coal as fuel and outputs a message indicating that 1 iron ore has been smelted.\n}\n}"}, "smeltTenRawIron": {"code": "async function smeltTenRawIron(bot) {\n  // Check if there is a furnace in the inventory or nearby\n  const furnace = bot.findBlock({\n    matching: mcData.blocksByName.furnace.id,\n    maxDistance: 32\n  });\n\n  // If not, place the furnace from the inventory\n  if (!furnace) {\n    const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n    if (furnaceItem) {\n      const furnacePosition = bot.entity.position.offset(1, 0, 0);\n      await placeItem(bot, \"furnace\", furnacePosition);\n    } else {\n      bot.chat(\"No furnace found.\");\n      return;\n    }\n  }\n\n  // Smelt 10 raw iron using coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 10);\n  bot.chat(\"10 raw iron smelted.\");\n}", "description": "async function smeltTenRawIron(bot) {\n    // async function smeltTenRawIron(bot) {\n    // The function is about smelting 10 raw iron using coal as fuel. It checks if there is a furnace nearby, and if not, places one from the inventory. Then it smelts 10 raw iron using coal as fuel and saves the event of smelting 10 raw iron.\n}\n}"}, "craftShieldWithIron": {"code": "async function craftShieldWithIron(bot) {\n  // Check if we have enough spruce planks\n  const sprucePlankCount = bot.inventory.count(mcData.itemsByName.spruce_planks.id);\n  if (sprucePlankCount < 6) {\n    // Mine 3 more spruce planks\n    await mineBlock(bot, \"spruce_log\", 3);\n    // Craft spruce planks from spruce logs\n    await craftItem(bot, \"spruce_planks\", 3);\n    bot.chat(\"Spruce planks crafted.\");\n  }\n\n  // Check if we have enough iron ingots\n  const ironIngotCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  if (ironIngotCount < 1) {\n    // Mine iron ore\n    await mineBlock(bot, \"iron_ore\", 1);\n    bot.chat(\"Iron ore mined.\");\n\n    // Place a furnace if it's not already placed\n    const furnacePosition = bot.entity.position.offset(1, -1, 0);\n    const furnaceBlock = bot.blockAt(furnacePosition);\n    if (!furnaceBlock || furnaceBlock.name !== \"furnace\") {\n      await placeItem(bot, \"furnace\", furnacePosition);\n      bot.chat(\"Furnace placed.\");\n    }\n\n    // Smelt iron ore into iron ingot using a furnace\n    await smeltItem(bot, \"raw_iron\", \"coal\", 1);\n    bot.chat(\"Iron ingot smelted.\");\n  }\n\n  // Place the crafting table if it's not already placed\n  const craftingTablePosition = bot.entity.position.offset(1, -1, 0);\n  const craftingTableBlock = bot.blockAt(craftingTablePosition);\n  if (!craftingTableBlock || craftingTableBlock.name !== \"crafting_table\") {\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    bot.chat(\"Crafting table placed.\");\n  }\n\n  // Craft the shield using the 6 spruce planks and 1 iron ingot\n  await craftItem(bot, \"shield\", 1);\n  bot.chat(\"Shield crafted.\");\n}", "description": "async function craftShieldWithIron(bot) {\n    // async function craftShieldWithIron(bot) {\n    // The function crafts a shield using 6 spruce planks and 1 iron ingot. It checks if there are enough spruce planks and iron ingots in the inventory, and if not, it mines and smelts the required materials. It also places a furnace and a crafting table if they are not already placed. Finally, it crafts the shield and logs a message in the chat.\n}\n}"}, "craftStoneAxeWithCraftingTable": {"code": "async function craftStoneAxeWithCraftingTable(bot) {\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  const stickCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  if (cobblestoneCount >= 3 && stickCount >= 2) {\n    // Place the crafting table if it's not already placed\n    const craftingTablePosition = bot.entity.position.offset(1, -1, 0);\n    const craftingTableBlock = bot.blockAt(craftingTablePosition);\n    if (!craftingTableBlock || craftingTableBlock.name !== \"crafting_table\") {\n      await placeItem(bot, \"crafting_table\", craftingTablePosition);\n      bot.chat(\"Crafting table placed.\");\n    }\n\n    // Craft the stone axe using the cobblestones and sticks on the crafting table\n    await craftItem(bot, \"stone_axe\", 1);\n    bot.chat(\"Stone axe crafted.\");\n  } else {\n    if (stickCount < 2) {\n      // Craft sticks using spruce planks\n      await craftItem(bot, \"stick\", 1);\n      bot.chat(\"Sticks crafted.\");\n    }\n    bot.chat(\"Not enough materials to craft a stone axe.\");\n  }\n}", "description": "async function craftStoneAxeWithCraftingTable(bot) {\n    // async function craftStoneAxeWithCraftingTable(bot) {\n    // The function crafts a stone axe using a crafting table. It checks if there are enough cobblestones and sticks in the inventory to craft the axe. If there are enough materials, it places a crafting table if it's not already placed and crafts the stone axe. If there are not enough sticks, it crafts sticks using spruce planks. If there are not enough materials to craft a stone axe, it sends a chat message.\n}\n}"}, "killTropicalFish": {"code": "async function killTropicalFish(bot) {\n  // Equip the iron sword\n  const ironSword = bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id);\n  await bot.equip(ironSword, \"hand\");\n  bot.chat(\"Iron sword equipped.\");\n\n  // Find the nearest tropical fish\n  const tropicalFish = bot.nearestEntity(entity => {\n    return entity.name === \"tropical_fish\" && entity.position.distanceTo(bot.entity.position) < 32;\n  });\n\n  // Kill the tropical fish using the iron sword\n  if (tropicalFish) {\n    await killMob(bot, \"tropical_fish\", 300);\n    bot.chat(\"Tropical fish killed.\");\n  } else {\n    bot.chat(\"No tropical fish found nearby.\");\n  }\n}", "description": "async function killTropicalFish(bot) {\n    // async function killTropicalFish(bot) {\n    // The function is about equipping an iron sword and killing the nearest tropical fish within a 32 block radius. If a tropical fish is found, it is killed using the iron sword and a success message is sent. If no tropical fish is found, a message is sent indicating that there are no tropical fish nearby.\n}\n}"}, "mineEmeraldOre": {"code": "async function mineEmeraldOre(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n  bot.chat(\"Iron pickaxe equipped.\");\n\n  // Explore until an emerald ore is found\n  const emeraldOre = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const foundEmeraldOre = bot.findBlock({\n      matching: mcData.blocksByName.emerald_ore.id,\n      maxDistance: 32\n    });\n    return foundEmeraldOre;\n  });\n  if (emeraldOre) {\n    // Mine the emerald ore\n    await mineBlock(bot, \"emerald_ore\", 1);\n    bot.chat(\"Emerald ore mined.\");\n  } else {\n    bot.chat(\"Emerald ore not found within exploration time.\");\n  }\n}", "description": "async function mineEmeraldOre(bot) {\n    // async function mineEmeraldOre(bot) {\n    // The function is about mining a single emerald ore block using an iron pickaxe. First, the function equips the iron pickaxe. Next, it explores the environment until finding an emerald ore block. Once an emerald ore block is found, it mines the block using the iron pickaxe. If the emerald ore block is not found within the exploration time, it sends a message indicating that the block was not found.\n}\n}"}, "mineEmeraldOreV2": {"code": "async function mineEmeraldOre(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n  bot.chat(\"Iron pickaxe equipped.\");\n\n  // Explore until an emerald ore is found\n  const emeraldOre = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const foundEmeraldOre = bot.findBlock({\n      matching: mcData.blocksByName.emerald_ore.id,\n      maxDistance: 32\n    });\n    return foundEmeraldOre;\n  });\n  if (emeraldOre) {\n    // Mine the emerald ore\n    await mineBlock(bot, \"emerald_ore\", 1);\n    bot.chat(\"Emerald ore mined.\");\n  } else {\n    bot.chat(\"Emerald ore not found within exploration time.\");\n  }\n}", "description": "async function mineEmeraldOreV2(bot) {\n    // async function mineEmeraldOre(bot) {\n    // The function is about mining a single emerald ore block using an iron pickaxe. First, the function equips the iron pickaxe. Next, it explores the environment until finding an emerald ore block. Once an emerald ore block is found, it mines the block and saves the event of mining the emerald ore. If the emerald ore block is not found within the exploration time, it sends a message indicating that the emerald ore was not found.\n}\n}"}, "mineGoldOreAndSmelt": {"code": "async function mineGoldOreAndSmelt(bot) {\n  // Check if the bot has an iron pickaxe or better in its inventory\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  const diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.diamond_pickaxe.id);\n\n  // If not, craft an iron pickaxe\n  if (!ironPickaxe && !diamondPickaxe) {\n    await craftItem(bot, \"iron_pickaxe\", 1);\n    bot.chat(\"Iron pickaxe crafted.\");\n  }\n\n  // Explore in a random direction until a gold ore is found\n  const randomDirection = new Vec3(Math.random() > 0.5 ? 1 : -1, 0, Math.random() > 0.5 ? 1 : -1);\n  const goldOre = await exploreUntil(bot, randomDirection, 300, () => {\n    const foundGoldOre = bot.findBlock({\n      matching: mcData.blocksByName.gold_ore.id,\n      maxDistance: 32\n    });\n    return foundGoldOre;\n  });\n  if (goldOre) {\n    // Mine the gold ore\n    await mineBlock(bot, \"gold_ore\", 1);\n    bot.chat(\"Gold ore mined.\");\n\n    // Place the furnace if not already placed\n    const furnaceBlock = bot.findBlock({\n      matching: mcData.blocksByName.furnace.id,\n      maxDistance: 32\n    });\n    if (!furnaceBlock) {\n      const furnacePosition = bot.entity.position.offset(1, -1, 1);\n      await placeItem(bot, \"furnace\", furnacePosition);\n      bot.chat(\"Furnace placed.\");\n    }\n\n    // Smelt the gold ore in the furnace to obtain a gold ingot\n    await smeltItem(bot, \"gold_ore\", \"coal\", 1);\n    bot.chat(\"Gold ore smelted into gold ingot.\");\n  } else {\n    bot.chat(\"Gold ore not found within exploration time.\");\n  }\n}", "description": "async function mineGoldOreAndSmelt(bot) {\n    // async function mineGoldOreAndSmelt(bot) {\n    // The function is about mining a single gold ore block and smelting it into a gold ingot using a furnace. First, it checks if the bot has an iron or diamond pickaxe in its inventory, and if not, it crafts an iron pickaxe. Then, it explores in a random direction until it finds a gold ore block. Once found, it mines the gold ore block and places a furnace nearby if it doesn't exist. Finally, it smelts the gold ore block into a gold ingot using coal as fuel.\n}\n}"}, "mineIronOre": {"code": "async function mineIronOre(bot) {\n  // Check if the bot has enough cobblestone to craft a stone pickaxe\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  if (cobblestoneCount < 3) {\n    // Mine 3 cobblestone using the wooden pickaxe\n    await mineBlock(bot, \"stone\", 3);\n    bot.chat(\"Cobblestone mined.\");\n  }\n\n  // Place the crafting table\n  const craftingTablePosition = bot.entity.position.offset(1, -1, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  bot.chat(\"Crafting table placed.\");\n\n  // Craft a stone pickaxe using the cobblestone and sticks\n  await craftItem(bot, \"stone_pickaxe\", 1);\n  bot.chat(\"Stone pickaxe crafted.\");\n\n  // Find and mine 1 iron ore using the stone pickaxe\n  const ironOreBlock = bot.findBlock({\n    matching: mcData.blocksByName.iron_ore.id,\n    maxDistance: 32\n  });\n  if (!ironOreBlock) {\n    bot.chat(\"No iron ore found nearby. Exploring...\");\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundIronOre = bot.findBlock({\n        matching: mcData.blocksByName.iron_ore.id,\n        maxDistance: 32\n      });\n      return foundIronOre;\n    });\n  }\n  await mineBlock(bot, \"iron_ore\", 1);\n  bot.chat(\"Iron ore mined.\");\n}", "description": "async function mineIronOre(bot) {\n    // async function mineIronOre(bot) {\n    // The function is about mining 1 iron ore using a stone pickaxe. First, check if the bot has enough cobblestone to craft a stone pickaxe. If not, mine 3 cobblestone using the wooden pickaxe. Then, place a crafting table and craft a stone pickaxe using the cobblestone and sticks. Next, find and mine 1 iron ore using the stone pickaxe. If no iron ore is found nearby, explore until finding one.\n}\n}"}, "mineSpruceLogs": {"code": "async function mineSpruceLogs(bot) {\n  const spruceLogName = \"spruce_log\";\n  const spruceLogCount = 3;\n  const spruceLogBlock = bot.findBlock({\n    matching: block => block.name === spruceLogName,\n    maxDistance: 32\n  });\n  if (!spruceLogBlock) {\n    bot.chat(\"No spruce log found nearby. Exploring...\");\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundLog = bot.findBlock({\n        matching: block => block.name === spruceLogName,\n        maxDistance: 32\n      });\n      return foundLog;\n    });\n  }\n  await mineBlock(bot, spruceLogName, spruceLogCount);\n  bot.chat(\"Spruce logs mined.\");\n}", "description": "async function mineSpruceLogs(bot) {\n    // async function mineSpruceLogs(bot) {\n    // The function is about mining 3 spruce logs. It first searches for a nearby spruce log block, and if none are found, it explores the environment until it finds one. Once a spruce log block is found, it mines a total of 3 spruce logs using the `mineBlock` function. Finally, it sends a chat message indicating that the spruce logs have been mined.\n}\n}"}, "mineThreeCoalOres": {"code": "async function mineThreeCoalOres(bot) {\n  // Check if there are 3 coal ores nearby\n  const coalOres = bot.findBlocks({\n    matching: mcData.blocksByName.coal_ore.id,\n    maxDistance: 32,\n    count: 3\n  });\n\n  // If not, explore until 3 coal ores are found\n  if (coalOres.length < 3) {\n    bot.chat(\"Not enough coal ores nearby. Exploring...\");\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundCoalOres = bot.findBlocks({\n        matching: mcData.blocksByName.coal_ore.id,\n        maxDistance: 32,\n        count: 3\n      });\n      return foundCoalOres.length >= 3 ? foundCoalOres : null;\n    });\n  }\n\n  // Mine the 3 coal ores using the stone pickaxe\n  await mineBlock(bot, \"coal_ore\", 3);\n  bot.chat(\"3 coal ores mined.\");\n}", "description": "async function mineThreeCoalOres(bot) {\n    // async function mineThreeCoalOres(bot) {\n    // The function is about mining 3 coal ores using a stone pickaxe. It checks if there are 3 coal ores nearby, and if not, it explores the environment until 3 coal ores are found. Once 3 coal ores are found, it mines them using the stone pickaxe.\n}\n}"}, "mineThreeCopperOres": {"code": "async function mineThreeCopperOres(bot) {\n  // Check if there are 3 copper ores nearby\n  const copperOres = bot.findBlocks({\n    matching: mcData.blocksByName.copper_ore.id,\n    maxDistance: 32,\n    count: 3\n  });\n\n  // If not, explore until 3 copper ores are found\n  if (copperOres.length < 3) {\n    bot.chat(\"Not enough copper ores nearby. Exploring...\");\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundCopperOres = bot.findBlocks({\n        matching: mcData.blocksByName.copper_ore.id,\n        maxDistance: 32,\n        count: 3\n      });\n      return foundCopperOres.length >= 3 ? foundCopperOres : null;\n    });\n  }\n\n  // Mine the 3 copper ores using the stone_pickaxe or iron_pickaxe\n  await mineBlock(bot, \"copper_ore\", 3);\n  bot.chat(\"3 copper ores mined.\");\n}", "description": "async function mineThreeCopperOres(bot) {\n    // async function mineThreeCopperOres(bot) {\n    // The function is about mining 3 copper ores using either a stone_pickaxe or an iron_pickaxe. It first checks if there are 3 copper ores nearby. If not, it explores the environment until 3 copper ores are found. Once 3 copper ores are found, it mines them and saves the event of mining 3 copper ores.\n}\n}"}, "mineThreeCopperOresV2": {"code": "async function mineThreeCopperOres(bot) {\n  // Check if there are 3 copper ores nearby\n  const copperOres = bot.findBlocks({\n    matching: mcData.blocksByName.copper_ore.id,\n    maxDistance: 32,\n    count: 3\n  });\n\n  // If not, explore until 3 copper ores are found\n  if (copperOres.length < 3) {\n    bot.chat(\"Not enough copper ores nearby. Exploring...\");\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundCopperOres = bot.findBlocks({\n        matching: mcData.blocksByName.copper_ore.id,\n        maxDistance: 32,\n        count: 3\n      });\n      return foundCopperOres.length >= 3 ? foundCopperOres : null;\n    });\n  }\n\n  // Mine the 3 copper ores using the stone_pickaxe or iron_pickaxe\n  await mineBlock(bot, \"copper_ore\", 3);\n  bot.chat(\"3 copper ores mined.\");\n}", "description": "async function mineThreeCopperOresV2(bot) {\n    // async function mineThreeCopperOres(bot) {\n    // The function is about mining 3 copper ores using either a stone_pickaxe or an iron_pickaxe. It first checks if there are 3 copper ores nearby. If not, it explores the environment until 3 copper ores are found. Once 3 copper ores are found, it mines them and saves the event of mining 3 copper ores.\n}\n}"}, "mineThreeEmeraldOres": {"code": "async function mineThreeEmeraldOres(bot) {\n  // Equip the iron pickaxe\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  await bot.equip(ironPickaxe, \"hand\");\n  bot.chat(\"Iron pickaxe equipped.\");\n\n  // Initialize emerald ores count\n  let emeraldOresMined = 0;\n\n  // Explore and mine emerald ores until 3 are mined\n  while (emeraldOresMined < 3) {\n    const emeraldOre = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundEmeraldOre = bot.findBlock({\n        matching: mcData.blocksByName.emerald_ore.id,\n        maxDistance: 32\n      });\n      return foundEmeraldOre;\n    });\n    if (emeraldOre) {\n      // Mine the emerald ore\n      await mineBlock(bot, \"emerald_ore\", 1);\n      emeraldOresMined++;\n      bot.chat(`Emerald ore mined. Total: ${emeraldOresMined}/3`);\n    } else {\n      bot.chat(\"Emerald ore not found within exploration time. Continuing search...\");\n    }\n  }\n}", "description": "async function mineThreeEmeraldOres(bot) {\n    // async function mineThreeEmeraldOres(bot) {\n    // The function is about mining three emerald ores using an iron pickaxe. First, equip the iron pickaxe in the hand. Then, explore the environment until finding an emerald ore block. Once an emerald ore block is found, mine it and repeat until three emerald ores are mined. The function keeps track of the number of emerald ores mined and outputs the progress in the chat.\n}\n}"}, "placeFurnace": {"code": "async function placeFurnace(bot) {\n  // Check if the bot has a furnace in its inventory\n  const furnaceCount = bot.inventory.count(mcData.itemsByName.furnace.id);\n  if (furnaceCount > 0) {\n    // Find a suitable position to place the furnace\n    const furnacePosition = bot.entity.position.offset(1, -1, 1);\n\n    // Place the furnace at the found position\n    await placeItem(bot, \"furnace\", furnacePosition);\n    bot.chat(\"Furnace placed.\");\n  } else {\n    bot.chat(\"No furnace in inventory.\");\n  }\n}", "description": "async function placeFurnace(bot) {\n    // async function placeFurnace(bot) {\n    // The function checks if the bot has a furnace in its inventory, and if so, finds a suitable position to place it. Once a position is found, the furnace is placed at that position and a success message is sent. If the bot does not have a furnace in its inventory, a failure message is sent.\n}\n}"}, "smeltFiveIronOres": {"code": "async function smeltFiveIronOres(bot) {\n  // Check if the bot has a furnace in its inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  if (!furnaceItem) {\n    // Craft a furnace if not found in the inventory\n    await craftFurnace(bot);\n  }\n\n  // Find a suitable position to place the furnace\n  const furnacePosition = bot.entity.position.offset(1, -1, 1);\n\n  // Place the furnace at the found position\n  await placeItem(bot, \"furnace\", furnacePosition);\n  bot.chat(\"Furnace placed.\");\n\n  // Check if the bot has coal in its inventory\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  if (coalCount < 5) {\n    // Mine enough coal to smelt 5 iron ores\n    await mineBlock(bot, \"coal_ore\", 5 - coalCount);\n    bot.chat(\"Coal mined.\");\n  }\n\n  // Smelt the 5 raw iron ores into iron ingots using the furnace and coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 5);\n  bot.chat(\"5 raw iron ores smelted into iron ingots.\");\n}", "description": "async function smeltFiveIronOres(bot) {\n    // async function smeltFiveIronOres(bot) {\n    // The function is about smelting 5 raw iron ores into iron ingots using a furnace and coal as fuel. It first checks if the bot has a furnace in its inventory, and crafts one if not. Then it finds a suitable position to place the furnace and places it there. If the bot doesn't have enough coal, it mines enough coal to smelt 5 iron ores. Finally, it smelts the 5 raw iron ores into iron ingots using the furnace and coal as fuel.\n}\n}"}, "smeltTwelveRawCopper": {"code": "async function smeltTwelveRawCopper(bot) {\n  // Check if the bot has a furnace in its inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  if (!furnaceItem) {\n    // Craft a furnace if not found in the inventory\n    await craftItem(bot, \"furnace\", 1);\n    bot.chat(\"Furnace crafted.\");\n  }\n\n  // Find a suitable position to place the furnace\n  const furnacePosition = bot.entity.position.offset(1, -1, 1);\n\n  // Place the furnace at the found position\n  await placeItem(bot, \"furnace\", furnacePosition);\n  bot.chat(\"Furnace placed.\");\n\n  // Check if the bot has enough coal in its inventory to smelt 12 raw copper\n  const coalCount = bot.inventory.count(mcData.itemsByName.coal.id);\n  if (coalCount < 12) {\n    // Mine enough coal to smelt 12 raw copper\n    await mineBlock(bot, \"coal_ore\", 12 - coalCount);\n    bot.chat(\"Coal mined.\");\n  }\n\n  // Smelt the 12 raw copper using the furnace and the available coal as fuel\n  await smeltItem(bot, \"raw_copper\", \"coal\", 12);\n  bot.chat(\"12 raw copper smelted.\");\n}", "description": "async function smeltTwelveRawCopper(bot) {\n    // async function smeltTwelveRawCopper(bot) {\n    // The function is about smelting 12 raw copper using a furnace and coal as fuel. It checks if the bot has a furnace in its inventory, and crafts one if not. Then, it finds a suitable position to place the furnace and places it there. Next, it checks if the bot has enough coal in its inventory to smelt 12 raw copper, and mines enough coal if not. Finally, it smelts the 12 raw copper using the furnace and the available coal as fuel.\n}\n}"}}